/// version = 0.1
/// title = "ImmunhistochemieFHIR"

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_ImmunhistochemieFHIR" = ImmunhistochemieFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target


group TransformBundleImmunhistochemie(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations then CreateDiagnosticReportIHC(operations, bundle, composition, section);
    operations then CreateObservationIHC(operations, bundle, composition, section);
}

/*-----------------DiagnosticReport-----------------------*/
group CreateDiagnosticReportIHC(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations.data as data, data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_befund2'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('DiagnosticReport') as diagnosticreport then 
        {
            operations then TransformDiagnosticReportIHC(operations, diagnosticreport, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(diagnosticreport, '\'DiagnosticReport/\' + $this.id');
        };
    };

}

group TransformDiagnosticReportIHC(source operations: BackboneElement, target tgt: DiagnosticReport, target composition: Composition, target section: BackboneElement) 
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/DiagnosticReport/nNGM/befund';

    // status
    operations -> tgt.status = 'final';

    // code
    operations -> tgt.code = cc('http://loinc.org', '50398-7'); 
    

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_befund2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as diagnosticReport, diagnosticReport.reference = evaluate(value, '\'DiagnosticReport/\' + $this');
        };
        
        // Untersuchung-ID -> identifier.value
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            values.value as value -> tgt.identifier as identifier, 
                                     identifier.system = 'http://uk-koeln.de/NamingSystem/nNGM/befundnummer', 
                                     identifier.value = value;
        };
        
        // Reference Observations
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2508'" then
        {
            values.value as value -> tgt.result = create('Reference') as reference then SetReferenceToObservationIHC(operations, value, reference);
        };

        // Reference 
        // Specimen is set in Master.map
    };
}

/* ------------------------------ Check which Observation is required ---------------------------- */
group CreateObservationIHC(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether observation should be created
    operations.data as data, data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2508'" then
    {
        // BRAF
        values.value as value where "value = 'BRAF'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationBRAFIHC(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // CK7
        values.value as value where "value = 'CK7'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationCK7IHC(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // MIB1
        values.value as value where "value = 'MIB1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationMIB1IHC(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // Napsin A
        values.value as value where "value = 'Napsin A'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationNAPSINAIHC(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // P40
        values.value as value where "value = 'P40'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationP40IHC(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // Synaptophysin
        values.value as value where "value = 'Synaptophysin'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationSynaptophysinIHC(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // TTF1
        values.value as value where "value = 'TTF1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationTTF1IHC(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // ALK
        values.value as value where "value = 'ALK'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationALKIHC(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // MET
        values.value as value where "value = 'MET'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationMETIHC(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // PD-L1
        values.value as value where "value = 'PD-L1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationPDL1IHC(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // ROS1
        values.value as value where "value = 'ROS1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationROS1IHC(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');  
        };
    };
}

group TransformObservationBRAFIHC(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    // Status and Extension
    operations then TransformIHCStatusAndExtension(operations, tgt);

    //IHC category
    operations then MapIHCCategory(operations, tgt);

    //BRAF code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'BRAF');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Methode
    operations then MapIHCMethode(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'uuid_ihc_braf'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Netzwerkzentrum
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as nz -> tgt.component = create('BackboneElement') as nzcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C25341').exists().not()" then
                {
                    nz -> nzcomponent.valueString = nz;
                    nz -> nzcomponent.code = cc('http://ncit.nci.nih.gov', 'C25341');
                };
            };
        };

        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2613'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C48443').exists().not()" then
                {
                    sop -> sopcomponent.valueString = sop;
                    sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
                };
            };
        };

        // Date of Assessment end
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_phaenotype'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Date of Assessment 
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_group'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };

        // Antikörper
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_ab'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_kit_ab_producer'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_result'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        // Referenzen
        // Specimen is set in Master.map
    };
}

group TransformObservationCK7IHC(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    // Status and Extension
    operations then TransformIHCStatusAndExtension(operations, tgt);

    //IHC category
    operations then MapIHCCategory(operations, tgt);

    //CK7 code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'CK7');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Methode
    operations then MapIHCMethode(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_ihc_ck7'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Netzwerkzentrum
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as nz -> tgt.component = create('BackboneElement') as nzcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C25341').exists().not()" then
                {
                    nz -> nzcomponent.valueString = nz;
                    nz -> nzcomponent.code = cc('http://ncit.nci.nih.gov', 'C25341');
                };
            };
        };

        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2613'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C48443').exists().not()" then
                {
                    sop -> sopcomponent.valueString = sop;
                    sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
                };
            };
        };

        // Date of Assessment end
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Date of Assessment
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2037'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2038'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Antikörper
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2041'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2042'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2045'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        // Referenzen
        // Specimen is set in Master.map
    };
}

group TransformObservationMIB1IHC(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    // Status and Extension
    operations then TransformIHCStatusAndExtension(operations, tgt);

    //IHC category
    operations then MapIHCCategory(operations, tgt);

    //MIB1 code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'MIB1');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Methode
    operations then MapIHCMethode(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_ihc_mib1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Netzwerkzentrum
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as nz -> tgt.component = create('BackboneElement') as nzcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C25341').exists().not()" then
                {
                    nz -> nzcomponent.valueString = nz;
                    nz -> nzcomponent.code = cc('http://ncit.nci.nih.gov', 'C25341');
                };
            };
        };

        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2613'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C48443').exists().not()" then
                {
                    sop -> sopcomponent.valueString = sop;
                    sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
                };
            };
        };

        // Date of Assessment end
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2056'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Date of Assessment
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2055'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };


        // Antikörper
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2059'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2060'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2063'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        // Referenzen
        // Specimen is set in Master.map
    };
}

group TransformObservationNAPSINAIHC(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    // Status and Extension
    operations then TransformIHCStatusAndExtension(operations, tgt);

    //IHC category
    operations then MapIHCCategory(operations, tgt);

    //MIB1 code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'Napsin A');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Methode
    operations then MapIHCMethode(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'uuid_ihc_napsina'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Netzwerkzentrum
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as nz -> tgt.component = create('BackboneElement') as nzcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C25341').exists().not()" then
                {
                    nz -> nzcomponent.valueString = nz;
                    nz -> nzcomponent.code = cc('http://ncit.nci.nih.gov', 'C25341');
                };
            };
        };

        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2613'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C48443').exists().not()" then
                {
                    sop -> sopcomponent.valueString = sop;
                    sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
                };
            };
        };

        // Date of Assessment end
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2065'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Date of Assessment
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2064'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };

        // Antikörper
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2068'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2069'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2072'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        // Referenzen
        // Specimen is set in Master.map
    };
}

group TransformObservationP40IHC(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    // Status and Extension
    operations then TransformIHCStatusAndExtension(operations, tgt);

    //IHC category
    operations then MapIHCCategory(operations, tgt);

    //P40 code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'P40');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Methode
    operations then MapIHCMethode(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'uuid_ihc_p40'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Netzwerkzentrum
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as nz -> tgt.component = create('BackboneElement') as nzcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C25341').exists().not()" then
                {
                    nz -> nzcomponent.valueString = nz;
                    nz -> nzcomponent.code = cc('http://ncit.nci.nih.gov', 'C25341');
                };
            };
        };

        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2613'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C48443').exists().not()" then
                {
                    sop -> sopcomponent.valueString = sop;
                    sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
                };
            };
        };

        // Date of Assessment end
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2074'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Date of Assessment
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2073'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };

        // Antikörper
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2077'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2078'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2079'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        // Referenzen
        // Specimen is set in Master.map 
    };
}

group TransformObservationSynaptophysinIHC(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    // Status and Extension
    operations then TransformIHCStatusAndExtension(operations, tgt);

    //IHC category
    operations then MapIHCCategory(operations, tgt);

    //Synaptophysin code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'Synaptophysin');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Methode
    operations then MapIHCMethode(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'uuid_ihc_synaptophysin'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Netzwerkzentrum
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as nz -> tgt.component = create('BackboneElement') as nzcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C25341').exists().not()" then
                {
                    nz -> nzcomponent.valueString = nz;
                    nz -> nzcomponent.code = cc('http://ncit.nci.nih.gov', 'C25341');
                };
            };
        };

        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2613'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C48443').exists().not()" then
                {
                    sop -> sopcomponent.valueString = sop;
                    sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
                };
            };
        };

        // Date of Assessment end
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2081'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Date of Assessment
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2080'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };

        // Antikörper
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2084'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2085'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2088'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };
        
        // Referenzen
        // Specimen is set in Master.map  
    };
}

group TransformObservationTTF1IHC(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    // Status and Extension
    operations then TransformIHCStatusAndExtension(operations, tgt);

    //IHC category
    operations then MapIHCCategory(operations, tgt);

    //TTF1 code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'TTF1');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Methode
    operations then MapIHCMethode(operations, tgt);
    
    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'uuid_ihc_ttf1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Netzwerkzentrum
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as nz -> tgt.component = create('BackboneElement') as nzcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C25341').exists().not()" then
                {
                    nz -> nzcomponent.valueString = nz;
                    nz -> nzcomponent.code = cc('http://ncit.nci.nih.gov', 'C25341');
                };
            };
        };

        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2613'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C48443').exists().not()" then
                {
                    sop -> sopcomponent.valueString = sop;
                    sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
                };
            };
        };

        // Date of Assessment end
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2090'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Date of Assessment
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2089'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };

        // Antikörper
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2093'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2094'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2097'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        // Referenzen
        // Specimen is set in Master.map
    };
}

group TransformObservationALKIHC(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    // Status and Extension
    operations then TransformIHCStatusAndExtension(operations, tgt);

    //IHC category
    operations then MapIHCCategory(operations, tgt);

    //ALK code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'ALK');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Methode
    operations then MapIHCMethode(operations, tgt);
    
    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'uuid_ihc_alk'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Netzwerkzentrum
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as nz -> tgt.component = create('BackboneElement') as nzcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C25341').exists().not()" then
                {
                    nz -> nzcomponent.valueString = nz;
                    nz -> nzcomponent.code = cc('http://ncit.nci.nih.gov', 'C25341');
                };
            };
        };

        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2613'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C48443').exists().not()" then
                {
                    sop -> sopcomponent.valueString = sop;
                    sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
                };
            };
        };

        // Date of Assessment end
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2534'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Date of Assessment
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2098'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };


        // Antikörper
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2102'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2103'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2106'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };
        
        // Referenzen
        // Specimen is set in Master.map
    };
}

group TransformObservationMETIHC(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';
    
    // Status and Extension
    operations then TransformIHCStatusAndExtension(operations, tgt);

    //IHC category
    operations then MapIHCCategory(operations, tgt);

    //MET code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'MET');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Methode
    operations then MapIHCMethode(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'uuid_ihc_met'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Netzwerkzentrum
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as nz -> tgt.component = create('BackboneElement') as nzcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C25341').exists().not()" then
                {
                    nz -> nzcomponent.valueString = nz;
                    nz -> nzcomponent.code = cc('http://ncit.nci.nih.gov', 'C25341');
                };
            };
        };

        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2613'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C48443').exists().not()" then
                {
                    sop -> sopcomponent.valueString = sop;
                    sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
                };
            };
        };

        // Date of Assessment end
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2535'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Date of Assessment
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2132'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };

        // Antikörper
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2136'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2451'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2139'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };
        

        // Klassifikation
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2140'" then
        {
            values.value as klassifikation -> tgt.component = create('BackboneElement') as componentKlassifikation then
            {
                klassifikation -> componentKlassifikation.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', klassifikation);
                klassifikation -> componentKlassifikation.code = cc('http://ncit.nci.nih.gov', 'C25161');
            };
        };

        // Expression High Level
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2141'" then
        {
            values.value as expression where "$this.value = 'yes'" then
            {
                expression -> tgt.component = create('BackboneElement') as componentExpression then
                {
                    expression -> componentExpression.valueBoolean = 'true';
                    expression -> componentExpression.code = cc('http://ncit.nci.nih.gov', 'C129474');
                };
            };
            values.value as expression where "$this.value = 'no'" then
            {
                expression -> tgt.component = create('BackboneElement') as componentExpression then
                {
                    expression -> componentExpression.valueBoolean = 'false';
                    expression -> componentExpression.code = cc('http://ncit.nci.nih.gov', 'C129474');
                };
            };
        };

        // Referenzen
        // Specimen is set in Master.map
    };
}

group TransformObservationPDL1IHC(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    // Status and Extension
    operations then TransformIHCStatusAndExtension(operations, tgt);

    //IHC category
    operations then MapIHCCategory(operations, tgt);

    //PD-L1 code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'PD-L1');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Methode
    operations then MapIHCMethode(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'uuid_ihc_pdl1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Netzwerkzentrum
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as nz -> tgt.component = create('BackboneElement') as nzcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C25341').exists().not()" then
                {
                    nz -> nzcomponent.valueString = nz;
                    nz -> nzcomponent.code = cc('http://ncit.nci.nih.gov', 'C25341');
                };
            };
        };

        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2613'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C48443').exists().not()" then
                {
                    sop -> sopcomponent.valueString = sop;
                    sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
                };
            };
        };

        // Date of Assessment end
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2173'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Date of Assessment
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2172'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };

        // Antikörper
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2176'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2177'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2180'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };
        

        // Menge an Tumorzellen
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2181'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueIHC(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C127771');
            };
        };

        // Fläche positiver Immunzellen / Gesamttumorfläche
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2182'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueIHC(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'tcell-surface-ratio');
            };
        };

        // Referenzen
        // Specimen is set in Master.map
    };
}

group TransformObservationROS1IHC(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    // Status and Extension
    operations then TransformIHCStatusAndExtension(operations, tgt);

    //IHC category
    operations then MapIHCCategory(operations, tgt);

    //ROS1 code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'ROS1');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Methode
    operations then MapIHCMethode(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'uuid_ihc_ros1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Netzwerkzentrum
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as nz -> tgt.component = create('BackboneElement') as nzcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C25341').exists().not()" then
                {
                    nz -> nzcomponent.valueString = nz;
                    nz -> nzcomponent.code = cc('http://ncit.nci.nih.gov', 'C25341');
                };
            };
        };

        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2613'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                values.value as value where "%tgt.component.where(code = 'C48443').exists().not()" then
                {
                    sop -> sopcomponent.valueString = sop;
                    sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
                };
            };
        };

        // Date of Assessment end
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2536'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Date of Assessment
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2211'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };

        // Antikörper
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2215'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2216'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2219'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };
    
        // Referenzen
        // Specimen is set in Master.map
    };
}

/*-----------------HELPERS----------------------------*/
group TransformIHCStatusAndExtension(source operations: BackboneElement, target tgt: Observation)
{
    // Durchführung
    operations.data as data, data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2520'" then
    {
        values.value as value where "$this.value = 'in Bearbeitung'" then 
        {
            value -> tgt.status = 'registered';
        };
        values.value as value where "$this.value = 'abgeschlossen'" then 
        {
            value -> tgt.status = 'final';
        };
    };

    // Abschluss
    operations.data as data, data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2462'" then
    {
        values.value as value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as statusExtension then
        {
            value -> statusExtension.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/NNGM/statusAbschluss',value);
            value -> statusExtension.url = 'status';
        };
    };

    // Datum des Abschlusses
    operations.data as data, data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
    {
        values.value as value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as datumExtension then
        {
            value -> datumExtension.valueDate = dateOp(value, 'date');
            value -> datumExtension.url = 'datum';
        };
    };
}

group MapPercentageValueIHC(source src: string, target tgt: Quantity)
{
    src -> tgt.value = src,
            tgt.system = 'http://unitsofmeasure.org',
            tgt.unit = '%',
            tgt.code = '%';
}

group MapIHCCategory(source operation: BackboneElement, target tgt: Observation)
{
    //IHC category
    operation -> tgt.category as category then
    {
        operation -> category.coding = create ('Coding') as coding, coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
                                                                coding.code = 'laboratory';                                                    
    };
}

group MapIHCMethode(source operation: BackboneElement, target tgt: Observation)
{
    // IHC Methode
    operation -> tgt.method = cc('http://ncit.nci.nih.gov', 'C23020');
}

group SetReferenceToObservationIHC(source operations: BackboneElement, source name: string, target tgt: Reference)
{
    // Check which observation should be referenced
    name where "%name = 'BRAF'" then 
    {
        operations.data as data, data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'uuid_ihc_braf'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    
    name where "%name = 'CK7'" then 
    {
        operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_ihc_ck7'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };    
    };
    
    name where "%name = 'MIB1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_ihc_mib1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };   
    };

    name where "%name = 'Napsin A'" then 
    {
        operations.data as data, data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'uuid_ihc_napsina'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };    
    };

    name where "%name = 'P40'" then 
    {
        operations.data as data, data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'uuid_ihc_p40'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };     
    };

    name where "%name = 'Synaptophysin'" then 
    {
        operations.data as data, data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'uuid_ihc_synaptophysin'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };   
    };

    name where "%name = 'TTF1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'uuid_ihc_ttf1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };   
    };

    name where "%name = 'ALK'" then 
    {
        operations.data as data, data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'uuid_ihc_alk'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };   
    };

    name where "%name = 'MET'" then 
    {
        operations.data as data, data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'uuid_ihc_met'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };    
    };

    name where "%name = 'PD-L1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'uuid_ihc_pdl1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };   
    };

    name where "%name = 'ROS1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'uuid_ihc_ros1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };     
    };
}