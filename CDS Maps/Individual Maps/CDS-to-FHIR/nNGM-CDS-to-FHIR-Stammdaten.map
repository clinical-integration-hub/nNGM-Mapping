/// version = 0.1
/// title = "nNGM: Mapping Stammdaten FHIR"
/// CDS -> FHIR

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_StammdatenFHIR" = nNGM_Mapping_StammdatenFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/Patient" as target
uses "http://hl7.org/fhir/StructureDefinition/Coverage" as target
uses "http://hl7.org/fhir/StructureDefinition/EpisodeOfCare" as target
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group TransformBundleStammdaten(source operations: BackboneElement, target bundle: Bundle, target composition: Composition)
{   
    operations -> composition.section = create('BackboneElement') as section, section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'stammdaten') then
    {
        // Resources
        operations then CreatePatientStammdaten(operations, bundle, composition, section);
        operations then CreateCoverageStammdaten(operations, bundle, composition, section);
        operations then CreateEpisodeOfCareStammdaten(operations, bundle, composition, section);
        operations then CreateConsentEinwilligung1aStammdaten(operations, bundle, composition, section);
        operations then CreateConsentEinwilligung1bStammdaten(operations, bundle, composition, section);
    };
}

/* ------------------------------ Check whether the Patient needs to be created ---------------------------- */ 
group CreatePatientStammdaten(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether resource should be created
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);

    operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1131'
        or blockindex = 0 and groupindex = 0 and itemid = 'id_1125'
        or blockindex = 0 and groupindex = 0 and itemid = 'id_1124'
        or blockindex = 0 and groupindex = 0 and itemid = 'id_1126'
        or blockindex = 0 and groupindex = 0 and itemid = 'id_1127'
        or blockindex = 0 and groupindex = 0 and itemid = 'id_1128'
        or blockindex = 0 and groupindex = 0 and itemid = 'id_1129'
        or blockindex = 0 and groupindex = 0 and itemid = 'id_1280'
        or blockindex = 1 and groupindex = 0 and itemid = 'id_1298'
        or blockindex = 1 and groupindex = 0 and itemid = 'id_2436'" then
    {
        operations then SetBooleanToTrue(operations, resourceShouldBeCreated);
    };

    operations where "%resourceShouldBeCreated.valueBoolean = true" -> bundle.entry as entry, entry.resource = create('Patient') as patient then
    {
        operations then TransformPatientStammdaten(operations, patient, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(patient, '\'Patient/\' + $this.id');
    };
}

/* ------------------------------ Patient ---------------------------- */
group TransformPatientStammdaten(source operations: BackboneElement, target tgt: Patient, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Patient/nNGM';

    operations.data as data then
    {
        // ID + insert
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_nngm_patient'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as untersuchung, untersuchung.reference = evaluate(value, '\'Patient/\' + $this'), untersuchung.identifier as identifier, identifier.system = 'http://uk-koeln.de/fhir/NamingSystem/nNGM/patient-identifier', identifier.value = evaluate(composition, '$this.subject.identifier.value');
        };

        // Geschlecht -> Gender
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1131'" then
        {
            values.value as value where "$this.value = 'weiblich'" then
            {
                values.value as value -> tgt.gender = cast('female', 'FHIR.code');
            };

            values.value as value where "$this.value = 'm\u00e4nnlich' or $this.value = 'mï¿½nnlich'" then
            {
                values.value as value -> tgt.gender = cast('male', 'FHIR.code');
            };

            values.value as value where "$this.value = 'divers'" then
            {
                values.value as value -> tgt.gender as gender, 
                                         gender.extension as other, 
                                         other.url = 'http://fhir.de/StructureDefinition/gender-amtlich-de', 
                                         other.valueCodeableConcept = cc('http://fhir.de/ValueSet/gender-amtlich-de', 'D', 'divers');
            };
        };

        // Nachname -> name.family
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1125'" then
        {
            values.value as value -> tgt.name as name, name.family = value;
        };

        // Vorname -> name.given
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1124'" then
        {
            values.value as value -> tgt.name as name, name.given = value;
        };

        // Geburtsdatum -> birthDate
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1126'" then
        {
            values.value as value -> tgt.birthdate = dateOp(value, 'dateTime');
        };

        // Strasse -> address.line
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1127'" then
        {
            values.value as line -> tgt.address as tgtAddress, tgtAddress.line = line;
        };

        // PLZ -> address.postalcode
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1128'" then
        {
            values.value as plz -> tgt.address as tgtAddress, tgtAddress.postalCode = plz;
        };

        // Wohnort -> address.city
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1129'" then
        {
            values.value as city -> tgt.address as tgtAddress, tgtAddress.city = city;
        };

        // Country
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1280'" then
        {
            values.value as country -> tgt.address as tgtAddress, tgtAddress.country = country;
        };

        // DeceasedDateTime
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1298'" then
        {
            values.value as ddt -> tgt.deceasedDateTime = dateOp(ddt, 'dateTime');
        };

        // InformationsquelleTod
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2436'" then
        {
            values.value as value -> tgt.extension as infoq, 
                                       infoq.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/izt',
                                       infoq.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/izt', value);
        }; 
    };
}

/* ------------------------------ Check if Coverage needs to be created ---------------------------- */ 
group CreateCoverageStammdaten(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether resource should be created
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);

    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2459'
            or blockindex = 2 and groupindex = 0 and itemid = 'id_1269'
            or blockindex = 1 and groupindex = 0 and itemid = 'id_1270'
            or blockindex = 2 and groupindex = 0 and itemid = 'id_2460'
            or blockindex = 2 and groupindex = 0 and itemid = 'id_1268'" then
    {
        operations then SetBooleanToTrue(operations, resourceShouldBeCreated);
    };

    operations where "%resourceShouldBeCreated.valueBoolean = true" -> bundle.entry as entry, entry.resource = create('Coverage') as coverage then
    {
        operations then TransformCoverageStammdaten(operations, coverage, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(coverage, '\'Coverage/\' + $this.id');
    };
}

/* ------------------------------ Coverage ---------------------------- */
group TransformCoverageStammdaten(source operations: BackboneElement, target tgt: Coverage, target composition: Composition, target section: BackboneElement)
{ 
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Coverage/nNGM';

    // status = active
    operations -> tgt.status = cast('active', 'FHIR.code'); 
    
    // Subject
    operations -> tgt.beneficiary = create('Reference') as beneficiary, beneficiary.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');
    
    // Subscriber
    operations -> tgt.subscriber = create('Reference') as subscriber, subscriber.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    operations.data as data then
    {
        // ID + insert
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_coverage_nngm'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as referenceSection, referenceSection.reference = evaluate(value, '\'Coverage/\' + $this');
        };

        // Krankenkasse -> coverage.payor.display
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2459'" then
        {
            values.value as value -> tgt.payor as payor, payor.display = value;
        };

        // Typ (GKV/PKV) -> type.coding
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_1269'" then
        {
            values.value as type -> tgt.type = cc('http://fhir.de/ValueSet/versicherungsart-de-basis', type);
        };

        // PKV Tarif -> extension:pkvTarifform.valueCodeableConcept
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_1270'" then
        {
            values.value as value where "$this.value = 'Basistarif'" -> tgt.extension as pkvTarifform,
                                        pkvTarifform.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/pkvTarifform',
                                        pkvTarifform.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/pkv-tarifform', 'basis');
            
            values.value as value where "$this.value = 'Standardtarif'" -> tgt.extension as pkvTarifform,
                                        pkvTarifform.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/pkvTarifform',
                                        pkvTarifform.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/pkv-tarifform', 'standard');
            
            values.value as value where "$this.value = 'Vollversichert'" -> tgt.extension as pkvTarifform,
                                        pkvTarifform.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/pkvTarifform',
                                        pkvTarifform.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/pkv-tarifform', 'voll');
        };

        // Kooperationsvereinbarung -> Coverage.extension:kooperationsvereinbarung.valueBoolean
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2460'" then
        {
            values.value as value where "value = 'yes'" then
            {
                value -> tgt.extension as koop, 
                            koop.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/kooperationsvereinbarung',
                            koop.valueBoolean = cast(true, 'FHIR.boolean');
            };

            values.value as value where "value = 'no'" then
            {
                value -> tgt.extension as koop, 
                            koop.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/kooperationsvereinbarung',
                            koop.valueBoolean = cast(false, 'FHIR.boolean');
            };
        };

        // Versichertennummer -> identifier.value
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_1268'" then
        {
            values.value as value -> tgt.identifier as identifier, identifier.value = value;
        };
    };
}

/* ------------------------------ Check if EpisodeOfCare needs to be created ---------------------------- */
group CreateEpisodeOfCareStammdaten(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether resource should be created
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);

    operations.data as data, data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1297'
        or blockindex = 1 and groupindex = 0 and itemid = 'id_803'
        or blockindex = 1 and groupindex = 0 and itemid = 'id_1139'" then
    {
        operations then SetBooleanToTrue(operations, resourceShouldBeCreated);
    };

    operations where "%resourceShouldBeCreated.valueBoolean = true" -> bundle.entry as entry, entry.resource = create('EpisodeOfCare') as episodeofcare then
    {
        operations then TransformEpisodeOfCareStammdaten(operations, episodeofcare, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(episodeofcare, '\'EpisodeOfCare/\' + $this.id');
    };
}

/* ------------------------------ EpisodeOfCare ---------------------------- */
group TransformEpisodeOfCareStammdaten(source operations: BackboneElement, target tgt: EpisodeOfCare, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/EpisodeOfCare/nNGM';

    // Subject
    operations -> tgt.patient = create('Reference') as patient, patient.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Status
    operations -> tgt.status = cast('active', 'FHIR.code');

    // Identifier 
    operations -> tgt.identifier as identifier, 
            identifier.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    operations.data as data then
    {
        // ID + insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_episodeOfCare_nngm'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as referenceSection, referenceSection.reference = evaluate(value, '\'Patient/\' + $this');
        };

        // TODO
        // Erstdiagnose -> diagnosis.condition.dateOnset
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1297'" then
        {
            values.value as value -> tgt.extension as erstdiagnose,
            erstdiagnose.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/nngmErstdiagnose',
            erstdiagnose.valueDateTime = dateOp(value, 'dateTime');
        };
    
        // Letzter Kontakt -> extension:letzterKontakt.dateTime
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_803'" then
        {
            values.value as value -> tgt.extension as letzterkontakt, 
            letzterkontakt.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/abrechnungsinformation/letzterKontakt',
            letzterkontakt.valueDateTime = dateOp(value, 'dateTime');
        };
 
        // NNGM status -> extension:nngmStatus.valueCodeableConcept
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1139'" then
        {
            values.value as value -> tgt.status as status,
                                     status.extension as nngmstatus, 
                                     nngmstatus.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/FollowUpStatus',
                                     nngmstatus.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/FollowUpStatus', value);
        };
   };
}

/* ------------------------------ Check if Consent Einwilligung 1a is required ---------------------------- */
group CreateConsentEinwilligung1aStammdaten(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether resource should be created
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);
    
    operations.data as data, data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2440'
        or blockindex = 3 and groupindex = 0 and itemid = 'id_2441'" then
    {
        operations then SetBooleanToTrue(operations, resourceShouldBeCreated);
    };

    operations where "%resourceShouldBeCreated.valueBoolean = true" -> bundle.entry as entry, entry.resource = create('Consent') as consent then
    {
        operations then TransformConsentEinwilligung1aStammdaten(operations, consent, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(consent, '\'Consent/\' + $this.id');
    };
}

/* ------------------------------ Consent Einwilligung 1a ---------------------------- */
group TransformConsentEinwilligung1aStammdaten(source operations: BackboneElement, target tgt: Consent, target composition: Composition, target section: BackboneElement)
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    operations -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    operations -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');

    // Category
    operations -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    operations -> tgt.patient = create('Reference') as patient, patient.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Policy
    operations.data as data then
    {
        // ID + insert
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_consent_nngm_1a'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as untersuchung, untersuchung.reference = evaluate(value, '\'Consent/\' + $this');
        };

        // 1a unterschrieben -> provision.type
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2440'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision collate, 
                                             provision.type = cast('permit', 'FHIR.code');
                                             
                operations -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', '1a');                 
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision collate, 
                                             provision.type = cast('deny', 'FHIR.code');

                operations -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', '1a');                 
            };
        };

        // 1a datum -> provision.type.period.standort
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2441'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    };
}

/* ------------------------------ Check if Consent Einwilligung 1b is required ---------------------------- */
group CreateConsentEinwilligung1bStammdaten(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether resource should be created
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);
    
    operations.data as data, data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2446'
    or blockindex = 8 and groupindex = 0 and itemid = 'id_2447'" then
    {
        operations then SetBooleanToTrue(operations, resourceShouldBeCreated);
    };

    operations where "%resourceShouldBeCreated.valueBoolean = true" -> bundle.entry as entry, entry.resource = create('Consent') as consent then
    {
        operations then TransformConsentEinwilligung1bStammdaten(operations, consent, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(consent, '\'Consent/\' + $this.id');
    };
}

/* ------------------------------ Consent Einwilligung 1b ---------------------------- */
group TransformConsentEinwilligung1bStammdaten(source operations: BackboneElement, target tgt: Consent, target composition: Composition, target section: BackboneElement)
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    operations -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    operations -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');

    // Category
    operations -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    operations -> tgt.patient = create('Reference') as patient, patient.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Policy
    operations.data as data then
    {
        // ID + insert
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_consent_nngm_1b'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as untersuchung, untersuchung.reference = evaluate(value, '\'Consent/\' + $this');
        };

        // 1b unterschrieben -> provision.type
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2446'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code');
                
                operations -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', '1b');                 
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code');

                operations -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', '1b');                 
            };
        };

        //1b datum -> provision.type.period.standort
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2447'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    };
}
