/// version = 0.1
/// title = "nNGM_Mapping_FastTrack"

/*
TODO
    - what to do with uuid_fasttrack_egfr1921? Should there be another observation created for this uuid? Should the other Observations than be a member of this one?
    - Observation.code: ValueSet seem to have changed
        - clarify difference between https://simplifier.net/nngm-molpatho-form/actnonactna-value-codes and https://simplifier.net/nngm-molpatho-form/ergebnis-fasttrack
          both ValueSets contain the same codes but used as Observation.code and Observation.valueCodeableConcept despite Observation.Code is assigned like 'BRAF Exon 15'
    - Specimen (creation and reference of uuid_specimen_nngm4) is commented out
*/

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_FastTrackFHIR" = nNGM_Mapping_FastTrackFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/EpisodeOfCare" as target
uses "http://hl7.org/fhir/StructureDefinition/Organization" as target
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" as target
uses "http://hl7.org/fhir/StructureDefinition/Specimen" as target
uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" as target

/* ------------------------------ Bundle ---------------------------- */
group TransformBundleFastTrack(source operations: BackboneElement, target bundle: Bundle, target composition: Composition)
{
    operations -> composition.section = create('BackboneElement') as section, section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'fast-track') then
    {
        // operations then CreateSpecimenFastTrack(operations, bundle, composition, section);
        operations then CreateDiagnosticReportFastTrack(operations, bundle, composition, section);
        operations then CreateOrganizationFastTrack(operations, bundle, composition, section);
        operations then CreateObservationFastTrack(operations, bundle, composition, section);
        operations then CreateServiceRequestFastTrack(operations, bundle, composition, section);
    };
}

/* ------------------------------ Check if Specimen needs to be created ---------------------------- */
group CreateSpecimenFastTrack(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1601'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('Specimen') as specimen then 
        {
            operations then TransformSpecimenFastTrack(operations, specimen, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(specimen, '\'Specimen/\' + $this.id');
        };
    };
}

/* ------------------------------ Specimen ---------------------------- */
group TransformSpecimenFastTrack(source operations: BackboneElement, target tgt: Specimen, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Specimen/nNGM';

    // Type
    operations -> tgt.type as type, type.coding as snomedGlobalPatientSet, snomedGlobalPatientSet.system = 'http://snomed.info/sct',
                                                                    snomedGlobalPatientSet.version = 'http://snomed.info/sct/900000000000207008',
                                                                    snomedGlobalPatientSet.code = 'UNKNOWN';

    // Patient reference 
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        };

        // Referenzen
        // Request
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'uuid_nngm_testung2'" then
        {
            values.value as value -> tgt.request = create('Reference') as serviceRequest, serviceRequest.reference = evaluate(value, '\'ServiceRequest/\' + $this');
        };
    };
}

/* ------------------------------ Check if DiagnosticReport needs to be created ---------------------------- */
group CreateDiagnosticReportFastTrack(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations.data as data, data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('DiagnosticReport') as diagnosticreport then 
        {
            operations then TransformDiagnosticReportFastTrack(operations, diagnosticreport, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(diagnosticreport, '\'DiagnosticReport/\' + $this.id');
        };
    };
}

/* ------------------------------ DiagnosticReport ---------------------------- */
group TransformDiagnosticReportFastTrack(source operations: BackboneElement, target tgt: DiagnosticReport, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/DiagnosticReport/nNGM/befund';
    
    operations ->  tgt.status as status, 
                status.extension as dataAbsentReason, 
                dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
                dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    operations ->  tgt.code as code, 
                code.extension as dataAbsentReason, 
                dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
                dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');
      
    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_befund2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as diagnosticReport, diagnosticReport.reference = evaluate(value, '\'DiagnosticReport/\' + $this');
        };

        // Untersuchungs ID
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            values.value as id -> tgt.identifier = create('identifier') as befundNummer,
                                                            befundNummer.system= 'http://uk-koeln.de/NamingSystem/nNGM/befundnummer',
                                                            befundNummer.value = id;
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
        
        // Observations
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2512'" then
        {
            // if EGFR Exon 19-21: create 3 observation references
            values.value where "$this.value = 'EGFR Exon 19-21'" then
            {
                let EGFFR19 = 'EGFR Exon 19';
                let EGFFR20 = 'EGFR Exon 20';
                let EGFFR21 = 'EGFR Exon 21';
                values.value as value -> tgt.result = create('Reference') as reference then SetReferenceToObservation(operations, EGFFR19, reference);
                values.value as value -> tgt.result = create('Reference') as reference then SetReferenceToObservation(operations, EGFFR20, reference);
                values.value as value -> tgt.result = create('Reference') as reference then SetReferenceToObservation(operations, EGFFR21, reference);
            };
            values.value where "$this.value != 'EGFR Exon 19-21'" then
            {
                values.value as value -> tgt.result = create('Reference') as reference then SetReferenceToObservation(operations, value, reference);
            };
        };
    };
}

/* ------------------------------ Check if Organization needs to be created ---------------------------- */
group CreateOrganizationFastTrack(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('Organization') as organization then 
        {
            operations then TransformOrganizationFastTrack(operations, organization, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(organization, '\'Organization/\' + $this.id');
        };
    };
}

/* ------------------------------ Organization ---------------------------- */
group TransformOrganizationFastTrack(source operations: BackboneElement, target tgt: Organization, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://clinicalsite.org/fhir/StructureDefinition/organizationalunit';

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as organization, organization.reference = evaluate(value, '\'Organization/\' + $this');
        };

        // Standort
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as name -> tgt.name = name;
        };
    };
}
        
/* ------------------------------ Check which Observation is required ---------------------------- */
group CreateObservationFastTrack(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether observation should be created
    operations.data as data, data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2512'" then
    {
        // BRAF Exon 15
        values.value as value where "value = 'BRAF Exon 15'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationBRAFExon15(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
        // EGFR 19-21
        values.value as value where "value = 'EGFR Exon 19-21'" then 
        {
            operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
            {
                operations then TransformObservationEGFRExon19(operations, observation, composition, section);
                operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id'); 
            };
            operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
            {
                operations then TransformObservationEGFRExon20(operations, observation, composition, section);
                operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id'); 
            };
            operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
            {
                operations then TransformObservationEGFRExon21(operations, observation, composition, section);
                operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id'); 
            };                    
        };
        // KRAS Exon 2
        values.value as value where "value = 'KRAS Exon 2'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationKRASExon2(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
    };
}

/* ------------------------------ Observation BRAF Exon 15 ---------------------------- */
group TransformObservationBRAFExon15(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fasttrack';
    
    //Fast Track code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-obs-codes', 'C158854', 'BRAF Exon 15 Mutation');

    //Fast track category
    operations then MapSopNumberCategoryMethodStatus(operations, tgt);

    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'uuid_fasttrack_braf15'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Date of Assessment
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1945'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        
        // Assay
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1912'" then
        {
            values.value as assay -> tgt.component = create('BackboneElement') as componentAssay then
            {
                assay -> componentAssay.code = cc('http://ncit.nci.nih.gov', 'C60819');
                assay -> componentAssay.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-assays', assay) ;
            };
        };

        // Hersteller
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1913'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hersteller-molpatho', hersteller);
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1946'" then
        {
            values.value as ergebnis -> tgt.valueCodeableConcept = cc('https://simplifier.net/nngm-molpatho-form/ergebnis-fasttrack', ergebnis);
        };
        
        //Change DNA
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1947'" then
        {
            values.value as DNAchg -> tgt.component = create('BackboneElement') as componentDNAchg then
            {
                DNAchg -> componentDNAchg.code = cc('http://loinc.org', '48004-6');
                DNAchg -> componentDNAchg.valueString = DNAchg;
            };
        };

        //Change Protein
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1948'" then
        {
            values.value as AminoAcidChg -> tgt.component = create('BackboneElement') as componentAminoAcidChg then
            {
                AminoAcidChg -> componentAminoAcidChg.code = cc('http://loinc.org', '48005-3');
                AminoAcidChg -> componentAminoAcidChg.valueString = AminoAcidChg;
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 
    };
}

/* ------------------------------ Observation EGFR Exon 19 ---------------------------- */
group TransformObservationEGFRExon19(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fasttrack';

    //Fast Track code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-obs-codes', 'C128662','EGFR Exon 19 Mutation');

    //Fast track category
    operations then MapSopNumberCategoryMethodStatus(operations, tgt);

    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Date of Assessment, Assay, Hersteller
    operations then MapEGFREXO1921(operations, tgt);
    
    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_fasttrack_egfr19'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Ergebnis
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1950'" then
        {
            values.value as ergebnis -> tgt.valueCodeableConcept = cc('https://simplifier.net/nngm-molpatho-form/ergebnis-fasttrack', ergebnis);
        };

        //Change DNA
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1951'" then
        {
            values.value as DNAchg -> tgt.component = create('BackboneElement') as componentDNAchg then
            {
                DNAchg -> componentDNAchg.code = cc('http://loinc.org', '48004-6');
                DNAchg -> componentDNAchg.valueString = DNAchg;
            };
        };

        //Change Protein
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1952'" then
        {
            values.value as AminoAcidChg -> tgt.component = create('BackboneElement') as componentAminoAcidChg then
            {
                AminoAcidChg -> componentAminoAcidChg.code = cc('http://loinc.org', '48005-3');
                AminoAcidChg -> componentAminoAcidChg.valueString = AminoAcidChg;
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 
    };
}

/* ------------------------------ Observation EGFR Exon 20 ---------------------------- */
group TransformObservationEGFRExon20(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fasttrack';

    //Fast Track code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-obs-codes', 'C128663','EGFR Exon 20 Mutation');

    //Fast track category
    operations then MapSopNumberCategoryMethodStatus(operations, tgt);
    
    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Date of Assessment, Assay, Hersteller
    operations then MapEGFREXO1921(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_fasttrack_egfr20'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Ergebnis
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1954'" then
        {
            values.value as ergebnis -> tgt.valueCodeableConcept = cc('https://simplifier.net/nngm-molpatho-form/ergebnis-fasttrack', ergebnis);
        };

        //Change DNA
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1955'" then
        {
            values.value as DNAchg -> tgt.component = create('BackboneElement') as componentDNAchg then
            {
                DNAchg -> componentDNAchg.code = cc('http://loinc.org', '48004-6');
                DNAchg -> componentDNAchg.valueString = DNAchg;
            };
        };

        //Change Protein
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1956'" then
        {
            values.value as AminoAcidChg -> tgt.component = create('BackboneElement') as componentAminoAcidChg then
            {
                AminoAcidChg -> componentAminoAcidChg.code = cc('http://loinc.org', '48005-3');
                AminoAcidChg -> componentAminoAcidChg.valueString = AminoAcidChg;
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}

/* ------------------------------ Observation EGFR Exon 21 ---------------------------- */
group TransformObservationEGFRExon21(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fasttrack';

    //Fast Track code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-obs-codes', 'C128666','EGFR Exon 21 Mutation');

    //Fast track category
    operations then MapSopNumberCategoryMethodStatus(operations, tgt);
    
    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Date of Assessment, Assay, Hersteller
    operations then MapEGFREXO1921(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_fasttrack_egfr21'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Ergebnis
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1958'" then
        {
            values.value as ergebnis -> tgt.valueCodeableConcept = cc('https://simplifier.net/nngm-molpatho-form/ergebnis-fasttrack', ergebnis);
        };

        //Change DNA
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1959'" then
        {
            values.value as DNAchg -> tgt.component = create('BackboneElement') as componentDNAchg then
            {
                DNAchg -> componentDNAchg.code = cc('http://loinc.org', '48004-6');
                DNAchg -> componentDNAchg.valueString = DNAchg;
            };
        };

        //Change Protein
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1960'" then
        {
            values.value as AminoAcidChg -> tgt.component = create('BackboneElement') as componentAminoAcidChg then
            {
                AminoAcidChg -> componentAminoAcidChg.code = cc('http://loinc.org', '48005-3');
                AminoAcidChg -> componentAminoAcidChg.valueString = AminoAcidChg;
            };
        };
        
        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 
    };
}

/* ------------------------------ Observation KRAS Exon 2 ---------------------------- */
group TransformObservationKRASExon2(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fasttrack';

    //Fast Track code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-obs-codes', 'C135715','KRAS Exon 2 Mutation');

    //Fast track category
    operations then MapSopNumberCategoryMethodStatus(operations, tgt);

    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_fasttrack_kras2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Date of Assessment
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1961'" then
        {
            values.value as effectiveDT  -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        // Assay
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2610'" then
        {
            values.value as assay -> tgt.component = create('BackboneElement') as componentAssay then
            {
                assay -> componentAssay.code = cc('http://ncit.nci.nih.gov', 'C60819');
                assay -> componentAssay.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/fasttrack-assays',assay) ;
            };
        };

        // Hersteller
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2611'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hersteller-molpatho', hersteller);
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1962'" then
        {
            values.value as ergebnis -> tgt.valueCodeableConcept = cc('https://simplifier.net/nngm-molpatho-form/ergebnis-fasttrack', ergebnis);
        };

        //Change DNA
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1963'" then
        {
            values.value as DNAchg -> tgt.component = create('BackboneElement') as componentDNAchg then
            {
                DNAchg -> componentDNAchg.code = cc('http://loinc.org', '48004-6');
                DNAchg -> componentDNAchg.valueString = DNAchg;
            };
        };

        //Change Protein
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1964'" then
        {
            values.value as AminoAcidChg -> tgt.component = create('BackboneElement') as componentAminoAcidChg then
            {
                AminoAcidChg -> componentAminoAcidChg.code = cc('http://loinc.org', '48005-3');
                AminoAcidChg -> componentAminoAcidChg.valueString = AminoAcidChg;
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 
    };
}

/* -------------------------------------- Check if Service Request is required -------------------------------------------- */
group CreateServiceRequestFastTrack(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    let resourceIsCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceIsCreated);

    operations.data as data, data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2520'
                                                        or blockindex = 7 and groupindex = 0 and itemid = 'id_2462'
                                                        or blockindex = 7 and groupindex = 0 and itemid = 'id_2521'" then
    {
        // if resource is not created yet: call transform
        operations where "%resourceIsCreated.valueBoolean = false" -> bundle.entry as entry, entry.resource = create('ServiceRequest') as serviceRequest then 
        {
            operations then TransformServiceRequestFastTrack(operations, serviceRequest, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(serviceRequest, '\'ServiceRequest/\' + $this.id');
            operations then SetBooleanToTrue(operations, resourceIsCreated);
        };
    };
}

/* -------------------------------------- Service Request -------------------------------------------- */
group TransformServiceRequestFastTrack(source operations: BackboneElement, target tgt: ServiceRequest, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/ServiceRequest/nNGM/testung';

    // Status Extensions
    operations then TransformFastTrackStatusExtension(operations, tgt);

    // Intent
    operations -> tgt.intent = cast('proposal', 'FHIR.code');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Category
    operations -> tgt.category as category, 
                category.coding as coding,
                coding.code as code,
                code.extension as dataAbsentReason, 
                dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
                dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    // Code 
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'fast-track');

    // authoredOn
    operations -> tgt.authoredOn as code, 
                code.extension as dataAbsentReason, 
                dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
                dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'uuid_nngm_testung2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as serviceRequest, serviceRequest.reference = evaluate(value, '\'ServiceRequest/\' + $this');
        };

        //Status der Untersuchungen
        //Durchfuehrung
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2520'" then
        {
            values.value as value where "$this.value = 'in Bearbeitung'" then 
            {
                value -> tgt.status = 'active';
            };
            values.value as value where "$this.value = 'abgeschlossen'" then 
            {
                value -> tgt.status = 'completed';
            };
        };

        // Referenzen
        // DiagnosticReport
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_befund2'" then
        {
            values.value as value -> tgt.reasonReference = create('Reference') as diagnosticReport, diagnosticReport.reference = evaluate(value, '\'DiagnosticReport/\' + $this');
        };

         // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.requester = create('Reference') as organization, organization.reference = evaluate(value, '\'Organization/\' + $this');
        };

        // Observations
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2512'" then
        {
            // if EGFR Exon 19-21: create 3 observation references
            values.value where "$this.value = 'EGFR Exon 19-21'" then
            {
                let EGFFR19 = 'EGFR Exon 19';
                let EGFFR20 = 'EGFR Exon 20';
                let EGFFR21 = 'EGFR Exon 21';
                values.value as value -> tgt.reasonReference = create('Reference') as reference then SetReferenceToObservation(operations, EGFFR19, reference);
                values.value as value -> tgt.reasonReference = create('Reference') as reference then SetReferenceToObservation(operations, EGFFR20, reference);
                values.value as value -> tgt.reasonReference = create('Reference') as reference then SetReferenceToObservation(operations, EGFFR21, reference);
            };
            values.value where "$this.value != 'EGFR Exon 19-21'" then
            {
                values.value as value -> tgt.reasonReference = create('Reference') as reference then SetReferenceToObservation(operations, value, reference);
            };
        };

        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}

/* -------------------------------------- Create double extensions for Fast Track -------------------------------------------- */
group TransformFastTrackStatusExtension(source operations: BackboneElement, target tgt: ServiceRequest)
{
    operations.data as data then
    {
        // Status des Abschlusses
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2462'" then
        {
            values.value as value where "%tgt.status.extension.extension.where(url = 'status').exists().not()" then
            {
                value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as statusExtension then
                {
                    value -> statusExtension.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/NNGM/statusAbschluss',value, value);
                    value -> statusExtension.url = 'status';
                };
            };
        };

        //Datum des Abschlusses
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as value where "%tgt.status.extension.extension.where(url = 'datum').exists().not()" then
            {
                value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as datumExtension then
                {
                    value -> datumExtension.valueDate = dateOp(value, 'date');
                    value -> datumExtension.url = 'datum';
                };
            };
        };
    };
}

/*-----------------HELPERS----------------------------*/
group MapSopNumberCategoryMethodStatus(source operations: BackboneElement, target tgt: Observation)
{
    // Method
    operations -> tgt.method = cc('http://ncit.nci.nih.gov','C101293');

    // Status
    operations -> tgt.status = cast('final', 'FHIR.code');

    // SOP-Versionsnummer des Standorts
    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2486'" then
    {
        values.value as sop -> tgt.component = create('BackboneElement') as componentSop then
        {
            sop -> componentSop.valueString = sop;
            sop -> componentSop.code = cc('http://ncit.nci.nih.gov', 'C48443');
        };
    };
    
    //FISH category
    operations -> tgt.category as category then
    {
        operations -> category.coding = create ('Coding') as coding, coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
                                                                    coding.code = 'laboratory';                                                    
    };
}

group MapEGFREXO1921(source operations: BackboneElement, target tgt: Observation)
{
    // ------------------------------ EGFR Exon 19-21 ---------------------------- 
    operations.data as data then
    {
        // Date of Assessment
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'ft_grp_egfr_19-21'" then
        {
            values.value as effectiveDT  -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        // Assay
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2608'" then
        {
            values.value as assay -> tgt.component = create('BackboneElement') as componentAssay then
            {
                assay -> componentAssay.code = cc('http://ncit.nci.nih.gov', 'C60819');
                assay -> componentAssay.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/fasttrack-assays',assay) ;
            };
        };

        // Hersteller
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2609'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hersteller-molpatho', hersteller);
            };
        };
    };
}

group SetReferenceToObservation(source operations: BackboneElement, source name: string, target tgt: Reference)
{
    // Check which observation should be referenced
    name where "%name = 'BRAF Exon 15'" then 
    {
        operations.data as data, data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'uuid_fasttrack_braf15'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'EGFR Exon 19'" then 
    {
        operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_fasttrack_egfr19'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'EGFR Exon 20'" then 
    {
        operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_fasttrack_egfr20'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'EGFR Exon 21'" then 
    {
        operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_fasttrack_egfr21'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'KRAS Exon 2'" then 
    {
        operations.data as data, data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_fasttrack_kras2'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
}