/// version = 0.1
/// title = "nNGM: Mapping Basisangaben FHIR"
/// CTS -> FHIR

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_BasisangabenFHIR" = nNGM_Mapping_BasisangabenFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/Specimen" as target
uses "http://hl7.org/fhir/StructureDefinition/Organization" as target
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" as target
uses "http://hl7.org/fhir/StructureDefinition/Patient" as target
uses "http://hl7.org/fhir/StructureDefinition/Coverage" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target
uses "http://hl7.org/fhir/StructureDefinition/Consent" as target
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" as target
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group TransformBundleBasisangaben(source operations: BackboneElement, target bundle: Bundle, target composition: Composition)
{   
    operations -> composition.section = create('BackboneElement') as section, section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'stammdaten') then
    {
        // Organization
        //operations then CreateOrganizationReferenzenBasisangaben(operations, bundle, composition, section);

        // Tumorboard
        //operations then CreateServiceRequestBasisangaben(operations, bundle, composition, section);
        
        // Coverage
        operations then CreateCoverageBasisangaben(operations, bundle, composition, section);
        
        /*
        // Observations
        operations -> bundle.entry as entry then CreateObservationHeightBasisangaben(operations, entry);
        operations -> bundle.entry as entry then CreateObservationWeightBasisangaben(operations, entry);
        operations -> bundle.entry as entry then CreateObservationECOGBasisangaben(operations, entry);
        operations -> bundle.entry as entry then CreateObservationSmokingBasisangaben(operations, entry);

        // Practitioner
        operations -> bundle.entry as entry then CreatePractitionerBasisangaben(operations, entry);
        
        // Consent
        operations -> bundle.entry as entry then CreateConsentTeilnahme(operations, entry);
        operations -> bundle.entry as entry then CreateConsentDatenschutz(operations, entry);
        operations -> bundle.entry as entry then CreateConsentEinwilligung1aBasisangaben(operations, entry);
        operations -> bundle.entry as entry then CreateConsentEinwilligung1bBasisangaben(operations, entry);
        operations -> bundle.entry as entry then CreateConsentEinwilligung2(operations, entry);
        operations -> bundle.entry as entry then CreateConsentVersorgung1(operations, entry);
        operations -> bundle.entry as entry then CreateConsentVersorgung2(operations, entry);
        operations -> bundle.entry as entry then CreateConsentForschung1(operations, entry);
        operations -> bundle.entry as entry then CreateConsentForschung2(operations, entry);
        operations -> bundle.entry as entry then CreateConsentForschung3(operations, entry);
        operations -> bundle.entry as entry then CreateConsentForschung4(operations, entry);
        operations -> bundle.entry as entry then CreateConsentForschung5(operations, entry);
        operations -> bundle.entry as entry then CreateConsentForschung6(operations, entry);
        operations -> bundle.entry as entry then CreateConsentForschung7(operations, entry);
        operations -> bundle.entry as entry then CreateConsentForschung8(operations, entry);
        */
    };
}

/* ------------------------------ Check if Organization needs to be created ---------------------------- */
group CreateOrganizationReferenzenBasisangaben(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether resource should be created
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);

    operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_ba_siteid'
                                    or blockindex = 2 and groupindex = 0 and itemid = 'id_2435'
                                    or blockindex = 2 and groupindex = 0 and itemid = 'id_2458'" then
    {
        operations then SetBooleanToTrue(operations, resourceShouldBeCreated);
    };

    // Create resource if bool set to true
    operations where "%resourceShouldBeCreated.valueBoolean = true" -> bundle.entry as entry, entry.resource = create('Organization') as organization then
    {
        operations then TransformOrganizationReferenzenBasisangaben(operations, organization, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(organization, '\'Organization/\' + $this.id');
    };
}

/* ------------------------------ Organization ---------------------------- */
group TransformOrganizationReferenzenBasisangaben(source operations: BackboneElement, target tgt: Organization, target composition: Composition, target section: BackboneElement)
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://clinicalsite.org/fhir/StructureDefinition/organizationalunit';

    operations.data as data then
    {
        // ID + insert
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as ref, ref.reference = evaluate(value, '\'Organization/\' + $this');
        };

        // Netzwerkzentrum-id -> tgt.identifier
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_ba_siteid'" then
        {
            values.value as netzwerkzentrumid -> tgt.identifier = id('http://healex.systems/fhir/NamingSystem/nNGMnetzwerkzentrumid', netzwerkzentrumid);
        };
       
        // Standort -> tgt.name
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as value -> tgt.name = value;
        };
    
        // Kontakt -> tgt.contact.address.text
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2458'" then
        {
            values.value as value -> tgt.contact = create('Contact') as contact, contact.address as address, address.text = value;
        };
    };
}

/* ------------------------------ Check if ServiceRequest needs to be created ---------------------------- */
group CreateServiceRequestBasisangaben(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether resource should be created
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);
    
    operations.data as data, data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1571'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_1576'
                                    or blockindex = 10 and groupindex = 0 and itemid = 'id_2296'
                                    or blockindex = 10 and groupindex = 0 and itemid = 'id_2297'" then
    {
        operations then SetBooleanToTrue(operations, resourceShouldBeCreated);
    };

    operations where "%resourceShouldBeCreated.valueBoolean = true" -> bundle.entry as entry, entry.resource = create('ServiceRequest') as servicerequest then
    {
        operations then TransformServiceRequestBasisangaben(operations, servicerequest, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(servicerequest, '\'ServiceRequest/\' + $this.id');
    };
}

/* ------------------------------ ServiceRequest ---------------------------- */
group TransformServiceRequestBasisangaben(source operations: BackboneElement, target tgt: ServiceRequest, target composition: Composition, target section: BackboneElement)
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/ServiceRequest/nNGM/tumorboard';

    // Status
    operations -> tgt.status = cast('active', 'FHIR.code'); 
    
    // Intent
    operations -> tgt.intent = 'proposal';

    // Code
    operations -> tgt.code = cc('http://ncit.nci.nih.gov', 'C19165');
    
    // Requester not available
    operations -> tgt.requester as requester, 
           requester.reference as reference, 
           reference.extension as dataAbsentReason, 
           dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
           dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');
    
    operations then TransformServiceRequestRequesterExtension(operations, tgt);

    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'uuid_nngm_tumorboard'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as untersuchung, untersuchung.reference = evaluate(value, '\'ServiceRequest/\' + $this');
        };

        // References
        data -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };

        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_nngm_ecog'" then
        {
            values.value as value -> tgt.reasonReference = create('Reference') as reasonReference, reasonReference.reference = evaluate(value, '\'Observation/\' + $this');
        };

        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_observation_nngm_koerpergewicht'" then
        {
            values.value as value -> tgt.reasonReference = create('Reference') as reasonReference, reasonReference.reference = evaluate(value, '\'Observation/\' + $this');
        };

        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_observation_nngm_koerpergroesse'" then
        {
            values.value as value -> tgt.reasonReference = create('Reference') as reasonReference, reasonReference.reference = evaluate(value, '\'Observation/\' + $this');
        };

        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'uuid_observation_nngm_raucherstatus'" then
        {
            values.value as value -> tgt.reasonReference = create('Reference') as reasonReference, reasonReference.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Anforderungsdatum -> authoredOn
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1571'" then
        {
            values.value as datum -> tgt.authoredOn = dateOp(datum, 'dateTime');
        };
    
        // Zeitpunkt anforderung -> aufenthaltsart extension
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1576'" then
        {
            values.value where "$this.value = 'stationär' or $this.value = 'station\u00e4r'" then 
            {
                values.value as za -> tgt.encounter as encounter, encounter.extension as aufenthaltsart, 
                                    aufenthaltsart.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/aufenthaltsart', 
                                    aufenthaltsart.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/aufenthaltsart', 'IMP', 'inpatient encounter');
            };

            values.value where "$this.value = 'ambulant'" then 
            {
                values.value as za -> tgt.encounter as encounter, encounter.extension as aufenthaltsart, 
                                    aufenthaltsart.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/aufenthaltsart', 
                                    aufenthaltsart.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/aufenthaltsart', 'AMB', 'ambulatory');
            };
            
            values.value where "$this.value = 'N/A'" then 
            {
                values.value as za -> tgt.encounter as encounter, encounter.extension as aufenthaltsart, 
                                    aufenthaltsart.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/aufenthaltsart', 
                                    aufenthaltsart.valueCodeableConcept = cc('http://hl7.org/fhir/ValueSet/data-absent-reason', 'unknown', 'Unknown');
            };
        };
    };
}

/* -------------------------------------- Create double extension for ServiceRequest.Requester -------------------------------------------- */
group TransformServiceRequestRequesterExtension(source operations: BackboneElement, target tgt: ServiceRequest)
{
    operations.data as data then
    {
        // Vorstellung tumorboard -> requester.extension:vorstellungTmb
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2296'" then
        {
            values -> tgt.requester as requester collate, requester.extension as vorstellung, vorstellung.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/vorstellung-tmb' then
            {
                values.value as value where "$this.value = 'yes'" then
                {
                    value -> vorstellung.valueBoolean = cast(true, 'FHIR.boolean');
                };

                values.value as value where "$this.value = 'no'" then
                {
                    value -> vorstellung.valueBoolean = cast(false, 'FHIR.boolean');
                };
            };
        };

        // Vorstellung tumorboard -> requester.extension:vorstellungTmb
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2297' and %tgt.requester.extension.where(url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/persoenlicheTeilnahme').exists().not()" then
        {
            values -> tgt.requester as requester collate, requester.extension as persoenlicheTeilnahme, persoenlicheTeilnahme.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/persoenlicheTeilnahme' then
            {
                values.value as value where "$this.value = 'yes'" then
                {
                    value -> persoenlicheTeilnahme.valueBoolean = cast(true, 'FHIR.boolean');
                };

                values.value as value where "$this.value = 'no'" then
                {
                    value -> persoenlicheTeilnahme.valueBoolean = cast(false, 'FHIR.boolean');
                };
            };
        };
    };
}

/* ------------------------------ Check if Coverage needs to be created ---------------------------- */
group CreateCoverageBasisangaben(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);

    operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2459'
                                        or blockindex = 5 and groupindex = 0 and itemid = 'id_1269'
                                        or blockindex = 5 and groupindex = 0 and itemid = 'id_1270'
                                        or blockindex = 5 and groupindex = 0 and itemid = 'id_2460'
                                        or blockindex = 5 and groupindex = 0 and itemid = 'id_1268'
                                        or blockindex = 5 and groupindex = 0 and itemid = 'id_1333'" then
    {
        operations then SetBooleanToTrue(operations, resourceShouldBeCreated);
    };

    operations where "%resourceShouldBeCreated.valueBoolean = true" -> bundle.entry as entry, entry.resource = create('Coverage') as coverage then
    {
        operations then TransformCoverageBasisangaben(operations, coverage, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(coverage, '\'Coverage/\' + $this.id');
    };
}

/* ------------------------------ Coverage ---------------------------- */
group TransformCoverageBasisangaben(source operations: BackboneElement, target tgt: Coverage, target composition: Composition, target section: BackboneElement)
{ 
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Coverage/nNGM';

    // status = active
    operations -> tgt.status = cast('active', 'FHIR.code'); 
    
    // beneficiary, beneficiary.reference
    operations -> tgt.beneficiary as beneficiary,
           beneficiary.reference as reference, 
           reference.extension as dataAbsentReason,
           dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason',
           dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code'); 
    
    operations.data as data then
    {
        // ID
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_coverage_nngm'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as coverage, coverage.reference = evaluate(value, '\'DiagnosticReport/\' + $this');
        };

        // Krankenkasse
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2459'" then
        {
            values.value as kkasse -> tgt.payor as payor, payor.display = kkasse;
        };
        
        // Typ   
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1269'" then
        {
            values.value as typ -> tgt.type = cc('http://uk-koeln.de/fhir/ValueSet/nngm/krankenkassen-typ', typ);
        };

        // PKV-tariff -> extension:pkvTarifform.valueCodeableConcept
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1270'" then
        {
            values.value as vorstellung where "$this.value = 'Basistarif'" then 
            {
                values.value as value -> tgt.extension as pkv, 
                                        pkv.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/pkvTarifform',
                                        pkv.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/pkv-tarifform', 'basis');
            };

            values.value as vorstellung where "$this.value = 'Standardtarif'" then 
            {
            values.value as value -> tgt.extension as pkv, 
                                        pkv.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/pkvTarifform',
                                        pkv.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/pkv-tarifform', 'standard');
            };

            values.value as vorstellung where "$this.value = 'Vollversichert'" then 
            {
            values.value as value -> tgt.extension as pkv, 
                                        pkv.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/pkvTarifform',
                                        pkv.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/pkv-tarifform', 'voll');
            };
        };

        // Kooperationsvereinbarung -> Coverage.extension:kooperationsvereinbarung.valueBoolean
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2460'" then
        {
            values.value as value where "value = 'yes'" then
            {
                value -> tgt.extension as koop, 
                            koop.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/kooperationsvereinbarung',
                            koop.valueBoolean = cast(true, 'FHIR.boolean');
            };

            values.value as value where "value = 'no'" then
            {
                value -> tgt.extension as koop, 
                            koop.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/kooperationsvereinbarung',
                            koop.valueBoolean = cast(false, 'FHIR.boolean');
            };
        };

        // Versichertennummer -> not mapped because this data is likely coming from the Brückenkopf

        // Abrechnungsinformation -> payor.extension:abrechnungsinformation.valueCodeableConcept
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1333'" then
        {
            values.value as Abrechnungsinformation -> tgt.payor = create('Reference') as payor,
                                                        payor.extension as abrechnungsinformationen,
                                                        abrechnungsinformationen.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/abrechnungsinformation',
                                                        abrechnungsinformationen.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/abrechnungsinformation', Abrechnungsinformation);
        };    
    };
}

/* ------------------------------ Check if Observation height is required ---------------------------- */
group CreateObservationHeightBasisangaben(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1133'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationHeightBasisangaben(src, observation);
        };
    };
}

/* ------------------------------ Observation height ---------------------------- */
group TransformObservationHeightBasisangaben(source src: CTS_Transport, target tgt: Observation)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/koerpergroesse';

    // Status 
    src -> tgt.status = cast('final', 'FHIR.code');

    // Category
    src -> tgt.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', 'vital-signs');

    // Code
    src -> tgt.code = cc('http://loinc.org', '8302-2');

    // Subject
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Effective datetime
    src -> tgt.effectiveDateTime as edt, 
           edt.extension as dataAbsentReason, 
           dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
           dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    // Kopergroesse -> valueQuantity
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1133'" then
        {
            values.value as kp -> tgt.valueQuantity = create('BackboneElement') as Quantity,
            Quantity.system = 'http://unitsofmeasure.org',
            Quantity.unit = 'centimeter',
            Quantity.code = cast('cm', 'FHIR.code') ,
            Quantity.value = kp;
        };
    };
}

/* ------------------------------ Check if Observation weight is required ---------------------------- */
group CreateObservationWeightBasisangaben(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1132'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationWeightBasisangaben(src, observation);
        };
    };
}

/* ------------------------------ Observation weight ---------------------------- */
group TransformObservationWeightBasisangaben(source src: CTS_Transport, target tgt: Observation)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/koerpergewicht';

    // Status 
    src -> tgt.status = cast('final', 'FHIR.code');

    // Category
    src -> tgt.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', 'vital-signs');

    // Code
    src -> tgt.code = cc('http://loinc.org', '29463-7');

    // Subject
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Effective datetime
    src -> tgt.effectiveDateTime as edt, 
           edt.extension as dataAbsentReason, 
           dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
           dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    // Gewicht -> valueQuantity
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1132'" then
        {
            values.value as kg -> tgt.valueQuantity = create('BackboneElement') as Quantity,
            Quantity.system = 'http://unitsofmeasure.org',
            Quantity.unit = 'kilogram',
            Quantity.code = cast('kg', 'FHIR.code') ,
            Quantity.value = kg;
        };
    };
}

/* ------------------------------ Check if Observation ECOG is required ---------------------------- */
group CreateObservationECOGBasisangaben(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2290'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationECOGBasisangaben(src, observation);
        };
    };
}

/* ------------------------------ Observation ECOG ---------------------------- */
group TransformObservationECOGBasisangaben(source src: CTS_Transport, target tgt: Observation)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/ecog';

    // Status 
    src -> tgt.status = cast('final', 'FHIR.code');

    // Category
    src -> tgt.category = cc('http://hl7.org/fhir/ValueSet/observation-category', 'survey');

    // Code
    src -> tgt.code = cc('http://loinc.org', '89247-1');

    // Subject
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Ecog -> valueQuantity
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2290'" then
        {
            values.value where "$this.value = '0 - normale, uneingeschränkte Aktivität, wie vor der Erkrankung' or $this.value = '0 - normale, uneingeschr\u00e4nkte Aktivit\u00e4t, wie vor der Erkrankung'" then 
            {
                values.value as ecog -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ecog', '0', ecog); 
            };

            values.value where "$this.value = '1 - Einschränkung bei körperlicher Anstrengung, gehfähig, leichte körperliche Arbeit möglich' or $this.value = '1 - Einschr\u00e4nkung bei k\u00f6rperlicher Anstrengung, gehf\u00e4hig, leichte k\u00f6rperliche Arbeit m\u00f6glich'" then 
            {
                values.value as ecog -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ecog','1', ecog); 
            };

            values.value where "$this.value = '2 - gehfähig, Selbstversorgung möglich, aber nicht arbeitsfähig, kann mehr als 50 % der Wachzeit aufstehen' or $this.value = '2 - gehf\u00e4hig, Selbstversorgung m\u00f6glich, aber nicht arbeitsf\u00e4hig, kann mehr als 50 % der Wachzeit aufstehen'" then 
            {
                values.value as ecog -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ecog','2', ecog); 
            };

            values.value where "$this.value = '3 - nur begrenzte Selbstversorgung möglich, 50 % oder mehr der Wachzeit an Bett oder Stuhl gebunden' or $this.value = '3 - nur begrenzte Selbstversorgung m\u00f6glich, 50 % oder mehr der Wachzeit an Bett oder Stuhl gebunden'" then 
            {
                values.value as ecog -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ecog','3', ecog); 
            };
 
            values.value where "$this.value = '4 - völlig pflegebedürftig, keinerlei Selbstversorgung möglich, völlig an Bett oder Stuhl gebunden' or $this.value = '4 - v\u00f6llig pflegebed\u00FCrftig, keinerlei Selbstversorgung m\u00f6glich, v\u00f6llig an Bett oder Stuhl gebunden'" then 
            {
                values.value as ecog -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ecog','4', ecog); 
            };
        };
    };
}

/* ------------------------------ Check if Observation Smoking is required ---------------------------- */
group CreateObservationSmokingBasisangaben(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2292'
                                        or blockindex = 7 and groupindex = 0 and itemid = 'id_2293'
                                        or blockindex = 7 and groupindex = 0 and itemid = 'id_2294'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationSmokingBasisangaben(src, observation);
        };
    };
}

/* ------------------------------ Observation Smoking ---------------------------- */
group TransformObservationSmokingBasisangaben(source src: CTS_Transport, target tgt: Observation)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/raucherstatus';

    // Status 
    src -> tgt.status = cast('final', 'FHIR.code');

    // Category
    src -> tgt.category = cc('http://hl7.org/fhir/observation-category', 'social-history');

    // Code
    src -> tgt.code = cc('http://loinc.org', '72166-2');

    // Subject
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    src.operations as operations, operations.data as data then
    {
        // Typ -> valueCodeableConcept
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2292'" then
        {
             values.value where "$this.value = 'Raucher'" then 
            {
                values.value as raucherstatus -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/raucherstatus', 'LA18976-3', 'Current every day smoker'); 
            };

             values.value where "$this.value = 'Ex-Raucher'" then 
            {
                values.value as raucherstatus -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/raucherstatus', 'LA15920-4', 'Former smoker'); 
            };

             values.value where "$this.value = 'Nieraucher'" then 
            {
                values.value as raucherstatus -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/raucherstatus', 'LA18978-9', 'Never smoker'); 
            };

             values.value where "$this.value = 'N/A'" then 
            {
                values.value as raucherstatus -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/raucherstatus', 'LA18980-5', 'Unknown if ever smoked'); 
            };
        };

        // Pack years -> component:packYears.valueQuantity
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2294'" then
        {
            values.value as packyears -> tgt.component = create('BackboneElement') as packung, 
                                                            packung.code as code, 
                                                            code.text = 'Packungen Pro Jahr',
                                                            code.coding = c('http://ncit.nci.nih.gov', 'C127065'),
                                                            packung.valueQuantity = create('Quantity') as qty, 
                                                            qty.unit = 'pack years',
                                                            qty.system = 'http://unitsofmeasure.org',
                                                            qty.code = cast('{PackYears}','FHIR.code'),
                                                            qty.value = packyears;
        };                                  

        // Nichtraucher seit -> component.nichtraucher
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2293'" then
        {
            values.value as nichtraucher -> tgt.component = create('BackboneElement') as nr,
                                                            nr.code as code,
                                                            code.text = 'Nichtraucher Seit',
                                                            code.coding = c('http://ncit.nci.nih.gov', 'C127065'), 
                                                            nr.valueDateTime = dateOp(nichtraucher, 'dateTime');
        };
    };
}

/* ------------------------------ Check if Practitioner is required ---------------------------- */
group CreatePractitionerBasisangaben(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2298'
                                        or blockindex = 1 and groupindex = 0 and itemid = 'id_2326'
                                        or blockindex = 1 and groupindex = 0 and itemid = 'id_2485'" then
        {
            src -> tgt.resource = create('Practitioner') as practitioner then TransformPractitionerBasisangaben(src, practitioner);
        };
    };
}

/* ------------------------------ Practitioner ---------------------------- */
group TransformPractitionerBasisangaben(source src: CTS_Transport, target tgt: Practitioner)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Practitioner/nNGM';

    // Name
    src -> tgt.name as name, 
            name.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    src.operations as operations, operations.data as data then
    {
        // Netzwerkpartnernummer -> tgt.identifier:nngmPractitionerId
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2326'" then
        {
            values.value as netzwerkpartnernr -> tgt.identifier = id('http://uk-koeln.de/NamingSystem/nNGM/practitionerId', netzwerkpartnernr);
        };
        
        // Kontakt -> tgt.address.text
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2485'" then
        {
            values.value as kontakt -> tgt.address as address, address.text = kontakt;
        };

        // E-Mail Adresse des Anforderes (Behandler) für die Einladung -> telecom:email.value
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2298'" then
        {
            values.value as mail -> tgt.telecom = create('ContactPoint') as cp, cp.system = 'email', cp.value = mail;
        };
    };
}

/* ------------------------------ Check if Consent Teilnahme is required ---------------------------- */
group CreateConsentTeilnahme(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2392'
                                        or blockindex = 9 and groupindex = 0 and itemid = 'id_2393'" then
        {
            src -> tgt.resource = create('Consent') as consent then TransformConsentTeilnahme(src, consent);
        };
    };
}

/* ------------------------------ Consent Teilnahme ---------------------------- */
group TransformConsentTeilnahme(source src: CTS_Transport, target tgt: Consent)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    src -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    src -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');

    // Category
    src -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    src.operations as operations, operations.data as data then
    {
        // Teilnahme unterschrieben -> provision.type
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2392'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision, 
                                             provision.type = cast('permit', 'FHIR.code');

                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'TE');
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision, 
                                             provision.type = cast('deny', 'FHIR.code');
                
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'TE');
            };
        };

        // Teilnahme datum -> provision.type.period.standort
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2393'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    }; 
}

/* ------------------------------ Check if Consent Datenschutz is required ---------------------------- */
group CreateConsentDatenschutz(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2389'
                                        or blockindex = 9 and groupindex = 0 and itemid = 'id_2390'" then
        {
            src -> tgt.resource = create('Consent') as consent then TransformConsentDatenschutz(src, consent);
        };
    };
}

/* ------------------------------ Consent Datenschutz ---------------------------- */
group TransformConsentDatenschutz(source src: CTS_Transport, target tgt: Consent)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';
    
    // Status
    src -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    src -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');

    // Category
    src -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Policy
    src.operations as operations, operations.data as data then
    {
        // Datenschutz unterschrieben -> provision.type
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2389'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision, 
                                             provision.type = cast('permit', 'FHIR.code');

                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'DS');
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision, 
                                             provision.type = cast('deny', 'FHIR.code');

                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'DS');
            };
        };

        // Datenschutz datum -> provision.type.period.standort
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2390'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    }; 
}

/* ------------------------------ Check if Consent Einwilligung 1a is required ---------------------------- */
group CreateConsentEinwilligung1aBasisangaben(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2440'
                                        or blockindex = 8 and groupindex = 0 and itemid = 'id_2441'" then
        {
            src -> tgt.resource = create('Consent') as consent then TransformConsentEinwilligung1aBasisangaben(src, consent);
        };
    };
}

/* ------------------------------ Consent Einwilligung 1a ---------------------------- */
group TransformConsentEinwilligung1aBasisangaben(source src: CTS_Transport, target tgt: Consent)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    src -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    src -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');

    // Category
    src -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Policy
    src.operations as operations, operations.data as data then
    {
        // 1a unterschrieben -> provision.type
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2440'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision collate, 
                                             provision.type = cast('permit', 'FHIR.code');
                                             
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', '1a');                 
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision collate, 
                                             provision.type = cast('deny', 'FHIR.code');

                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', '1a');                 
            };
        };

        // 1a datum -> provision.type.period.standort
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2441'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    };
}

/* ------------------------------ Check if Consent Einwilligung 1b is required ---------------------------- */
group CreateConsentEinwilligung1bBasisangaben(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2446'
                                        or blockindex = 8 and groupindex = 0 and itemid = 'id_2447'" then
        {
            src -> tgt.resource = create('Consent') as consent then TransformConsentEinwilligung1bBasisangaben(src, consent);
        };
    };
}

/* ------------------------------ Consent Einwilligung 1b ---------------------------- */
group TransformConsentEinwilligung1bBasisangaben(source src: CTS_Transport, target tgt: Consent)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    src -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    src -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');

    // Category
    src -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Policy
    src.operations as operations, operations.data as data then
    {
        // 1b unterschrieben -> provision.type
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2446'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code');
                
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', '1b');                 
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code');

                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', '1b');                 
            };
        };

        //1b datum -> provision.type.period.standort
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2447'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    };
}

/* ------------------------------ Check if Consent Einwilligung 2 is required ---------------------------- */
group CreateConsentEinwilligung2(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2449'
                                        or blockindex = 8 and groupindex = 0 and itemid = 'id_2450'" then
        {
            src -> tgt.resource = create('Consent') as consent then TransformConsentEinwilligung2(src, consent);
        };
    };
}

/* ------------------------------ Consent Einwilligung 2 ---------------------------- */
group TransformConsentEinwilligung2(source src: CTS_Transport, target tgt: Consent)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    src -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    src -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');

    // Category
    src -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Policy
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2449'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code');
                
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', '2');                 
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code');

                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', '2');                 
            };
        };

        // 2 datum -> provision.type.period.standort
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2450'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    };
}

/* ------------------------------ Check if Consent Versorgung 1 is required ---------------------------- */
group CreateConsentVersorgung1(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2351'
                                        or blockindex = 11 and groupindex = 0 and itemid = 'id_2352'" then
        {
            src -> tgt.resource = create('Consent') as consent then TransformConsentVersorgung1(src, consent);
        };
    };
}

/* ------------------------------ Consent Versorgung 1 ---------------------------- */
group TransformConsentVersorgung1(source src: CTS_Transport, target tgt: Consent)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    src -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    src -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');
    
    // Category
    src -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Policy
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2351'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code');
                
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'MD');                 
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code');

                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'MD');                 
            };
        };

         data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2352'" then
         {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
         };
    };
}

/* ------------------------------ Check if Consent Versorgung 2 is required ---------------------------- */
group CreateConsentVersorgung2(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2357'
                                        or blockindex = 11 and groupindex = 0 and itemid = 'id_2358'" then
        {
            src -> tgt.resource = create('Consent') as consent then TransformConsentVersorgung2(src, consent);
        };
    };
}

/* ------------------------------ Consent Versorgung 2 ---------------------------- */
group TransformConsentVersorgung2(source src: CTS_Transport, target tgt: Consent)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    src -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    src -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');

    // Category
    src -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Policy
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2357'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code');

                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'ST');                 
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code');
                
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'ST');                 
            };
        };

        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2358'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    };
}

/* ------------------------------ Check if Consent Forschung 1 is required ---------------------------- */
group CreateConsentForschung1(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2361'
                                        or blockindex = 11 and groupindex = 0 and itemid = 'id_2362'" then
        {
            src -> tgt.resource = create('Consent') as consent then TransformConsentForschung1(src, consent);
        };
    };
}

/* ------------------------------ Consent Forschung 1 ---------------------------- */
group TransformConsentForschung1(source src: CTS_Transport, target tgt: Consent)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    src -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    src -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');

    // Category
    src -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Policy
    src.operations as operations, operations.data as data then
    {
        // Weitergabe pseudonymisierter krankheitsbezogener Daten (MDAT) innerhalb des nNGM und an kooperierende Partner unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2361'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code');

                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'WPI');                 
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code');

                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'WPI');                 
            };
        };

        // Weitergabe pseudonymisierter krankheitsbezogener Daten (MDAT) innerhalb des nNGM und an kooperierende Partner datum -> provision.type.period.standort
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2362'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    };
}

/* ------------------------------ Check if Consent Forschung 2 is required ---------------------------- */
group CreateConsentForschung2(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2364'
                                        or blockindex = 11 and groupindex = 0 and itemid = 'id_2365'" then
        {
            src -> tgt.resource = create('Consent') as consent then TransformConsentForschung2(src, consent);
        };
    };
}

/* ------------------------------ Consent Forschung 2 ---------------------------- */
group TransformConsentForschung2(source src: CTS_Transport, target tgt: Consent)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    src -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    src -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');

    // Category
    src -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Policy
    src.operations as operations, operations.data as data then
    {
        // Weitergabe von MDAT und Resttumorproben innerhalb des nNGM und an kooperierende Partner unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2364'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code');
                
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'WP');                 
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code');

                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'WP');                 
            };
        };

        // Weitergabe von MDAT und Resttumorproben innerhalb des nNGM und an kooperierende Partner datum -> provision.type.period.standort
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2365'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    };
}

/* ------------------------------ Check if Consent Forschung 3 is required ---------------------------- */
group CreateConsentForschung3(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2367'
                                        or blockindex = 11 and groupindex = 0 and itemid = 'id_2368'" then
        {
            src -> tgt.resource = create('Consent') as consent then TransformConsentForschung3(src, consent);
        };
    };
}

/* ------------------------------ Consent Forschung 3 ---------------------------- */
group TransformConsentForschung3(source src: CTS_Transport, target tgt: Consent)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    src -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    src -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');

    // Category
    src -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Policy
    src.operations as operations, operations.data as data then
    {
        // Weitergabe pseudonymisierter krankheitsbezogener Daten (MDAT) in ein Drittland unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2367'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code');
                
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'WD');                 
               
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code');
                
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'WD');                 
            };
        };

        // Weitergabe pseudonymisierter krankheitsbezogener Daten (MDAT) in ein Drittland datum -> provision.type.period.standort
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2368'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    };
}

/* ------------------------------ Check if Consent Forschung 4 is required ---------------------------- */
group CreateConsentForschung4(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2370'
                                        or blockindex = 11 and groupindex = 0 and itemid = 'id_2371'" then
        {
            src -> tgt.resource = create('Consent') as consent then TransformConsentForschung4(src, consent);
        };
    };
}

/* ------------------------------ Consent Forschung 4 ---------------------------- */
group TransformConsentForschung4(source src: CTS_Transport, target tgt: Consent)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    src -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    src -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');

    // Category
    src -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Policy
    src.operations as operations, operations.data as data then
    {
        // Weitergabe von MDAT und Resttumorproben in ein Drittland unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2370'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code');
                
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'WR');                 
               
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code');
                
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'WR');                 
            };
        };

        // Weitergabe von MDAT und Resttumorproben in ein Drittland datum -> provision.type.period.standort
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2371'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    };
}

/* ------------------------------ Check if Consent Forschung 5 is required ---------------------------- */
group CreateConsentForschung5(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2373'
                                        or blockindex = 11 and groupindex = 0 and itemid = 'id_2374'" then
        {
            src -> tgt.resource = create('Consent') as consent then TransformConsentForschung5(src, consent);
        };
    };
}

/* ------------------------------ Consent Forschung 5 ---------------------------- */
group TransformConsentForschung5(source src: CTS_Transport, target tgt: Consent)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    src -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    src -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');

    // Category
    src -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Policy
    src.operations as operations, operations.data as data then
    {
        // Weitergabe pseudonnymisierter krankheitsbezogener Daten (MDAT) zur kommerziellen Nutzung unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2373'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code');
                
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'WPK');                 
               
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code');
                
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'WPK');                 
            };
        };

        // Weitergabe pseudonnymisierter krankheitsbezogener Daten (MDAT) zur kommerziellen Nutzung datum-> provision.type.period.standort
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2374'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    };
}

/* ------------------------------ Check if Consent Forschung 6 is required ---------------------------- */
group CreateConsentForschung6(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2376'
                                        or blockindex = 11 and groupindex = 0 and itemid = 'id_2377'" then
        {
            src -> tgt.resource = create('Consent') as consent then TransformConsentForschung6(src, consent);
        };
    };
}

/* ------------------------------ Consent Forschung 6 ---------------------------- */
group TransformConsentForschung6(source src: CTS_Transport, target tgt: Consent)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    src -> tgt.status = cast('active', 'FHIR.code');
    src -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');

    // Category
    src -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Policy
    src.operations as operations, operations.data as data then
    {
        // Weitergabe von MDAT und Resttumorproben zur kommerziellen Nutzung unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2376'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code');

                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'WK');                 
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code');
                
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'WK');                 
            };
        };

        // Weitergabe von MDAT und Resttumorproben zur kommerziellen Nutzung datum -> provision.type.period.standort
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2377'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    };
}

/* ------------------------------ Check if Consent Forschung 7 is required ---------------------------- */
group CreateConsentForschung7(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2382'
                                        or blockindex = 11 and groupindex = 0 and itemid = 'id_2383'" then
        {
            src -> tgt.resource = create('Consent') as consent then TransformConsentForschung7(src, consent);
        };
    };
}

/* ------------------------------ Consent Forschung 7 ---------------------------- */
group TransformConsentForschung7(source src: CTS_Transport, target tgt: Consent)
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    src -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    src -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');

    // Category
    src -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Policy
    src.operations as operations, operations.data as data then
    {
        // Kontaktaufnahme des nNGM-Zentrums zu einem spateren Zeiptunkt zur Gewinnung weiterer informationen uber den Behandlungsverlauf unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2382'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code');

                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'KW');                 
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code');
                
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'KW');                 
            };
        };

        //Kontaktaufnahme des nNGM-Zentrums zu einem spateren Zeiptunkt zur Gewinnung weiterer informationen uber den Behandlungsverlauf unterschrieben Datum -> provision.type.period.standort
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2383'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    };
}

/* ------------------------------ Check if Consent Forschung 8 is required ---------------------------- */
group CreateConsentForschung8(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2379'
                                        or blockindex = 11 and groupindex = 0 and itemid = 'id_2380'" then
        {
            src -> tgt.resource = create('Consent') as consent then TransformConsentForschung8(src, consent);
        };
    };
}

/* ------------------------------ Consent Forschung 8 ---------------------------- */
group TransformConsentForschung8(source src: CTS_Transport, target tgt: Consent) 
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    // Status
    src -> tgt.status = cast('active', 'FHIR.code');

    // Scope
    src -> tgt.scope = cc('http://terminology.hl7.org/CodeSystem/consentscope', 'patient-privacy');
    
    // Category
    src -> tgt.category = cc('http://loinc.org', '59284-0');

    // Patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Policy
    src.operations as operations, operations.data as data then
    {
        // Kontaktaufnahme des nNGM-Zentrums zum zweck des einschlusses in eine mogliche infrage kommende neue Studie -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2379'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code');

                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'KE');                 
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code');
                
                src -> tgt.policyRule = cc('http://uk-koeln.de/fhir/ValueSet/nngm/nngm-consent-policy', 'KE');                 
            };
        };

        //Kontaktaufnahme des nNGM-Zentrums zum Zweck des Einschlusses in eine mogliche infrage kommende neue Studie datum -> provision.type.period.standort
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2380'" then
        {
            values.value as datum -> tgt.dateTime = dateOp(datum, 'dateTime');
        };
    };
}