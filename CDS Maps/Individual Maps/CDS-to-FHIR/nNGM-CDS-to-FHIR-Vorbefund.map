/// version = 0.1
/// title = "nNGM_Mapping_VorbefundFHIR"

/*
    TODO 
    - reference to Specimen is commented out until clarification 
    - Device: has no uuid and therefore cannot be referenced in BservationNGSPanel
*/

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_VorbefundFHIR" = nNGM_Mapping_VorbefundFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/Specimen" as target
uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target
uses "http://hl7.org/fhir/StructureDefinition/Device" as target


group TransformBundleVorbefundFHIR(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target biopsieSection: BackboneElement, target index: RepeatIndex)
{
    operations -> biopsieSection.section = create('BackboneElement') as section, section.title = 'vorbefund', section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'vorbefund') then
    {
        operations then CreateSpecimenVorbefund(operations, bundle, composition, section);
        operations then CreateObservationHistologieVorbefund(operations, bundle, composition, section);
        operations then CreateObservationIHCVorbefund(operations, bundle, composition, section);
        operations then CreateObservationMPVorbefund(operations, bundle, composition, section);
        operations then CreateObservationFastTrackVorbefund(operations, bundle, composition, section);
        // operations then CreateDeviceNGSPanelVorbefund(operations, bundle, composition, section);
        
        // there may be more than 1 instance of some Observation (Sonstiges and Lung Panel), thus an index is needed to reference (and create) the correct observation
        operations then CreateDiagnosticReportVorbefund(operations, bundle, composition, section, index);
        operations then CreateObservationFusionNGSVorbefund(operations, bundle, composition, section, index);  
        operations then CreateObservationNGSPanelVorbefund(operations, bundle, composition, section, index);  
    };
}

/* ------------------------------ Specimen ---------------------------- */
group CreateSpecimenVorbefund(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2471'" -> bundle.entry as entry, entry.resource = create('Specimen') as specimen then
    {
        operations then TransformSpecimenVorbefund(operations, specimen, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(specimen, '\'Specimen/\' + $this.id');
    };    
}
/* ------------------------------ Specimen ---------------------------- */
group TransformSpecimenVorbefund(source operations: BackboneElement, target tgt: Specimen, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Specimen/nNGM';

    // Type : Item required on simplifier
    operations -> tgt.type as type, type.coding as snomedGlobalPatientSet, snomedGlobalPatientSet.system  = 'http://snomed.info/sct',
                                                                    snomedGlobalPatientSet.version = 'http://snomed.info/sct/900000000000207008',
                                                                    snomedGlobalPatientSet.code as code, code.extension as dataAbsentReason,
                                                                    dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
                                                                    dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    // Subject 
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        };

        // Eingang des Tumormaterials am nNGM-Standort
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2471'" then
        {
            values.value as value -> tgt.receivedTime = dateOp(value, 'dateTime');
        };
    };
}

/* ------------------------- DiagnosticReport ------------------------- */
group CreateDiagnosticReportVorbefund(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    let resourceIsCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceIsCreated);

    operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1653'
                                                        or blockindex = 0 and groupindex = 0 and itemid = 'id_1654'" then
    {
        // if resource is not created yet: call transform
        operations where "%resourceIsCreated.valueBoolean = false" -> bundle.entry as entry, entry.resource = create('DiagnosticReport') as diagnosticReport then 
        {
            operations then TransformDiagnosticReportVorbefund(operations, diagnosticReport, composition, section, index);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(diagnosticReport, '\'DiagnosticReport/\' + $this.id');
            operations then SetBooleanToTrue(operations, resourceIsCreated);
        };
    };
}
/* ------------------------- DiagnosticReport ------------------------- */
group TransformDiagnosticReportVorbefund(source operations: BackboneElement, target tgt: DiagnosticReport, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/DiagnosticReport/nNGM/befund';

    // status: Item required on simplifier
    operations -> tgt.status = 'final';

    // code: Item required on simplifier
    operations -> tgt.code = cc('http://loinc.org', '50398-7'); 

    // Subject 
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_nngm_befund'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as diagnosticReport, diagnosticReport.reference = evaluate(value, '\'DiagnosticReport/\' + $this');
        };

        // Befundnummer 
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1654'" then
        {
            values.value as id -> tgt.identifier = create('Identifier') as befundNummer,
                                                          befundNummer.system = 'http://uk-koeln.de/NamingSystem/nNGM/befundnummer',
                                                          befundNummer.value  = id;
        };

        /* ------------------------- EXTERNES TUMORMATERIAL ----------------------------- */
        // Befunddatum
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1653'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };

        // Observations
        // Histologie
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_histologie'" then
        {
            values.value as value -> tgt.result = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };
        // IHC
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2508'" then
        {
            values.value as value -> tgt.result = create('Reference') as reference then SetReferenceToObservationIHCVorbefund(operations, value, reference);
        };
        // MP: CISH and FISH
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2509'" then
        {
            values.value as value -> tgt.result = create('Reference') as reference then SetReferenceToObservationCISHMPVorbefund(operations, value, reference);
        };
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2510'" then
        {
            values.value as value -> tgt.result = create('Reference') as reference then SetReferenceToObservationFISHMPVorbefund(operations, value, reference);
        };
        // FusionNGS
        operations then InitSectionIndex(operations, index); // (re)set index to 0
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2511'" then
        {
            // if Sonstiges: create n observation references (with n according to repeatindex)
            values.value where "$this.value = 'Sonstiges'" then
            {
                operations.data as data, data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_ngsFusionExpression_sonstiges'" then
                {
                    values.value as value -> tgt.result = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
                    operations then IncrementSectionIndex(operations, index);
                };
            };
            values.value where "$this.value != 'Sonstiges'" then
            {   
                values.value as value -> tgt.result = create('Reference') as reference then SetReferenceToObservationNGSFusionVorbefund(operations, value, reference);
            };
        };
        // FastTrack
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2512'" then
        {
            values.value as value -> tgt.result = create('Reference') as reference then SetReferenceToObservationFastTrackVorbefund(operations, value, tgt);
        };
    };

    // NGS Lung Panel
    operations then InitSectionIndex(operations, index); // (re)set index to 0
    operations.data as data then
    {
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_ngsPanel'" then
        {
            values.value as value -> tgt.result = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
            operations then IncrementSectionIndex(operations, index);
        };
    };
}

/* ---------------------- ObservationHistologie ----------------------- */
group CreateObservationHistologieVorbefund(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    let resourceIsCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceIsCreated);
    operations.data as data, data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1658'
                                                        or blockindex = 1 and groupindex = 0 and itemid = 'id_2469'
                                                        or blockindex = 1 and groupindex = 0 and itemid = 'id_2403'" then
    {
        operations where "%resourceIsCreated.valueBoolean = false" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationHistologieVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');
            operations then SetBooleanToTrue(operations, resourceIsCreated);
        }; 
    };          
}
/* ---------------------- ObservationHistologie ----------------------- */
group TransformObservationHistologieVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nngm/histologie';
    
    // Status 
    operations ->  tgt.status = cast('final', 'FHIR.code');

    // Code
    operations -> tgt.code = cc('http://ncit.nci.nih.gov','C18000');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_histologie'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        /* -------------------------------- HISTOLOGIE ---------------------------------- */
        //Klassifikation -> klassifikation component
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1658'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueCodeableConcept = cc('urn:oid:2.16.840.1.113883.6.43.1',value);
                value -> component.code                 = cc('http://ncit.nci.nih.gov', 'C25161');
            };
        };
        //Lokalisation 
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2469'" then
        {
            values.value as value -> tgt.bodySite = create('CodeableConcept') as cc, cc.coding as coding, 
                                                        coding.system  = 'urn:oid:2.16.840.1.113883.6.43.1',
                                                        coding.code    = evaluate(value, '$this.split(\'\\t\').first()'),
                                                        coding.display = evaluate(value, '$this.split(\'\\t\').last()');
        };
        // Grading
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2403'" then
        {
            values.value as value -> tgt.valueCodeableConcept = create('CodeableConcept') as cc, cc.coding as coding, 
                                                                    coding.system  = 'urn:oid:2.16.840.1.113883.15.16',
                                                                    coding.code    = evaluate(value, '$this.split(\'\\t\').first()'),
                                                                    coding.display = evaluate(value, '$this.split(\'\\t\').last()');
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}

/*------------------------------------------------------------------------------
                         Immunhistochemie (IHC)                                   
------------------------------------------------------------------------------*/
group CreateObservationIHCVorbefund(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check which observation should be created
    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2508'" then
    {
        // BRAF
        values.value as value where "value = 'BRAF'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationBRAFIHCVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // CK7
        values.value as value where "value = 'CK7'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationCK7IHCVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // MIB1
        values.value as value where "value = 'MIB1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationMIB1IHCVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // Napsin A
        values.value as value where "value = 'Napsin A'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationNapsinAIHCVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');
        };

        // P40
        values.value as value where "value = 'P40'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationP40IHCVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // Synaptophysin
        values.value as value where "value = 'Synaptophysin'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationSynaptophysinIHCVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // TTF1
        values.value as value where "value = 'TTF1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationTTF1IHCVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // ALK
        values.value as value where "value = 'ALK'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationALKIHCVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // MET
        values.value as value where "value = 'MET'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationMETIHCVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // PD-L1
        values.value as value where "value = 'PD-L1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationPDL1IHCVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };

        // ROS1
        values.value as value where "value = 'ROS1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationROS1IHCVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
    };
}
/* ---------------------- Observation BRAF IHC ------------------------ */
group TransformObservationBRAFIHCVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapIHCStatusCategoryMethodVorbefund(operations, tgt);
    
    //Code -> BRAF: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'BRAF');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'uuid_ihc_braf'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_group'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_phaenotype'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_result'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        // Antikörper
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_ab'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };
        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 
    };
}
/* ---------------------- Observation CK7 IHC ------------------------ */
group TransformObservationCK7IHCVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{    
    operations then MapIHCStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> CK7: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'CK7');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_ihc_ck7'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2037'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2038'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2045'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* ---------------------- Observation MIB1 IHC ------------------------ */
group TransformObservationMIB1IHCVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapIHCStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> MIB1: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'MIB1');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'uuid_ihc_mib1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2055'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2056'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };
        
        // Ergebnis
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2063'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* --------------------- Observation NapsinA IHC ---------------------- */
group TransformObservationNapsinAIHCVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapIHCStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> Napsin A: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'Napsin A');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {  
        // ID + Composition insert
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'uuid_ihc_napsina'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2064'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2065'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2072'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* ---------------------- Observation P40 IHC ------------------------- */
group TransformObservationP40IHCVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapIHCStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> P40: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'P40');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'uuid_ihc_p40'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2073'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2074'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2079'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* ----------------- Observation Synaptophysin IHC -------------------- */
group TransformObservationSynaptophysinIHCVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapIHCStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> Synaptophysin: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'Synaptophysin');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 18 and groupindex = 0 and itemid = 'uuid_ihc_synaptophysin'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 18 and groupindex = 0 and itemid = 'id_2080'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 18 and groupindex = 0 and itemid = 'id_2081'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 18 and groupindex = 0 and itemid = 'id_2088'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* --------------------- Observation TTF1 IHC ------------------------- */
group TransformObservationTTF1IHCVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{  
    operations then MapIHCStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> TTF1: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'TTF1');
    
    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 19 and groupindex = 0 and itemid = 'uuid_ihc_ttf1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 19 and groupindex = 0 and itemid = 'id_2089'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 19 and groupindex = 0 and itemid = 'id_2090'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 19 and groupindex = 0 and itemid = 'id_2097'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* --------------------- Observation ALK IHC --------------------------- */
group TransformObservationALKIHCVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapIHCStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> ALK: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'ALK');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    //Date of Assessment, Phaenotyp
    operations then MapObservationALKDatePhaenotypVorbefund(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_ihc_alk'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Ergebnis
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2106'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* --------------------- Observation MET IHC --------------------------- */
group TransformObservationMETIHCVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapIHCStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> MET: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'MET');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    //Date of Assessment, Phaenotyp
    operations then MapObservationMETDatePhaenotypVorbefund(operations, tgt);

    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_ihc_met'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Ergebnis
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2139'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        //Klassifikation -> Klassifikation component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2140'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueCodeableConcept	 = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes',value,value);
                value -> component.code                  = cc('http://ncit.nci.nih.gov', 'C25161');
            };
        };

        //Expression high-level
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2141'" then
        {
            values.value as value where "value = 'yes'" then
            {
                value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueBoolean	 = 'true';
                    value -> component.code          = cc('http://ncit.nci.nih.gov', 'C129474');
                };
            };
            values.value as value where "value = 'no'" then
            {
                value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueBoolean	 = 'false';
                    value -> component.code          = cc('http://ncit.nci.nih.gov', 'C129474');
                };
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* --------------------- Observation PD-L1 IHC ------------------------- */
group TransformObservationPDL1IHCVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{    
    operations then MapIHCStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> PD-L1: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'PD-L1');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 16 and groupindex = 0 and itemid = 'uuid_ihc_pdl1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 16 and groupindex = 0 and itemid = 'id_2172'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 16 and groupindex = 0 and itemid = 'id_2173'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 16 and groupindex = 0 and itemid = 'id_2180'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        //Menge der Tumorzellen (% positive Tumorzellen TPS) -> menge-tumorzellen component
        data.values as values where "blockindex = 16 and groupindex = 0 and itemid = 'id_2181'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C127771');
            };
        };

        //Fläche positiver Immunzellen / Gesamttumorfläche -> ratio-pos-flaeche component
        data.values as values where "blockindex = 16 and groupindex = 0 and itemid = 'id_2182'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'tcell-surface-ratio');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* --------------------- Observation ROS1 IHC -------------------------- */
group TransformObservationROS1IHCVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapIHCStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> ROS1: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'ROS1');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    //Date of Assessment, Phaenotyp
    operations then MapObservationROS1DatePhaenotypVorbefund(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'uuid_ihc_ros1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Ergebnis
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2219'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', value, value);
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}

/*------------------------------------------------------------------------------
                        Molekularpathologie (MP)                                   
------------------------------------------------------------------------------*/
group CreateObservationMPVorbefund(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // CISH - Check which observation should be created
    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2509'" then
    {
        // ALK
        values.value as value where "value = 'ALK'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationALKCISHVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
        // MET
        values.value as value where "value = 'MET'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationMETCISHVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
        // RET
        values.value as value where "value = 'RET'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationRETCISHVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
        // ROS1
        values.value as value where "value = 'ROS1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationROS1CISHVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
    };

    // FISH - Check which observation should be created
    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2510'" then
    {
        // ALK
        values.value as value where "value = 'ALK'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationALKFISHVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
        // MET
        values.value as value where "value = 'MET'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationMETFISHVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
        // RET
        values.value as value where "value = 'RET'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationRETFISHVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
        // ROS1
        values.value as value where "value = 'ROS1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationROS1FISHVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
    };
}
/* --------------------- Observation ALK CISH -------------------------- */
group TransformObservationALKCISHVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapCISHStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> ALK: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'ALK');

    //Date of Assessment, Phaenotyp
    operations then MapObservationALKDatePhaenotypVorbefund(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_ish_alk'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Ergebnis 
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2112'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Positive Tumorzellen -> pos-tumor-zellen component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2113'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* --------------------- Observation MET CISH -------------------------- */
group TransformObservationMETCISHVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapCISHStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> MET: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'MET');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    //Date of Assessment, Phaenotyp
    operations then MapObservationMETDatePhaenotypVorbefund(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_ish_met'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Ergebnis
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2147'" then
        {
            values.value where "$this.value = 'positiv (high-level amplification)'
                               or $this.value = 'positiv (moderate-level amplification)'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', ergebnis, ergebnis);
            };

            values.value where "$this.value = 'negativ'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value where "$this.value = 'nicht auswertbar'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };
        
        //Amplifikation -> amplification-level component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2148'" then
        {
            values.value as value where "value = 'Amplifikation high-level'" then 
            {
               value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://loinc.org', 'LA9193-9', 'High');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
            values.value as value where "value = 'Amplifikation moderate-level'" then 
            {
               value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://loinc.org', 'LA8982-6', 'Medium');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
            values.value as value where "value = 'keine Amplifikation'" then 
            {
               value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://loinc.org', 'LA32-8', 'No');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* --------------------- Observation RET CISH -------------------------- */
group TransformObservationRETCISHVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapCISHStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> RET: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'RET');

    //Date of Assessment, Phaenotyp
    operations then MapObservationRETDatePhaenotypVorbefund(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'uuid_ish_ret'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Ergebnis 
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2191'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Positive Tumorzellen -> pos-tumor-zellen component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2192'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* --------------------- Observation ROS1 CISH ------------------------- */
group TransformObservationROS1CISHVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapCISHStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> ROS1: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'ROS1');

    //Date of Assessment, Phaenotyp
    operations then MapObservationROS1DatePhaenotypVorbefund(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'uuid_ish_ros1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Ergebnis 
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2225'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Positive Tumorzellen -> pos-tumor-zellen component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2226'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };

        //Polysomie -> polysomie component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2227'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* --------------------- Observation ALK FISH -------------------------- */
group TransformObservationALKFISHVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapFISHStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> ALK: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'ALK');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    //Date of Assessment, Phaenotyp
    operations then MapObservationALKDatePhaenotypVorbefund(operations, tgt);

    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_fish_alk'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };        
        
        //Ergebnis 
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2119'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Positive Tumorzellen -> pos-tumor-zellen component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2120'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };

        //Polysomie -> polysomie component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2121'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* --------------------- Observation MET FISH -------------------------- */
group TransformObservationMETFISHVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapFISHStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> MET: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'MET');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    //Date of Assessment, Phaenotyp -> 6, 0,id_2132
    operations then MapObservationMETDatePhaenotypVorbefund(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_fish_met'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Ergebnis 
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2154'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Amplifikation -> amplification-level component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2155'" then
        {
            values.value as value where "value = 'Amplifikation high-level'" then 
            {
               value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://loinc.org', 'LA9193-9', 'High');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
            values.value as value where "value = 'Amplifikation intermediate-level'" then 
            {
               value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://loinc.org', 'LA8982-6', 'Medium');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
            values.value as value where "value = 'Amplifikation low-level'" then 
            {
               value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://loinc.org', 'LA9194-7', 'Low');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
            values.value as value where "value = 'negativ'" then 
            {
                value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://loinc.org', 'LA32-8', 'No');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
            values.value as value where "value = 'nicht auswertbar'" then 
            {
               value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://loinc.org', 'LA11884-6', 'Indeterminate');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
        };

        //Prozentzahl an Zellen mit mehr als 15 MET-Signalen pro Zelle (Positiv ≥ 10 %) bei einer high-level Amplifikation
        //15-met-ratio component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2156'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', '15-met-ratio');
            };
        };

        //Prozentzahl an Zellen mit mehr als 5 MET-Signalen pro Zelle (Positiv ≥ 50 %) bei einer intermediate-level Amplifikation
        //5-met-ratio component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2157'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', '5-met-ratio');
            };
        };

        //Prozentzahl an Zellen mit mehr als 4 MET-Signalen pro Zelle (Positiv ≥ 40 %) bei einer low-level Amplifikation
        //4-met-ratio component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2158'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', '4-met-ratio');
            };
        };

        //Gezählte Tumorzellen
        //gezaehlteTumorzellen component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2159'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C0007584');
            };
        };

        //MET Signale
        //met-signale component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2160'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'met-signal-count');
            };
        };

        //CEN Signale
        //CEN-signale component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2161'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'cen-signal-count');
            };
        };

        //Quotient MET/CEN7 Signale
        //quot-met-cen-signal component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2162'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'met-cen-signal-ratio');
            };
        };

        //Durchschnitt MET-Genkopiezahl/Zelle (Positiv ≥ 6)
        //met-copy-pro-zell component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2163'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'met-copy-per-cell');
            };
        };

        //Polysomie
        //polysomie component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2164'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* --------------------- Observation RET FISH -------------------------- */
group TransformObservationRETFISHVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapFISHStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> RET: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'RET');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    //Date of Assessment, Phaenotyp
    operations then MapObservationRETDatePhaenotypVorbefund(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'uuid_fish_ret'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Ergebnis 
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2198'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Positive Tumorzellen -> pos-tumor-zellen component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2199'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };

        //Polysomie
        //polysomie component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2200'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* --------------------- Observation ROS1 FISH ------------------------- */
group TransformObservationROS1FISHVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapFISHStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> ROS1: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'ROS1');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    //Date of Assessment,Phaenotyp
    operations then MapObservationROS1DatePhaenotypVorbefund(operations, tgt);

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'uuid_fish_ros1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Ergebnis 
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2233'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Positive Tumorzellen -> pos-tumor-zellen component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2234'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };

        //Polysomie -> polysomie component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2235'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValueVorbefund(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}

/*------------------------------------------------------------------------------
                                    Fusion NGS                                  
------------------------------------------------------------------------------*/
group CreateObservationFusionNGSVorbefund(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    // since there can be more than 1 instance of the Sonstiges Observation we need an index to assign the corresponding data to each observation
    operations then InitSectionIndex(operations, index); // (re)set index to 0

    // Check whether observation should be created
    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2511'" then
    {
        // ALK
        values.value where "$this.value = 'ALK'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationALKFusionNGSVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // RET
        values.value where "$this.value = 'RET'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationRETFusionNGSVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // ROS1
        values.value where "$this.value = 'ROS1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationROS1FusionNGSVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // NTRK1
        values.value where "$this.value = 'NTRK1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationNTRK1FusionNGSVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // NTRK2
        values.value where "$this.value = 'NTRK2'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationNTRK2FusionNGSVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // NTRK3
        values.value where "$this.value = 'NTRK3'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationNTRK3FusionNGSVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // FGFR1
        values.value where "$this.value = 'FGFR1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationFGFR1FusionNGSVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // FGFR2
        values.value where "$this.value = 'FGFR2'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationFGFR2FusionNGSVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // FGFR3
        values.value where "$this.value = 'FGFR3'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationFGFR3FusionNGSVorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // Sonstiges: create n observation (with n according to repeatindex)
        values.value where "$this.value = 'Sonstiges'" then
        {
            operations.data as data, data.values as values where "repeatindex = %index.sectionIndex and (blockindex = 21 and groupindex = 0 and itemid ='id_2246'
                                                                                                        or blockindex = 21 and groupindex = 0 and itemid ='id_2254'
                                                                                                        or blockindex = 21 and groupindex = 0 and itemid ='id_2255'
                                                                                                        or blockindex = 21 and groupindex = 0 and itemid ='id_2256'
                                                                                                        or blockindex = 21 and groupindex = 0 and itemid ='id_2257'
                                                                                                        or blockindex = 21 and groupindex = 0 and itemid ='id_2258'
                                                                                                        or blockindex = 21 and groupindex = 0 and itemid ='id_2259')" then
            {
                operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then
                {
                    operations then TransformObservationSonstigesFusionNGSVorbefund(operations, observation, composition, section, index);
                    operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id'); 
                };
                operations then IncrementSectionIndex(operations, index);
            };
        };
    };
}
/* ------------------ Observation ALK FusionNGS ------------------------ */
group TransformObservationALKFusionNGSVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapFusionNGSStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> ALK: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'ALK');

    //Date of Assessment, Phaenotyp
    operations then MapObservationALKDatePhaenotypVorbefund(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_alk'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Ergebnis 
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2127'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2128'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2129'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };

        //5' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2130'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        //ALK Exon -> exon component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2131'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* ------------------ Observation RET FusionNGS ------------------------ */
group TransformObservationRETFusionNGSVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapFusionNGSStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> RET: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'RET');

    //Date of Assessment, Phaenotyp
    operations then MapObservationRETDatePhaenotypVorbefund(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ret'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Ergebnis 
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2206'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2207'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2208'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };

        //5' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2209'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        //RET Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2210'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* ---------------- Observation ROS1 FusionNGS ------------------------- */
group TransformObservationROS1FusionNGSVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapFusionNGSStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> ROS1: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'ROS1');

    //Date of Assessment, Phaenotyp
    operations then MapObservationROS1DatePhaenotypVorbefund(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ros1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Ergebnis 
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2241'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2242'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2243'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };

        //5' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2244'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        //ROS1 Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2245'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
} 
/* ----------------- Observation NTRK1 FusionNGS ----------------------- */
group TransformObservationNTRK1FusionNGSVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapFusionNGSStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> NTRK1: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'NTRK1');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ntrk1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2540'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Ergebnis 
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2547'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2548'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2549'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };

        //5' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2550'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* ---------------- Observation NTRK2 FusionNGS ------------------------ */
group TransformObservationNTRK2FusionNGSVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapFusionNGSStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> NTRK2: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'NTRK2');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ntrk2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2592'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Ergebnis 
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2596'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2597'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2598'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };

        //5' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2599'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* ----------------- Observation NTRK3 FusionNGS ----------------------- */
group TransformObservationNTRK3FusionNGSVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapFusionNGSStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> NTRK3: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'NTRK3');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ntrk3'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2584'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Ergebnis 
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2588'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2589'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2590'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };

        //5' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2591'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* ---------------- Observation FGFR1 FusionNGS ------------------------ */
group TransformObservationFGFR1FusionNGSVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapFusionNGSStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> FGFR1: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'FGFR1');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_fgfr1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2576'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Ergebnis 
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2580'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2581'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2582'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };
        
        //5' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2583'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* ----------------- Observation FGFR2 FusionNGS ----------------------- */
group TransformObservationFGFR2FusionNGSVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapFusionNGSStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> FGFR2: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'FGFR2');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_fgfr2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };


        //Date of Assessment
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2568'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Ergebnis 
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2572'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2573'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2574'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };

        //3' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2575'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* ----------------- Observation FGFR3 FusionNGS ----------------------- */
group TransformObservationFGFR3FusionNGSVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations then MapFusionNGSStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> FGFR3: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'FGFR3');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_fgfr3'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2560'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Ergebnis 
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2564'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2565'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2566'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };

        //3' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2567'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}
/* ---------------- Observation Sonstiges FusionNGS -------------------- */
group TransformObservationSonstigesFusionNGSVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{ 
    operations then MapFusionNGSStatusCategoryMethodVorbefund(operations, tgt);

    //Code -> Sonstiges: Item required in Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'Sonstige Fusion NGS');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_ngsFusionExpression_sonstiges'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };
        
        //Date of Assessment
        data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_2246'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Ergebnis 
        data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_2254'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };
        
        //Erster Fusionspartner -> erster-fusionspartner component
        data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_2255'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://loinc.org', '48018-6');
            };
        };

        //Zweiter Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_2256'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://loinc.org', '48018-6');
            };
        };

        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_2257'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };
        
        //Exon erster Fusionspartner
        data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_2258'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString  = value;
                value -> component.code         = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'erster-fusionspartner-exon');
            };
        };
        
        //Exon zweiter Fusionspartner
        data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_2259'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString  = value;
                value -> component.code         = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'zweiter-fusionspartner-exon');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };    
    };
}

/*------------------------------------------------------------------------------
                                    Fast Track                                  
------------------------------------------------------------------------------*/
group CreateObservationFastTrackVorbefund(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether observation should be created
    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2512'" then
    {
        // BRAF Exon 15
        values.value as value where "value = 'BRAF Exon 15'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationBRAFExon15Vorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
        // EGFR Exon 19-21
        values.value as value where "value = 'EGFR Exon 19-21'" then 
        {
            operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
            {
                operations then TransformObservationEGFRExon19Vorbefund(operations, observation, composition, section);
                operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id'); 
            };
            operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
            {
                operations then TransformObservationEGFRExon20Vorbefund(operations, observation, composition, section);
                operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id'); 
            };
            operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
            {
                operations then TransformObservationEGFRExon21Vorbefund(operations, observation, composition, section);
                operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id'); 
            };                    
        };
        // KRAS Exon 2
        values.value as value where "value = 'KRAS Exon 2'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformObservationKRASExon2Vorbefund(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
    };
}
/* ------------ Observation BRAF Exon 15 Fast Track -------------------- */
group TransformObservationBRAFExon15Vorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{ 
    operations then MapFastTrackStatusCategoryMethodVorbefund(operations, tgt);

    //Code: Item required on Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'BRAF Exon 15', 'BRAF Exon 15');

    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 22 and groupindex = 0 and itemid = 'uuid_fasttrack_braf15'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 22 and groupindex = 0 and itemid = 'id_1945'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        // Ergebnis
        data.values as values where "blockindex = 22 and groupindex = 0 and itemid = 'id_1946'" then
        {
            values.value as ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', ergebnis);
        };

        //Change DNA -> dna-chg component
        data.values as values where "blockindex = 22 and groupindex = 0 and itemid = 'id_1947'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48004-6');
                value -> component.valueString = value;
            };
        };

        //Change Protein -> amino-acid-chg component
        data.values as values where "blockindex = 22 and groupindex = 0 and itemid = 'id_1948'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48005-3');
                value -> component.valueString = value;
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 
    };
}
/* ------------ Observation EGFR Exon 19 Fast Track -------------------- */
group TransformObservationEGFRExon19Vorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{ 
    operations then MapFastTrackStatusCategoryMethodVorbefund(operations, tgt);

    //Code: Item required on Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'EGFR Exon 19', 'EGFR Exon 19');

    //Date of Assessment, Assay, Hersteller
    operations then MapObservationFastTrackDateAssayHerstellerEGFREXO1921Vorbefund(operations, tgt);

    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'uuid_fasttrack_egfr19'" then
        {
            values.value as value where "unit.exists().not()" then // to not use the unit = 21 value element
            {
                values.value as value -> tgt.id = value;
                values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1950'" then
        {
            values.value as ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', ergebnis, ergebnis);
        };

        //Change DNA -> dna-chg component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1951'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48004-6');
                value -> component.valueString = value;
            };
        };
        //Change Protein -> amino-acid-chg component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1952'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48005-3');
                value -> component.valueString = value;
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 
    };
}
/* ------------ Observation EGFR Exon 20 Fast Track -------------------- */
group TransformObservationEGFRExon20Vorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{ 
    operations then MapFastTrackStatusCategoryMethodVorbefund(operations, tgt);

    //Code: Item required on Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'EGFR Exon 20', 'EGFR Exon 20');

    //Date of Assessment, Assay, Hersteller
    operations then MapObservationFastTrackDateAssayHerstellerEGFREXO1921Vorbefund(operations, tgt);

    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'uuid_fasttrack_egfr20'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Ergebnis
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1954'" then
        {
            values.value as ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', ergebnis, ergebnis);
        };

        //Change DNA -> dna-chg component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1955'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48004-6');
                value -> component.valueString = value;
            };
        };

        //Change Protein -> amino-acid-chg component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1956'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48005-3');
                value -> component.valueString = value;
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 
    };
}
/* ------------ Observation EGFR Exon 21 Fast Track -------------------- */
group TransformObservationEGFRExon21Vorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{ 
    operations then MapFastTrackStatusCategoryMethodVorbefund(operations, tgt);

    //Code: Item required on Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'EGFR Exon 21', 'EGFR Exon 21');

    //Date of Assessment, Assay, Hersteller
    operations then MapObservationFastTrackDateAssayHerstellerEGFREXO1921Vorbefund(operations, tgt);

    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'uuid_fasttrack_egfr21'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Ergebnis
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1958'" then
        {
            values.value as ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', ergebnis, ergebnis);
        };

        //Change DNA -> dna-chg component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1959'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48004-6');
                value -> component.valueString = value;
            };
        };

        //Change Protein -> amino-acid-chg component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1960'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48005-3');
                value -> component.valueString = value;
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 
    };
}
/* -------------- Observation KRAS Exon Fast Track --------------------- */
group TransformObservationKRASExon2Vorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{ 
    operations then MapFastTrackStatusCategoryMethodVorbefund(operations, tgt);

    //Code: Item required on Simplifier
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'KRAS Exon 2', 'KRAS Exon 2');

    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 24 and groupindex = 0 and itemid = 'uuid_fasttrack_kras2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 24 and groupindex = 0 and itemid = 'id_1961'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        // Ergebnis
        data.values as values where "blockindex = 24 and groupindex = 0 and itemid = 'id_1962'" then
        {
            values.value as ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', ergebnis, ergebnis);
        };

        //Change DNA -> dna-chg component
        data.values as values where "blockindex = 24 and groupindex = 0 and itemid = 'id_1963'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48004-6');
                value -> component.valueString = value;
            };
        };

        //Change Protein -> amino-acid-chg component
        data.values as values where "blockindex = 24 and groupindex = 0 and itemid = 'id_1964'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48005-3');
                value -> component.valueString = value;
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 
    };
}

/*------------------------------------------------------------------------------
                                    NGS Lung Panel                                  
------------------------------------------------------------------------------*/
/* --------------------- Device NGSPanel Fusion NGS -------------------- */
group CreateDeviceNGSPanelVorbefund(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations.data as data, data.values as values where   "blockindex = 25 and groupindex = 0 and itemid = 'id_1260'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('Device') as device then 
        {
            operations then TransformDeviceNGSPanelVorbefund(operations, device, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(device, '\'Device/\' + $this.id');
        };
    };          
}
/* --------------------- Device NGSPanel Fusion NGS -------------------- */
group TransformDeviceNGSPanelVorbefund(source operations: BackboneElement, target tgt: Device, target composition: Composition, target section: BackboneElement)
{
    // TODO: may need to be replaced by uuid_device
    operations -> tgt.id = uuid();
    operations -> section.entry = create('Reference') as device, device.reference = evaluate(tgt, '\'Device/\' + $this.id');
    
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Device';
    
    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        // TODO: currently no uuid_device in CDS export
        // data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_device'" then
        // {
        //     values.value as value -> tgt.id = value;
        //     values.value as value -> section.entry = create('Reference') as device, device.reference = evaluate(value, '\'Device/\' + $this');
        // };

        //NGS Lung Panel Version
        data.values as values where "blockindex = 25 and groupindex = 0 and itemid = 'id_1260'" then
        {
            values.value as value -> tgt.version = create('BackboneElement') as version then 
            {
                value -> version.value = value;
            };
        };
    };
}
/* ----------------- Observation NGSPanel Fusion NGS ------------------- */
group CreateObservationNGSPanelVorbefund(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    // since there can be more than 1 instance of the NGS Lung Panel we need an index to assign the corresponding data to each observation
    operations then InitSectionIndex(operations, index); // (re)set index to 0

    operations.data as data, data.values as values where "repeatindex = %index.sectionIndex and (blockindex = 26 and groupindex = 0 and itemid = 'id_1160'
                                                                                                or blockindex = 26 and groupindex = 0 and itemid = 'id_1159'
                                                                                                or blockindex = 26 and groupindex = 0 and itemid = 'id_35'
                                                                                                or blockindex = 26 and groupindex = 0 and itemid = 'id_36'
                                                                                                or blockindex = 26 and groupindex = 0 and itemid = 'id_37'
                                                                                                or blockindex = 26 and groupindex = 0 and itemid = 'id_38'
                                                                                                or blockindex = 26 and groupindex = 0 and itemid = 'ngs_panel_reftranscript'
                                                                                                or blockindex = 26 and groupindex = 0 and itemid = 'ngs_panel_coverage'
                                                                                                or blockindex = 26 and groupindex = 0 and itemid = 'id_47'
                                                                                                or blockindex = 26 and groupindex = 0 and itemid = 'id_48')" then
    {
        operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationNGSPanelVorbefund(operations, observation, composition, section, index);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');
        };
        operations then IncrementSectionIndex(operations, index);
    };          
}
/* ----------------- Observation NGSPanel Fusion NGS ------------------- */
group TransformObservationNGSPanelVorbefund(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{ 
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-panel';

    // Status : Item required on simplifier
    operations ->  tgt.status = cast('final', 'FHIR.code');

    // Code : Item required on simplifier : there is not code for NGS Lung Panel
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes','NGS Panel');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    //Category
    operations -> tgt.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', 'laboratory');

    // Method : Item required on simplifier
    operations -> tgt.method = cc('http://ncit.nci.nih.gov','C101293');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_ngsPanel'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Date of Assessment
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_1160'" then
        {
            values.value as value -> tgt.effectiveDateTime = dateOp(value, 'date');
        };

        //Gen -> gene-studied
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_1159'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueCodeableConcept = cc('http://www.genenames.org',value);
                value -> component.code                 = cc('http://ncit.nci.nih.gov', '48018-6');
            };
        };

        //Exon -> exon
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_35'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };

        //HGVS c. (Mutation cDNA) -> dna-chg
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_36'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://loinc.org', '48004-6');
            };
        };

        //HGVS p. (Mutation Protein) -> amino-acid-chg
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_37'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://loinc.org', '48005-3');
            };
        };

        //Allelic fraction -> allelicfraction
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_38'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code = cc('http://ncit.nci.nih.gov', 'C154665');
                value -> component.valueQuantity = create('Quantity') as quantity,
                                                   quantity.value  = value,
                                                   quantity.unit   ='%',
                                                   quantity.system = 'http://unitsofmeasure.org',
                                                   quantity.code   = '%';
            };
        };

        //Referenztranskript -> referenztranskript
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'ngs_panel_reftranscript'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://loinc.org', '51958-7');
            };
        };

        //Coverage -> coverage
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'ngs_panel_coverage'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://loinc.org', '82121-5');
            };
        };

        //Biologische/molekulare Bewertung
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_47'" then
        {
            values.value as value -> tgt.interpretation = cc('http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation',value);
        };

        //Kommentar
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_48'" then
        {
            values.value as value -> tgt.note = create('Annotation') as annotation, annotation.text = value;
        };
    
        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };

        // Device
        // data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_device'" then
        // {
        //     values.value as value -> tgt.device = create('Reference') as device, device.reference = evaluate(value, '\'Device/\' + $this');
        // };
    };
}

/*------------------------------------------------------------------------------
                             HELPERS                                   
------------------------------------------------------------------------------*/
group MapPercentageValueVorbefund(source src: string, target tgt: Quantity)
{
    src -> tgt.value   = src,
            tgt.system = 'http://unitsofmeasure.org',
            tgt.unit   = '%',
            tgt.code   = '%';
}
group MapStatusCategoryVorbefund(source operations: BackboneElement, target tgt: Observation)
{
    // Status: Item required in Simplifier
    operations -> tgt.status = cast('final', 'FHIR.code');

    //category: Item required in Simplifier
    operations -> tgt.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', 'laboratory');
}
group MapIHCStatusCategoryMethodVorbefund(source operations: BackboneElement, target tgt: Observation)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    operations then MapStatusCategoryVorbefund(operations, tgt);

    //Methode IHC
    operations -> tgt.method = cc('http://ncit.nci.nih.gov', 'C23020');
}
group MapObservationALKDatePhaenotypVorbefund(source operations: BackboneElement, target tgt: Observation)
{
    operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2098'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2099'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };
    };
}
group MapObservationMETDatePhaenotypVorbefund(source operations: BackboneElement, target tgt: Observation)
{
    operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2132'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2133'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };
    };
}
group MapObservationRETDatePhaenotypVorbefund(source operations: BackboneElement, target tgt: Observation)
{
    operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2183'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2184'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };
    };
}
group MapObservationROS1DatePhaenotypVorbefund(source operations: BackboneElement, target tgt: Observation)
{
    operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2211'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2212'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expression'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };
    };
}
group MapCISHStatusCategoryMethodVorbefund(source operations: BackboneElement, target tgt: Observation)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ish';
    
    operations then MapStatusCategoryVorbefund(operations, tgt);

    //Methode CISH
    operations -> tgt.method = cc('http://ncit.nci.nih.gov', 'C23022');
}
group MapFISHStatusCategoryMethodVorbefund(source operations: BackboneElement, target tgt: Observation)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fish';

    operations then MapStatusCategoryVorbefund(operations, tgt);

    //Methode FISH
    operations -> tgt.method = cc('http://ncit.nci.nih.gov', 'C17563');
}
group MapFusionNGSStatusCategoryMethodVorbefund(source operations: BackboneElement, target tgt: Observation)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';
    
    operations then MapStatusCategoryVorbefund(operations, tgt);

    //Methode FusionNGS
    operations -> tgt.method = cc('http://ncit.nci.nih.gov', 'C101293');
}
group MapFastTrackStatusCategoryMethodVorbefund(source operations: BackboneElement, target tgt: Observation)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fasttrack';
    
    operations then MapStatusCategoryVorbefund(operations, tgt);

    //Methode Fast Track
    operations -> tgt.method = cc('http://ncit.nci.nih.gov','C101293');
}
group MapObservationFastTrackDateAssayHerstellerEGFREXO1921Vorbefund(source operations: BackboneElement, target tgt: Observation)
{
    operations.data as data then
    {
        //Date of Assessment 
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'ft_grp_egfr_19-21'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        // Assay -> assay component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_2608'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code                 = cc('http://ncit.nci.nih.gov', 'C60819');
                value -> component.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/fasttrack-assays',value) ;
            };
        };

        // Hersteller -> hersteller component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_2609'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code                 = cc('http://ncit.nci.nih.gov', 'C25392');
                value -> component.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', value);
            };
        };
    };
}
group SetReferenceToObservationIHCVorbefund(source operations: BackboneElement, source name: string, target tgt: Reference)
{
    // Check which observation should be referenced
    name where "%name = 'BRAF'" then 
    {
        operations.data as data, data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'uuid_ihc_braf'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    
    name where "%name = 'CK7'" then 
    {
        operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_ihc_ck7'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };    
    };
    
    name where "%name = 'MIB1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'uuid_ihc_mib1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };   
    };

    name where "%name = 'Napsin A'" then 
    {
        operations.data as data, data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'uuid_ihc_napsina'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };    
    };

    name where "%name = 'P40'" then 
    {
        operations.data as data, data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'uuid_ihc_p40'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };     
    };

    name where "%name = 'Synaptophysin'" then 
    {
        operations.data as data, data.values as values where "blockindex = 18 and groupindex = 0 and itemid = 'uuid_ihc_synaptophysin'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };   
    };

    name where "%name = 'TTF1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 19 and groupindex = 0 and itemid = 'uuid_ihc_ttf1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };   
    };

    name where "%name = 'ALK'" then 
    {
        operations.data as data, data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_ihc_alk'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };   
    };

    name where "%name = 'MET'" then 
    {
        operations.data as data, data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_ihc_met'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };    
    };

    name where "%name = 'PD-L1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 16 and groupindex = 0 and itemid = 'uuid_ihc_pdl1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };   
    };

    name where "%name = 'ROS1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'uuid_ihc_ros1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };     
    };
}
group SetReferenceToObservationCISHMPVorbefund(source operations: BackboneElement, source name: string, target tgt: Reference)
{
    // Check which CISH observation should be referenced
    name where "%name = 'ALK'" then 
    {
        operations.data as data, data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_ish_alk'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'MET'" then 
    {
        operations.data as data, data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_ish_met'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    }; 
    name where "%name = 'RET'" then 
    {
        operations.data as data, data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'uuid_ish_ret'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    }; 
    name where "%name = 'ROS1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'uuid_ish_ros1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    }; 
}
group SetReferenceToObservationFISHMPVorbefund(source operations: BackboneElement, source name: string, target tgt: Reference)
{
    // Check which FISH observation should be referenced
    name where "%name = 'ALK'" then 
    {
        operations.data as data, data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_fish_alk'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'MET'" then 
    {
        operations.data as data, data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_fish_met'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    }; 
    name where "%name = 'RET'" then 
    {
        operations.data as data, data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'uuid_fish_ret'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    }; 
    name where "%name = 'ROS1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'uuid_fish_ros1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
}
group SetReferenceToObservationNGSFusionVorbefund(source operations: BackboneElement, source name: string, target tgt: Reference)
{
    // Check which observation should be referenced
    name where "%name = 'ALK'" then 
    {
        operations.data as data, data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_alk'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'RET'" then 
    {
        operations.data as data, data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ret'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'ROS1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ros1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'NTRK1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ntrk1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'NTRK2'" then 
    {
        operations.data as data, data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ntrk2'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'NTRK3'" then 
    {
        operations.data as data, data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ntrk3'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'FGFR1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_fgfr1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'FGFR2'" then 
    {
        operations.data as data, data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_fgfr2'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'FGFR3'" then 
    {
        operations.data as data, data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_fgfr3'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
}
group SetReferenceToObservationFastTrackVorbefund(source operations: BackboneElement, source name: string, target tgt: DiagnosticReport)
{
    // Check which observation should be referenced
    name where "%name = 'BRAF Exon 15'" then 
    {
        operations.data as data, data.values as values where "blockindex = 22 and groupindex = 0 and itemid = 'uuid_fasttrack_braf15'" 
            -> tgt.result = create('Reference') as reference then
        {
            values.value as value -> reference.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'EGFR Exon 19-21'" then
    {
        operations.data as data, data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'uuid_fasttrack_egfr19'" then            
        {
            values.value as value where "unit.exists().not()" -> tgt.result = create('Reference') as reference then // to not use the unit = 21 value element
            {
                values.value as value -> reference.reference = evaluate(value, '\'Observation/\' + $this');
            };
        };

        operations.data as data, data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'uuid_fasttrack_egfr20'"
            -> tgt.result = create('Reference') as reference then
        {
            values.value as value -> reference.reference = evaluate(value, '\'Observation/\' + $this');
        };

        operations.data as data, data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'uuid_fasttrack_egfr21'"  
            -> tgt.result = create('Reference') as reference then
        {
            values.value as value -> reference.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };

    name where "%name = 'KRAS Exon 2'" then 
    {
        operations.data as data, data.values as values where "blockindex = 24 and groupindex = 0 and itemid = 'uuid_fasttrack_kras2'"  
            -> tgt.result = create('Reference') as reference then
        {
            values.value as value -> reference.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
}