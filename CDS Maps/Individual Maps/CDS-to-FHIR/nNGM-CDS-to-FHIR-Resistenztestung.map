/// version = 0.1
/// title = "nNGM: Mapping Resistenztestung FHIR"
/// CDS -> FHIR

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_ResistenztestungFHIR" = nNGM_Mapping_ResistenztestungFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/EpisodeOfCare" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target

/*
    TODO
    - creation of specimen is currently commented out (with uuid_specimen_nngm2)
    - not sure whether receivedTime and accessionIdentifier is needed for Specimen here
*/

group TransformBundleResistenztestung(source operations: BackboneElement, target bundle: Bundle, target composition: Composition)
{
    operations -> composition.section = create('BackboneElement') as section, section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'resistenztestung') then
    {
        // operations then CreateSpecimenResistenztestung(operations, bundle, composition, section);
        operations then CreateObservationKrebserkrankung(operations, bundle, composition, section);
        operations then CreateObservationsResistenztestung(operations, bundle, composition, section);
    };
}

/* ------------------------------ Check if Specimen is required ---------------------------- */
group CreateSpecimenResistenztestung(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_1601' then
    {
        operations -> bundle.entry as entry, entry.resource = create('Specimen') as specimen then 
        {
            operations then TransformSpecimenResistenztestung(operations, specimen, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(specimen, '\'Specimen/\' + $this.id');
        };
    };
}

/* ------------------------------ Specimen ---------------------------- */
group TransformSpecimenResistenztestung(source operations: BackboneElement, target tgt: Specimen, target composition: Composition, target section: BackboneElement) 
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Specimen/nNGM';

    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        };

        // Biopsy-ID -> biopsyId.value
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1601'" then
        // {
        //     values.value as value -> tgt.identifier = create('Identifier') as biopsieId, biopsieId.system = cast('http://uk-koeln.de/NamingSystem/nNGM/biopsienummer', 'FHIR.uri'), biopsieId.value = value;
        // };

        // // Eingang des Tumormaterials in der Pathologie -> receivedTime
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2515'" then
        // {
        //     values.value as value -> tgt.receivedTime = dateOp(value, 'dateTime');
        // };

        // // Eingangsnummer des Tumormaterials in der Pathologie -> accessionIdentifier:eingangsnummerPatho
        // data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2516'" then
        // {
        //     values.value as value -> tgt.accessionIdentifier as identifier, identifier.system = cast('http://uk-koeln.de/NamingSystem/nNGM/eingangPathoNummer', 'FHIR.uri'), identifier.value = value;
        // };

        // Tumormaterial -> type.text
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2517'" then
        {
           values.value as value -> tgt.type as type, type.text = value, type.coding = create('Coding') as snomedGlobalPatientSet, snomedGlobalPatientSet.system = 'http://snomed.info/sct',
                                                                                        snomedGlobalPatientSet.version = 'http://snomed.info/sct/900000000000207008',
                                                                                        snomedGlobalPatientSet.code = 'UNKNOWN';
        };
    };
}


/* ------------------------------ Check whether ObservationKrebserkrankung needs to be created ---------------------------- */ 
group CreateObservationKrebserkrankung(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement) 
{
    // Check whether observation should be created
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);

    operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1573'
                                                        or blockindex = 0 and groupindex = 0 and itemid = 'id_2397'" then
    {
        operations then SetBooleanToTrue(operations, resourceShouldBeCreated);
    };    

    // Create resource if bool set to true
    operations where "%resourceShouldBeCreated.valueBoolean = true" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
    {
        operations then TransformObservationKrebserkrankung(operations, observation, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');
    };
}

/* ------------------------------ Observation Progress/Rezidiv Krebserkrankung ---------------------------- */
group TransformObservationKrebserkrankung(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/progress-relapse';

    // Observation.status
    operations -> tgt.status = 'final';

    // Observation.category
    operations -> tgt.category = cc('http://hl7.org/fhir/ValueSet/observation-category', 'survey');

    // Observation.code
    operations -> tgt.code = cc('http://ncit.nci.nih.gov', 'C25630');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_nngm_progressRelapse'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as resistenztestung, resistenztestung.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Progressdatum -> tgt.effectiveDateTime
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2397'" then
        {
            values.value as value -> tgt.effectiveDateTime = dateOp(value, 'date');
        };

        // Rezidiv/Progress (Ja/Nein) -> valueBoolean 
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1573'" then
        {
            values.value as value where "value = 'yes'" then
            {
                value -> tgt.valueBoolean = cast(true, 'FHIR.boolean');
            };
    
            values.value as value where "value = 'no'" then
            {
                value -> tgt.valueBoolean = cast(false, 'FHIR.boolean');
            };
        };
    };    
}

/* ------------------------------ Check whether therapy was carried out and create an observation for it if that is the case ---------------------------- */
group CreateObservationsResistenztestung(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations.data as data, data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1434'" then
    {
        values.value as value where "value = 'EGFR'" then
        {
            operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
            {
                operations then TransformObservationEGFR(operations, observation, composition, section);
                operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');
            };
        };

        values.value as value where "value = 'ALK'" then
        {
            operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
            {
                operations then TransformObservationALK(operations, observation, composition, section);
                operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');
            };
        };

        values.value as value where "value = 'ROS1'" then
        {
            operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
            {
                operations then TransformObservationROS1(operations, observation, composition, section);
                operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');
            };
        };
    };
}

/* ------------------------------ Observation EGFR ---------------------------- */
group TransformObservationEGFR(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/tki-resistenz-egfr';

    // Observation.status
    operations -> tgt.status = 'final';

    // Observation.category
    operations -> tgt.category = cc('http://ncit.nci.nih.gov', 'C1967');

    // Observation.code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nngm/tki-resistenz', 'C134501');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_tkiResistenzEgfr'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as egfrObservation, egfrObservation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Date Of Assessement -> tgt.effectiveDateTime
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2502'" then
        {
             values.value as value -> tgt.effectiveDateTime = dateOp(value, 'date');
        };

        // Therapies
        // 1. Therapie
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1441'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as therapie, therapie.code = cc('http://ncit.nci.nih.gov', 'C62721'), therapie.valueCodeableConcept as vcc, vcc.text = value, therapie.extension as componentOrder, componentOrder.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/observation-component-order', componentOrder.value = 1;
        };
    
        // 2. Therapie
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1442'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as therapie, therapie.code = cc('http://ncit.nci.nih.gov', 'C62721'), therapie.valueCodeableConcept as vcc, vcc.text = value, therapie.extension as componentOrder, componentOrder.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/observation-component-order', componentOrder.value = 2;
        };
    
        // 3. Therapie
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1443'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as therapie, therapie.code = cc('http://ncit.nci.nih.gov', 'C62721'), therapie.valueCodeableConcept as vcc, vcc.text = value, therapie.extension as componentOrder, componentOrder.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/observation-component-order', componentOrder.value = 3;
        };
    
        // 4. Therapie
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1444'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as therapie, therapie.code = cc('http://ncit.nci.nih.gov', 'C62721'), therapie.valueCodeableConcept as vcc, vcc.text = value, therapie.extension as componentOrder, componentOrder.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/observation-component-order', componentOrder.value = 4;
        };

        // Mutations
        // Exon
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1436'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as exon, exon.valueString = value, exon.code = cc('http://ncit.nci.nih.gov', 'C13231');
        };
    
        // HGVS c
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1437'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as hgvsc, hgvsc.valueString = value, hgvsc.code = cc('http://loinc.org', '48004-6');
        };

        // HGVS p
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1438'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as hgvsp, hgvsp.valueString = value, hgvsp.code = cc('http://loinc.org', '48005-3');
        };
    };
}

/* ------------------------------ Observation ALK ---------------------------- */
group TransformObservationALK(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/tki-resistenz-alk';

    // Observation.status
    operations -> tgt.status = 'final';

    // Observation.category
    operations -> tgt.category = cc('http://ncit.nci.nih.gov', 'C1967');

    // Observation.code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nngm/tki-resistenz', 'C142114');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_tkiResistenzAlk'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as alkObservation, alkObservation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Date Of Assessement -> tgt.effectiveDateTime
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2502'" then
        {
             values.value as value -> tgt.effectiveDateTime = dateOp(value, 'date');
        };

        // FusionPartner
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2504'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as fusionPartner, fusionPartner.code = cc('http://ncit.nci.nih.gov', 'C28510'), fusionPartner.valueString = value;
        };

        // Therapies
        // 1. Therapie
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1447'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as therapie, therapie.code = cc('http://ncit.nci.nih.gov', 'C62721'), therapie.valueCodeableConcept as vcc, vcc.text = value, therapie.extension as componentOrder, componentOrder.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/observation-component-order', componentOrder.value = 1;
        };
    
        // 2. Therapie
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1448'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as therapie, therapie.code = cc('http://ncit.nci.nih.gov', 'C62721'), therapie.valueCodeableConcept as vcc, vcc.text = value, therapie.extension as componentOrder, componentOrder.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/observation-component-order', componentOrder.value = 2;
        };
    
        // 3. Therapie
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1449'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as therapie, therapie.code = cc('http://ncit.nci.nih.gov', 'C62721'), therapie.valueCodeableConcept as vcc, vcc.text = value, therapie.extension as componentOrder, componentOrder.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/observation-component-order', componentOrder.value = 3;
        };
    
        // 4. Therapie
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1450'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as therapie, therapie.code = cc('http://ncit.nci.nih.gov', 'C62721'), therapie.valueCodeableConcept as vcc, vcc.text = value, therapie.extension as componentOrder, componentOrder.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/observation-component-order', componentOrder.value = 4;
        };
    };
}

/* ------------------------------ Observation ROS1 ---------------------------- */
group TransformObservationROS1(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/tki-resistenz-ros1';

    // Observation.status
    operations -> tgt.status = 'final';

    // Observation.category
    operations -> tgt.category = cc('http://ncit.nci.nih.gov', 'C1967');

    // Observation.code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nngm/tki-resistenz', 'C131071');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_tkiResistenzRos1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as ros1Observation, ros1Observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Date Of Assessement -> tgt.effectiveDateTime
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2502'" then
        {
             values.value as value -> tgt.effectiveDateTime = dateOp(value, 'date');
        };

        // FusionPartner
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2506'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as fusionPartner, fusionPartner.code = cc('http://ncit.nci.nih.gov', 'C28510'), fusionPartner.valueString = value;
        };

        // Therapies
        // 1. Therapie
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1453'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as therapie, therapie.code = cc('http://ncit.nci.nih.gov', 'C62721'), therapie.valueCodeableConcept as vcc, vcc.text = value, therapie.extension as componentOrder, componentOrder.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/observation-component-order', componentOrder.value = 1;
        };
    
        // 2. Therapie
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1454'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as therapie, therapie.code = cc('http://ncit.nci.nih.gov', 'C62721'), therapie.valueCodeableConcept as vcc, vcc.text = value, therapie.extension as componentOrder, componentOrder.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/observation-component-order', componentOrder.value = 2;
        };
    
        // 3. Therapie
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1455'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as therapie, therapie.code = cc('http://ncit.nci.nih.gov', 'C62721'), therapie.valueCodeableConcept as vcc, vcc.text = value, therapie.extension as componentOrder, componentOrder.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/observation-component-order', componentOrder.value = 3;
        };
    
        // 4. Therapie
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1456'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as therapie, therapie.code = cc('http://ncit.nci.nih.gov', 'C62721'), therapie.valueCodeableConcept as vcc, vcc.text = value, therapie.extension as componentOrder, componentOrder.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/observation-component-order', componentOrder.value = 4;
        };
    };
}

/* ------------------------------ Add mutations to observation ---------------------------- */
// The mutations are the same for each observation so we can separate them into groups and then simply call them for each observation
group TransformMutationsResistenztestung(source operations: BackboneElement, target tgt: Observation)
{
    operations.data as data then
    {
        // Exon
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1436'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as exon, exon.valueString = value, exon.code = cc('http://ncit.nci.nih.gov', 'C13231');
        };
    
        // HGVS c
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1437'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as hgvsc, hgvsc.valueString = value, hgvsc.code = cc('http://loinc.org', '48004-6');
        };

        // HGVS p
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1438'" then
        {
             values.value as value -> tgt.component = create('BackboneElement') as hgvsp, hgvsp.valueString = value, hgvsp.code = cc('http://loinc.org', '48005-3');
        };
    };
}