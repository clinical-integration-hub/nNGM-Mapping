/// version = 0.1
/// title = "nNGM: Mapping MolekularPhatologie FHIR"

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_MolekularphatologieFHIR" = nNGM_Mapping_MolekularphatologieFHIR

/* ------------------------------ Bundle ---------------------------- */
group TransformBundleMolekularpathologie(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target diagnosticSection: BackboneElement)
{
    operations -> diagnosticSection.section = create('BackboneElement') as section, section.title = 'molekularpathologie', section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'molekularpathologie') then
    {
        operations then CreateDiagnosticReportMP(operations, bundle, composition, section);
        operations then CreateOrganizationMP(operations, bundle, composition, section);
        operations then CreateObservationMP(operations, bundle, composition, section);
    };    
}

/*-----------------DiagnosticReport-----------------------*/
group CreateDiagnosticReportMP(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations.data as data, data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'assessment_id'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('DiagnosticReport') as diagnosticreport then 
        {
            operations then TransformDiagnosticReportMP(operations, diagnosticreport, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(diagnosticreport, '\'DiagnosticReport/\' + $this.id');
        };
    };
}

group TransformDiagnosticReportMP(source operations: BackboneElement, target tgt: DiagnosticReport, target composition: Composition, target section: BackboneElement) 
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/DiagnosticReport/nNGM/befund';

    // status
    operations -> tgt.status = 'final';

    // code
    operations -> tgt.code = cc('http://loinc.org', '50398-7'); 

    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'uuid_nngm_befund2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as diagnosticReport, diagnosticReport.reference = evaluate(value, '\'DiagnosticReport/\' + $this');
        };

        // Untersuchung-ID -> identifier.value
         data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            values.value as value -> tgt.identifier as identifier, 
                                     identifier.system = 'http://uk-koeln.de/NamingSystem/nNGM/befundnummer', 
                                     identifier.value = value;
        };

        // Referenzen
        // Specimen is set in Master.map
        
        // Observations CISH and FISH
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2509'" then
        {
            values.value as value -> tgt.result = create('Reference') as reference then SetReferenceToObservationCISHMP(operations, value, reference);
        };
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2510'" then
        {
            values.value as value -> tgt.result = create('Reference') as reference then SetReferenceToObservationFISHMP(operations, value, reference);
        };

        // Organization
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

/*-----------------Organization-----------------------*/
group CreateOrganizationMP(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2435'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('Organization') as organization then 
        {
            operations then TransformOrganizationMP(operations, organization, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(organization, '\'Organization/\' + $this.id');
        };
    };
}

group TransformOrganizationMP(source operations: BackboneElement, target tgt: Organization, target composition: Composition, target section: BackboneElement) 
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://clinicalsite.org/fhir/StructureDefinition/organizationalunit';

    // Access data
    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as organization, organization.reference = evaluate(value, '\'Organization/\' + $this');
        };

        //Standort --> name
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as value -> tgt.name = value;
        };
    };
}

/*-------------- Check which Observation is required ------------------*/
group CreateObservationMP(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // CISH - Check whether observation should be created
    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2509'" then
    {
        // ALK
        values.value as value where "value = 'ALK'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformALKCISHObservationMP(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
        // MET
        values.value as value where "value = 'MET'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformMETCISHObservationMP(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
        // RET
        values.value as value where "value = 'RET'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformRETCISHObservationMP(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
        // ROS1
        values.value as value where "value = 'ROS1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformROS1CISHObservationMP(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
    };

    // FISH - Check whether observation should be created
    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2510'" then
    {
        // ALK
        values.value as value where "value = 'ALK'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformALKFISHObservationMP(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
        // MET
        values.value as value where "value = 'MET'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformMETFISHObservationMP(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
        // RET
        values.value as value where "value = 'RET'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformRETFISHObservationMP(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
        // ROS1
        values.value as value where "value = 'ROS1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
        {
            operations then TransformROS1FISHObservationMP(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');        
        };
    };
}

group TransformALKCISHObservationMP(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    let ALK = 'ALK';

    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ish'; 

    // Status and Extension
    operations then TransformMPStatusAndExtension(operations, tgt);

    // Category 
    operations -> tgt.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', 'laboratory');

    // methode
    operations -> tgt.method = cc('http://ncit.nci.nih.gov', 'C23022');

    operations then MapDateOfAssessmentMP(operations, ALK, tgt);
    operations then MapCodeMP(operations, ALK, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_ish_alk'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2617'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                sop -> sopcomponent.valueString = sop;
                sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
            };
        };
    
        // Kit Bezeichnung
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2108'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2109'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2112'" then
        {
            values.value where "$this.value = 'positiv'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value where "$this.value = 'negativ'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value where "$this.value = 'nicht auswertbar'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        // Positive Tumorzellen
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2113'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueMP(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };

        // Referenzen
        // Specimen is set in Master.map

        // Organization
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

group TransformALKFISHObservationMP(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    let ALK = 'ALK';

    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fish'; 

    // Status and Extension
    operations then TransformMPStatusAndExtension(operations, tgt);

    // Category 
    operations -> tgt.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', 'laboratory');

    // methode
    operations -> tgt.method = cc('http://ncit.nci.nih.gov', 'C17563');

    operations then MapDateOfAssessmentMP(operations, ALK, tgt);
    operations then MapCodeMP(operations, ALK, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_fish_alk'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //  SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2617'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                sop -> sopcomponent.valueString = sop;
                sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
            };
        };

        //Kit Bezeichnung
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2115'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };

        //Hersteller
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2116'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        //Ergebnis
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2119'" then
        {
            values.value where "$this.value = 'positiv'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value where "$this.value = 'negativ'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value where "$this.value = 'nicht auswertbar'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Positive Tumorzellen
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2120'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueMP(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };

        //Polysomie
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2121'" then
        {
            values.value as polysomie -> tgt.component = create('BackboneElement') as polysomiecomponent then
            {
                polysomie -> polysomiecomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueMP(polysomie, quantity);
                polysomie -> polysomiecomponent.code = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };

        // Referenzen
        // Specimen is set in Master.map 

        // Organization
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

group TransformMETCISHObservationMP(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    let MET = 'MET';

    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ish'; 

    // Status and Extension
    operations then TransformMPStatusAndExtension(operations, tgt);

    // Category 
    operations -> tgt.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', 'laboratory');

    // methode
    operations -> tgt.method = cc('http://ncit.nci.nih.gov', 'C23022');

    operations then MapDateOfAssessmentMP(operations, MET, tgt);
    operations then MapCodeMP(operations, MET, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'uuid_ish_met'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2617'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                sop -> sopcomponent.valueString = sop;
                sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
            };
        };

        //Kit Bezeichnung
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2143'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };

        //Hersteller
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2144'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        //Ergebnis
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2147'" then
        {
            values.value where "$this.value = 'positiv (high-level amplification)'
                               or $this.value = 'positiv (moderate-level amplification)'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/ergebnis', ergebnis, ergebnis);
            };

            values.value where "$this.value = 'negativ'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value where "$this.value = 'nicht auswertbar'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Amplifikation
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2148'" then
        {
            values.value where "$this.value = 'Amplifikation high-level'" then 
            {
                values.value as amplifikation -> tgt.component = create('BackboneElement') as amplifikationcomponent then
                {
                    amplifikation -> amplifikationcomponent.valueCodeableConcept = cc('http://loinc.org', 'LA9193-9', 'High');

                    amplifikation -> amplifikationcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };

            values.value where "$this.value = 'Amplifikation moderate-level'" then 
            {
                values.value as amplifikation -> tgt.component = create('BackboneElement') as amplifikationcomponent then
                {
                    amplifikation -> amplifikationcomponent.valueCodeableConcept = cc('http://loinc.org', 'LA8982-6', 'Medium');

                    amplifikation -> amplifikationcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };

            values.value where "$this.value = 'keine Amplifikation'" then 
            {
                values.value as amplifikation -> tgt.component = create('BackboneElement') as amplifikationcomponent then
                {
                    amplifikation -> amplifikationcomponent.valueCodeableConcept = cc('http://loinc.org', 'LA32-8', 'No');

                    amplifikation -> amplifikationcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
        };

        // Referenzen
        // Specimen is set in Master.map

        // Organization
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

group TransformMETFISHObservationMP(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    let MET = 'MET';

    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fish'; 

    // Status and Extension
    operations then TransformMPStatusAndExtension(operations, tgt);

    // Category 
    operations -> tgt.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', 'laboratory');

    // methode
    operations -> tgt.method = cc('http://ncit.nci.nih.gov', 'C17563');

    operations then MapDateOfAssessmentMP(operations, MET, tgt);
    operations then MapCodeMP(operations, MET, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'uuid_fish_met'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2617'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                sop -> sopcomponent.valueString = sop;
                sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
            };
        };

        //Kit Bezeichnung
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2150'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };

        //Hersteller
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2151'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        //Ergebnis
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2154'" then
        {
            values.value where "$this.value = 'positiv'" then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value where "$this.value = 'negativ'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value where "$this.value = 'nicht auswertbar'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Amplifikation
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2155'" then
        {
            values.value where "$this.value = 'Amplifikation high-level'" then 
                {
                    values.value as amplifikation -> tgt.component = create('BackboneElement') as amplifikationcomponent then
                    {
                        amplifikation -> amplifikationcomponent.valueCodeableConcept = cc('http://loinc.org', 'LA9193-9', 'High');

                        amplifikation -> amplifikationcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                    };
                };

            values.value where "$this.value = 'Amplifikation intermediate-level'" then 
            {
                values.value as amplifikation -> tgt.component = create('BackboneElement') as amplifikationcomponent then
                {
                    amplifikation -> amplifikationcomponent.valueCodeableConcept = cc('http://loinc.org', 'LA8982-6', 'Medium');

                    amplifikation -> amplifikationcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };

            values.value where "$this.value = 'negativ'" then 
            {
                values.value as amplifikation -> tgt.component = create('BackboneElement') as amplifikationcomponent then
                {
                    amplifikation -> amplifikationcomponent.valueCodeableConcept = cc('http://loinc.org', 'LA32-8', 'No');

                    amplifikation -> amplifikationcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };

            values.value where "$this.value = 'Amplifikation low-level'" then 
            {
                values.value as amplifikation -> tgt.component = create('BackboneElement') as amplifikationcomponent then
                {
                    amplifikation -> amplifikationcomponent.valueCodeableConcept = cc('http://loinc.org', 'LA9194-7', 'Low');

                    amplifikation -> amplifikationcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };

            values.value where "$this.value = 'nicht auswertbar'" then 
            {
                values.value as amplifikation -> tgt.component = create('BackboneElement') as amplifikationcomponent then
                {
                    amplifikation -> amplifikationcomponent.valueCodeableConcept = cc('http://loinc.org', 'LA11884-6', 'Indeterminate');

                    amplifikation -> amplifikationcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
        };


        //15 MET Signal
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2156'" then
        {
            values.value as met15signal -> tgt.component = create('BackboneElement') as met15signalcomponent then
            {
                met15signal -> met15signalcomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueMP(met15signal, quantity);
                met15signal -> met15signalcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', '15-met-ratio');
            };
        };

        //5 MET Signal
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2157'" then
        {
            values.value as met5signal -> tgt.component = create('BackboneElement') as met5signalcomponent then
            {
                met5signal -> met5signalcomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueMP(met5signal, quantity);
                met5signal -> met5signalcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', '5-met-ratio');
            };
        };

        //4 MET Signal
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2158'" then
        {
            values.value as met4signal -> tgt.component = create('BackboneElement') as met4signalcomponent then
            {
                met4signal -> met4signalcomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueMP(met4signal, quantity);
                met4signal -> met4signalcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', '4-met-ratio');
            };
        };

        //gezaehlte Tumorzellen
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2159'" then
        {
            values.value as tumorzellen -> tgt.component = create('BackboneElement') as gezaeltetumorzellencomponent then
            {
                tumorzellen -> gezaeltetumorzellencomponent.valueInteger = tumorzellen;
                tumorzellen -> gezaeltetumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C0007584');
            };
        };

        //MET signale
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2160'" then
        {
            values.value as metsignale -> tgt.component = create('BackboneElement') as metsignalecomponent then
            {
                metsignale -> metsignalecomponent.valueInteger = metsignale;
                metsignale -> metsignalecomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'met-signal-count');
            };
        };

        //CEN signale
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2161'" then
        {
            values.value as censignale -> tgt.component = create('BackboneElement') as censignalecomponent then
            {
                censignale -> censignalecomponent.valueInteger = censignale;
                censignale -> censignalecomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'cet-signal-count');
            };
        };

        //Quotient MET/CEN signale
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2162'" then
        {
            values.value as qmetcensignale -> tgt.component = create('BackboneElement') as qmetcensignalecomponent then
            {
                qmetcensignale -> qmetcensignalecomponent.valueInteger = qmetcensignale;
                qmetcensignale -> qmetcensignalecomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'met-cen-signal-ratio');
            };
        };

        //Durchschnitt MET-Genkopiezahl/Zelle 
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2163'" then
        {
            values.value as genkopiezahl -> tgt.component = create('BackboneElement') as genkopiezahlcomponent then
            {
                genkopiezahl -> genkopiezahlcomponent.valueInteger = genkopiezahl;
                genkopiezahl -> genkopiezahlcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'met-copy-per-cell');
            };
        };

        //Polysomie
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2164'" then
        {
            values.value as polysomie -> tgt.component = create('BackboneElement') as polysomiecomponent then
            {
                polysomie -> polysomiecomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueMP(polysomie, quantity);
                polysomie -> polysomiecomponent.code = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };
    
        // Referenzen
        // Specimen is set in Master.map 

        // Organization
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

group TransformRETCISHObservationMP(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    let RET = 'RET';

    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ish'; 

    // Status and Extension
    operations then TransformMPStatusAndExtension(operations, tgt);

    // Category 
    operations -> tgt.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', 'laboratory');

    // methode
    operations -> tgt.method = cc('http://ncit.nci.nih.gov', 'C23022');

    operations then MapDateOfAssessmentMP(operations, RET, tgt);
    operations then MapCodeMP(operations, RET, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_ish_ret'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2617'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                sop -> sopcomponent.valueString = sop;
                sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
            };
        };

        //Kit Bezeichnung
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2187'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };

        //Hersteller
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2188'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        //Ergebnis
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2191'" then
        {
            values.value where "$this.value = 'positiv'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value where "$this.value = 'negativ'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value where "$this.value = 'nicht auswertbar'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Positive Tumorzellen
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2192'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueMP(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };

        // Referenzen
        // Specimen is set in Master.map

        // Organization
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

group TransformRETFISHObservationMP(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    let RET = 'RET';

    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fish'; 

    // Status and Extension
    operations then TransformMPStatusAndExtension(operations, tgt);

    // Category 
    operations -> tgt.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', 'laboratory');

    // methode
    operations -> tgt.method = cc('http://ncit.nci.nih.gov', 'C17563');

    operations then MapDateOfAssessmentMP(operations, RET, tgt);
    operations then MapCodeMP(operations, RET, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_fish_ret'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2617'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                sop -> sopcomponent.valueString = sop;
                sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
            };
        };

        //Kit Bezeichnung
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2194'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };

        //Hersteller
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2195'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        //Ergebnis
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2198'" then
        {
            values.value where "$this.value = 'positiv'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value where "$this.value = 'negativ'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value where "$this.value = 'nicht auswertbar'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Positive Tumorzellen
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2199'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueMP(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };

        //Polysomie
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2200'" then
        {
            values.value as polysomie -> tgt.component = create('BackboneElement') as polysomiecomponent then
            {
                polysomie -> polysomiecomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueMP(polysomie, quantity);
                polysomie -> polysomiecomponent.code = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };

        // Referenzen
        // Specimen is set in Master.map

        // Organization
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

group TransformROS1CISHObservationMP(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    let ROS1 = 'ROS1';

    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ish'; 

    // Status and Extension
    operations then TransformMPStatusAndExtension(operations, tgt);

    // Category 
    operations -> tgt.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', 'laboratory');

    // methode
    operations -> tgt.method = cc('http://ncit.nci.nih.gov', 'C23022');

    operations then MapDateOfAssessmentMP(operations, ROS1, tgt);
    operations then MapCodeMP(operations, ROS1, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_ish_ros1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2617'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                sop -> sopcomponent.valueString = sop;
                sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
            };
        };

        //Kit Bezeichnung
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2221'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };

        //Hersteller
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2222'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        //Ergebnis
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2225'" then
        {
            values.value where "$this.value = 'positiv'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value where "$this.value = 'negativ'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value where "$this.value = 'nicht auswertbar'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Positive Tumorzellen
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2226'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueMP(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };

        //Polysomie
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2227'" then
        {
            values.value as polysomie -> tgt.component = create('BackboneElement') as polysomiecomponent then
            {
                polysomie -> polysomiecomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueMP(polysomie, quantity);
                polysomie -> polysomiecomponent.code = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };
       
        // Referenzen
        // Specimen is set in Master.map 

        // Organization
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

group TransformROS1FISHObservationMP(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    let ROS1 = 'ROS1';

    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fish'; 

    // Status and Extension
    operations then TransformMPStatusAndExtension(operations, tgt);

    // Category 
    operations -> tgt.category = cc('http://terminology.hl7.org/CodeSystem/observation-category', 'laboratory');

    // methode
    operations -> tgt.method = cc('http://ncit.nci.nih.gov', 'C17563');

    operations then MapDateOfAssessmentMP(operations, ROS1, tgt);
    operations then MapCodeMP(operations, ROS1, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_fish_ros1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };
        
        //SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2617'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as sopcomponent then
            {
                sop -> sopcomponent.valueString = sop;
                sop -> sopcomponent.code = cc('http://ncit.nci.nih.gov', 'C48443');
            };
        };

        //Kit Bezeichnung
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2229'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };

        //Hersteller
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2230'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        //Ergebnis
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2233'" then
        {
            values.value where "$this.value = 'positiv'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
            };

            values.value where "$this.value = 'negativ'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
            };

            values.value where "$this.value = 'nicht auswertbar'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
            };
        };

        //Positive Tumorzellen
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2234'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueMP(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };

        //Polysomie
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2235'" then
        {
            values.value as polysomie -> tgt.component = create('BackboneElement') as polysomiecomponent then
            {
                polysomie -> polysomiecomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValueMP(polysomie, quantity);
                polysomie -> polysomiecomponent.code = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };

        // Referenzen
        // Specimen is set in Master.map

        // Organization
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

/*---------------------------------------------------------------*/
/*------------------Functionality--------------------------------*/
/*---------------------------------------------------------------*/

group TransformMPStatusAndExtension(source operations: BackboneElement, target tgt: Observation)
{
    // Durchführung
    operations.data as data, data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2520'" then
    {
        values.value as value where "$this.value = 'in Bearbeitung'" then 
        {
            value -> tgt.status = 'registered';
        };
        values.value as value where "$this.value = 'abgeschlossen'" then 
        {
            value -> tgt.status = 'final';
        };
    };
    
    // Abschluss
    operations.data as data, data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2462'" then
    {
        values.value as value, value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as statusExtension then
        {
            value -> statusExtension.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/NNGM/statusAbschluss',value, value);
            value -> statusExtension.url = 'status';
        };
    };

    // Datum des Abschlusses
    operations.data as data, data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2521'" then
    {
        values.value as value, value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as datumExtension then
        {
            value -> datumExtension.valueDate = dateOp(value, 'date');
            value -> datumExtension.url = 'datum';
        };
    };
}

group MapDateOfAssessmentMP(source operations: BackboneElement, source name: string, target tgt: Observation)
{
    // Date of Assesment
    // choose start time based on type (passed as name)
    name where "%name = 'ALK'" then 
    {
        operations.data as data, data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2098'" then
        {
            values.value as dateOfAssessment -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(dateOfAssessment, 'dateTime');
        };
    };
    name where "%name = 'MET'" then 
    {
        operations.data as data, data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2132'" then
        {
            values.value as dateOfAssessment -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(dateOfAssessment, 'dateTime');
        };
    };
    name where "%name = 'RET'" then 
    {
        operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2183'" then
        {
            values.value as dateOfAssessment -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(dateOfAssessment, 'dateTime');
        };
    };
    name where "%name = 'ROS1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2211'" then
        {
            values.value as dateOfAssessment -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(dateOfAssessment, 'dateTime');
        };
    };
    
    // end time is the same for every type
    operations.data as data, data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2521'" then
    {
        values.value as dateOfAssessment -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(dateOfAssessment, 'dateTime');
    };
}

group MapPercentageValueMP(source src: string, target tgt: Quantity)
{
    src -> tgt.value = src,
            tgt.system = 'http://unitsofmeasure.org',
            tgt.unit = '%',
            tgt.code = '%';
}

//Phaenotypes
group MapALKPhaenotypMP(source operations: BackboneElement, target tgt: Observation)
{
    //Phänotype
    operations.data as data, data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2099'" then
    {
        values.value as phaenotyp -> tgt.component = create('BackboneElement') as phaenotypcomponent then
        {
            values.value as phaenotyp where "value = 'Expression'" then
            {
                phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                };
            };

            values.value as phaenotyp where "value = 'Fusion'" then
            {
                phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                };
            };

            values.value as phaenotyp where "value = 'Amplifikation'" then
            {
                phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                };
            };
        };
    };
}

group MMapMETPhaenotypMP(source operations: BackboneElement, target tgt: Observation)
{
    //Phänotype
    operations.data as data, data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2133'" then
    {
        values.value as phaenotyp -> tgt.component = create('BackboneElement') as phaenotypcomponent then
        {
            values.value as phaenotyp where "value = 'Expression'" then
            {
                phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                };
            };

            values.value as phaenotyp where "value = 'Fusion'" then
            {
                phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                };
            };

            values.value as phaenotyp where "value = 'Amplifikation'" then
            {
                phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                };
            };
        };
    };
}

group MapRETPhaenotypMP(source operations: BackboneElement, target tgt: Observation)
{
    //Phänotype
    operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2184'" then
    {
        values.value as phaenotyp -> tgt.component = create('BackboneElement') as phaenotypcomponent then
        {
            values.value as phaenotyp where "value = 'Expression'" then
            {
                phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                };
            };

            values.value as phaenotyp where "value = 'Fusion'" then
            {
                phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                };
            };

            values.value as phaenotyp where "value = 'Amplifikation'" then
            {
                phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                };
            };
        };
    };
}

group MapROS1PhaenotypMP(source operations: BackboneElement, target tgt: Observation)
{
    //Phänotype
    operations.data as data, data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2212'" then
    {
        values.value as phaenotyp -> tgt.component = create('BackboneElement') as phaenotypcomponent then
        {
            values.value as phaenotyp where "value = 'Expression'" then
            {
                phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                };
            };

            values.value as phaenotyp where "value = 'Fusion'" then
            {
                phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                };
            };

            values.value as phaenotyp where "value = 'Amplifikation'" then
            {
                phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                };
            };
        };
    };
}


//Codes
group MapCodeMP(source operations: BackboneElement, source name: string, target tgt: Observation)
{
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', name);
}

// Reference
group SetReferenceToObservationCISHMP(source operations: BackboneElement, source name: string, target tgt: Reference)
{
    // Check which CISH observation should be referenced
    name where "%name = 'ALK'" then 
    {
        operations.data as data, data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_ish_alk'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'MET'" then 
    {
        operations.data as data, data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'uuid_ish_met'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    }; 
    name where "%name = 'RET'" then 
    {
        operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_ish_ret'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    }; 
    name where "%name = 'ROS1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_ish_ros1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    }; 
}

group SetReferenceToObservationFISHMP(source operations: BackboneElement, source name: string, target tgt: Reference)
{
    // Check which FISH observation should be referenced
    name where "%name = 'ALK'" then 
    {
        operations.data as data, data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_fish_alk'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'MET'" then 
    {
        operations.data as data, data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'uuid_fish_met'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    }; 
    name where "%name = 'RET'" then 
    {
        operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_fish_ret'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    }; 
    name where "%name = 'ROS1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_fish_ros1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
}
