/// version = 0.1
/// title = "Beurteilung"

/* 
TODO
    - repeatindex is off by +1
*/

map "http://uk-koeln.de/fhir/StructureMap/nnGM_Mapping_BeurteilungFHIR" = BeurteilungFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" as target
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" as target

group TransformBundleBeurteilung(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target index: RepeatIndex)
{
    operations -> composition.section = create('BackboneElement') as section, section.title = 'beurteilung', section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'beurteilung') then
    {
        // there may be more than 1 instance of DiagnosticReport, thus an index is needed to reference (and create) the correct resource
        operations then CreateDiagnosticReportBeurteilung(operations, bundle, composition, section, index);
        operations then CreateServiceRequestBeurteilung(operations, bundle, composition, section, index);
    };
}

/* ------------------------------DiagnosticReport---------------------------- */
group CreateDiagnosticReportBeurteilung(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    // since there can be more than 1 instance of the Beurteilung section we need an index to assign the corresponding data to each DiagnosticReport
    operations then InitSectionIndex(operations, index); // (re)set index to 0

    operations.data as data, data.values as values where "repeatindex = %index.sectionIndex and (blockindex = 0 and groupindex = 0 and itemid = 'id_1352'
                                                                                                or blockindex = 0 and groupindex = 0 and itemid ='bu_creation_date'
                                                                                                or blockindex = 0 and groupindex = 0 and itemid ='bu_vesion'
                                                                                                or blockindex = 0 and groupindex = 0 and itemid ='id_2405')" then
    {
        operations -> bundle.entry as entry, entry.resource = create('DiagnosticReport') as diagnosticreport then
        {
            operations then TransformDiagnosticReportBeurteilung(operations, diagnosticreport, composition, section, index);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(diagnosticreport, '\'DiagnosticReport/\' + $this.id');
        };
        operations then IncrementSectionIndex(operations, index);
    };
}

group TransformDiagnosticReportBeurteilung(source operations: BackboneElement, target tgt: DiagnosticReport, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/DiagnosticReport/nNGM/beurteilung';

    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Code
    operations -> tgt.code = cc('http://ncit.nci.nih.gov', 'C125009');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 0 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_nngm_beurteilung'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as diagnosticReport, diagnosticReport.reference = evaluate(value, '\'DiagnosticReport/\' + $this');
        };

        // Erstelldatum
        data.values as values where "blockindex = 0 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'bu_creation_date'" then
        {
        values.value as date -> tgt.effectiveDateTime = dateOp(date, 'dateTime');
        };

		// Status
        data.values as values where "blockindex = 0 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'bu_version'" then
        {   
            values.value as value where "$this.value = 'final'" then 
            {
                value -> tgt.status = 'final';
            };
            values.value as value where "$this.value = 'vorl\u00e4ufig'" then 
            {
                value -> tgt.status = 'preliminary';
            };
        };   

        // Klinische Information 
        data.values as values where "blockindex = 0 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_1352'" then
        {  
            values.value as value -> tgt.conclusion = value;
        };

        // Empfehlung einer systemischen Therapie
        data.values as values where "blockindex = 0 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_2405'" then
        {   
            values.value as signature where "$this.value = 'Ja'" then
            {
                values.value as value -> tgt.conclusionCode as conclusioncode,
                                        conclusioncode.extension as empfehlung,
                                        empfehlung.url = 'http://uk-koeln.de/fhir/Extension/nNGM/beurteilung-empfehlung-systemische-therapie', 
                                        empfehlung.valueBoolean = true;
            };

            values.value as signature where "$this.value = 'Nein'" then
            {
                values.value as value -> tgt.conclusionCode as conclusioncode,
                                        conclusioncode.extension as empfehlung,
                                        empfehlung.url = 'http://uk-koeln.de/fhir/Extension/nNGM/beurteilung-empfehlung-systemische-therapie', 
                                        empfehlung.valueBoolean = false;
            };
        }; 
    };
}

/* -------------------------------------- Service Request -------------------------------------------- */
group CreateServiceRequestBeurteilung(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    let resourceIsCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceIsCreated);

    operations.data as data, data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2523'
                                                        or blockindex = 1 and groupindex = 0 and itemid ='bu_closing'
                                                        or blockindex = 1 and groupindex = 0 and itemid ='id_2524' 
                                                        or blockindex = 1 and groupindex = 0 and itemid ='id_2525'" then
    {
        // if resource is not created yet: call transform
        operations where "%resourceIsCreated.valueBoolean = false" -> bundle.entry as entry, entry.resource = create('ServiceRequest') as serviceRequest then 
        {
            operations then TransformServiceRequestBeurteilung(operations, serviceRequest, composition, section, index);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(serviceRequest, '\'ServiceRequest/\' + $this.id');
            operations then SetBooleanToTrue(operations, resourceIsCreated);
        };
    };
}

group TransformServiceRequestBeurteilung(source operations: BackboneElement, target tgt: ServiceRequest, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    // since there can be more than 1 instance of the Beurteilung section we need an index to assign the corresponding data to each DiagnosticReport
    operations then InitSectionIndex(operations, index); // (re)set index to 0

    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/ServiceRequest/nNGM/beurteilung';

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');
    
    // Intent
    operations -> tgt.intent = cast('proposal', ' FHIR.code'); 

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_testung3'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as serviceRequest, serviceRequest.reference = evaluate(value, '\'ServiceRequest/\' + $this');
        };

        //Status der Untersuchungen
        //Durchfuehrung
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2523'" then
        {
            values.value as value where "$this.value = 'in Bearbeitung'" then 
            {
                value -> tgt.status = 'active';
            };
            values.value as value where "$this.value = 'abgeschlossen'" then 
            {
                value -> tgt.status = 'completed';
            };
        };

        // Referenzen
        // DiagnosticReports
        data.values as values where "blockindex = 0 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_nngm_beurteilung'" then
        {
            values.value as value -> tgt.reasonReference = create('Reference') as diagnosticReport, diagnosticReport.reference = evaluate(value, '\'DiagnosticReport/\' + $this');
            operations then IncrementSectionIndex(operations, index);
        };
    };

    // Extensions
    operations then TransformBeurteilungStatusExtension(operations, tgt);
}

group TransformBeurteilungStatusExtension(source operations: BackboneElement, target tgt: ServiceRequest)
{
    operations.data as data then
    {
        // Status des Abschlusses - if not other
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'bu_closing' and values.where(isother = true).exists().not()" then
        {
            values.value as value where "%tgt.status.extension.extension.where(url = 'status').exists().not()" then
            {
                value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/ServiceRequest/statusAbschluss', statusAbschluss.extension as statusExtension then
                {
                    value -> statusExtension.url = 'status';
                    value -> statusExtension.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/NNGM/statusAbschluss',value, value);
                };
            };
        };

        // Status des Abschlusses - if other
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'bu_closing' and values.where(isother = true).exists()" then
        {
            values.value as value where "%tgt.status.extension.extension.where(url = 'status').exists().not() and isother.exists().not()" then
            {
                value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/ServiceRequest/statusAbschluss', statusAbschluss.extension as statusExtension then
                {
                    value -> statusExtension.url = 'status';
                    value -> statusExtension.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C17649', 'Other') as vcc, vcc.text = evaluate(data, '$this.where(blockindex = 1 and groupindex = 0 and itemid = \'bu_closing\').values.where(isother = true).value');
                };
            };
        };

        //Datum des Abschlusses
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2524'" then
        {
            values.value as value where "%tgt.status.extension.extension.where(url = 'datum').exists().not()" then
            {
                value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/ServiceRequest/statusAbschluss', statusAbschluss.extension as datumExtension then
                {
                    value -> datumExtension.valueDate = dateOp(value, 'date');
                    value -> datumExtension.url = 'datum';
                };
            };
        };

        /*---------------Datum des Versands -----------*/
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2525'" then
        {   
            values.value as datumversands -> tgt.extension as datumVersands,
                                              datumVersands.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/versandDatum',
                                              datumVersands.valueDate = dateOp(datumversands, 'dateTime');
        };
    };
}