/// version = 0.1
/// title = "TNMMap"
/// CDS -> FHIR

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_TNMFHIR" = nNGM_Mapping_TNMFHIR

uses "http://hl7.org/fhir/StructureDefinition/BackboneElement" as source
uses "http://hl7.org/fhir/StructureDefinition/Specimen" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target

/*
    TODO
    - creation of specimen is currently commented out (with uuid_specimen_nngm3)
    - same for biopsy-Id
*/

 /* ------------------------------ Bundle ---------------------------- */
group TransformBundleTNM(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target biopsieSection: BackboneElement)
{
    operations -> biopsieSection.section = create('BackboneElement') as section, section.title = 'tnm', section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'tnm') then
    {
        operations then CreateObservationTNM(operations, bundle, composition, section);
        // operations then CreateSpecimenTNM(operations, bundle, composition, section);
    };   
}

/* ------------------------------ Check whether specimen needs to be created ---------------------------- */ 
group CreateSpecimenTNM(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement) 
{
    // Check whether specimen needs to be created and create it if that is the case
    operations.data as data, data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1601'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('Specimen') as specimen then 
        {
            operations then TransformSpecimenTNM(operations, specimen, composition, section); 
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(specimen, '\'Specimen/\' + $this.id');
        };
    };
}

/* ------------------------------ Specimen ---------------------------- */ 
group TransformSpecimenTNM(source operations: BackboneElement, target tgt: Specimen, target composition: Composition, target section: BackboneElement) 
{ 
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Specimen/nNGM';

    // Type
    operations -> tgt.type as type, type.coding as snomedGlobalPatientSet, snomedGlobalPatientSet.system = 'http://snomed.info/sct',
                                                                    snomedGlobalPatientSet.version = 'http://snomed.info/sct/900000000000207008',
                                                                    snomedGlobalPatientSet.code = 'UNKNOWN';
 
    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');
    
    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        };

        // // Biopsienummer -> tgt.identifier.value 
        // data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_1601'" then 
        // { 
        //     values.value as value -> tgt.identifier = id('http://uk-koeln.de/NamingSystem/nNGM/biopsienummer', value); 
        // };
    };  
}

/* ------------------------------ Check whether the TNM observation needs to be created ---------------------------- */ 
group CreateObservationTNM(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement) 
{
    // Check whether observation should be created
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);

    operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1300'
                                    or blockindex = 0 and groupindex = 0 and itemid = 'id_1385'
                                    or blockindex = 0 and groupindex = 0 and itemid = 'id_2492'
                                    or blockindex = 1 and groupindex = 0 and itemid = 'id_1378'
                                    or blockindex = 1 and groupindex = 0 and itemid = 'id_1379'
                                    or blockindex = 1 and groupindex = 0 and itemid = 'id_1380'
                                    or blockindex = 1 and groupindex = 0 and itemid = 'id_2493'
                                    or blockindex = 1 and groupindex = 0 and itemid = 'id_2495'
                                    or blockindex = 1 and groupindex = 0 and itemid = 'id_2497'
                                    or blockindex = 1 and groupindex = 1 and itemid = 'id_2498'
                                    or blockindex = 2 and groupindex = 0 and itemid = 'id_1383'" then
    {
        operations then SetBooleanToTrue(operations, resourceShouldBeCreated);
    };

    // Create resource if bool set to true
    operations where "%resourceShouldBeCreated.valueBoolean = true" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
    {
        operations then TransformObservationTNM(operations, observation, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');
    };
}

 /* ------------------------------ Observation ---------------------------- */
group TransformObservationTNM(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/tumorstadium';
    operations -> tgt.status = 'final';
    operations -> tgt.category = cc('http://hl7.org/fhir/observation-category', 'survey');
    
    //data absent because not delivered from form but mandatory in profile
    operations -> tgt.code as topLevelCode, topLevelCode.coding as coding, coding.system = 'http://loinc.org', coding.code as code, code.extension as dataAbsentReason, dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_tumorstadium'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Angaben zum Tumorstadium
        // Erstdiagnose -> extension tnmerstdiagnose
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1300'" then
        {
            values.value as erstdiagnose where "$this.value = 'yes'" then
            {
                values.value as value -> tgt.extension as angaben, 
                angaben.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nngm/tnm-erstdiagnose',
                angaben.valueBoolean = cast(true, 'FHIR.boolean');
            };

            values.value as erstdiagnose where "$this.value = 'no'" then
            {
                values.value as value -> tgt.extension as angaben, 
                angaben.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nngm/tnm-erstdiagnose',
                angaben.valueBoolean = cast(false, 'FHIR.boolean');
            };
        };

        // Kurativ-operabel -> extension kurativoperabel
         data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1385'" then
        {
            values.value as erstdiagnose where "$this.value = 'yes'" then
            {
                values.value as value -> tgt.extension as angaben, 
                angaben.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nngm/tnm-kurativ-operabel',
                angaben.valueBoolean = cast(true, 'FHIR.boolean');
            };

            values.value as erstdiagnose where "$this.value = 'no'" then
            {
                values.value as value -> tgt.extension as angaben, 
                angaben.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nngm/tnm-kurativ-operabel',
                angaben.valueBoolean = cast(false, 'FHIR.boolean');
            };
        };

        // Stadium nach union internationale contre le cancer (UICC)
        // UICC-Stadium
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_1383'" -> tgt.valueCodeableConcept = create('CodeableConcept') as valueCodeableConcept, valueCodeableConcept.coding as coding then
        {
            values.value as value -> coding.system = 'urn:oid:2.16.840.1.113883.15.16', coding.code = value;

            // TNM-Klassifikation -> valueCodeableConcept.coding.version
            operations.data as data, data.values as valuesTwo where "blockindex = 0 and groupindex = 0 and itemid = 'id_2492'" then
            {
                valuesTwo.value as version -> coding.version = version;
            };
        };
        
        // Date of assessment -> effectiveDateTime
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1378'" then
        {
           values.value as value -> tgt.effectiveDateTime = dateOp(value, 'date');
        };

        // Prafix
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1379'" then
        {
            values.value as value where "value = 'r - Rezidiv'" then
            {
              value -> tgt.component = create('BackboneElement') as r,
              r.code =  cc('http://loinc.org', '21983-2'),
              r.valueBoolean = cast(true, 'FHIR.boolean');
            };
            values.value as value where "value ='y - Zustand nach Therapie'" then
            {
              value -> tgt.component = create('BackboneElement') as y,
              y.code =  cc('http://loinc.org', '59479-6'),
              y.valueBoolean = cast(true, 'FHIR.boolean');
            };
        };
        
        // Tumor (T)
        // Groesse und Ausdehnung des Tumors
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1380'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as T then
            {
                operations -> T.code =  cc('http://loinc.org', '21905-5'),
                       T.valueCodeableConcept as vcc,
                                                vcc.text = 'T slice',
                                                vcc.coding = c('urn:oid:2.16.840.1.113883.15.16', value);
                    
                operations.data as data then
                {
                    data.values as valuesprafix where "blockindex = 1 and groupindex = 0 and itemid = 'id_2493'" then
                    {   
                        valuesprafix.value as value then{
                            operations -> T.extension as praefixcpu,
                            praefixcpu.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nngm/tnm-praefix-cpu',
                            
                            //Create the coding so you can add slice info in text field
                            praefixcpu.valueCodeableConcept as vcc,
                            vcc.text = 'T-praefix slice',
                            vcc.coding = c('urn:oid:2.16.840.1.113883.15.16',value);
                        };
                    };
                };
                
                operations.data as data then
                {
                    data.values as valuessuffix where "blockindex = 1 and groupindex = 0 and itemid = 'id_2495'" then
                    {   
                        valuessuffix.value as value then{
                            operations -> T.extension as suffixmiscy,
                            suffixmiscy.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nngm/tnm-suffix-miscy',
                            suffixmiscy.valueCodeableConcept as vcc,
                            vcc.text = 'T-suffix slice',
                            vcc.coding = c('urn:oid:2.16.840.1.113883.15.16',value);
                        };
                    };
                };
            };  
        };

        // Lymphknoten (N)
        // Groesse und Ausdehnung des Tumors 
         data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1381'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as N then
            {
                operations -> N.code =  cc('http://loinc.org', '21906-3');

                //add value valueCodeableConcept   
                value as Nclass -> N.valueCodeableConcept as vcc,
                                    vcc.text = 'N slice',
                                    vcc.coding = c('urn:oid:2.16.840.1.113883.15.16', Nclass);
                
                operations.data as data then
                {
                    data.values as valuesprafix where "blockindex = 1 and groupindex = 0 and itemid = 'id_2497'" then
                    {   
                        valuesprafix.value as value then
                        {
                            operations -> N.extension as praefixcpu,
                            praefixcpu.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nngm/tnm-praefix-cpu',

                            //Create the coding so you can add slice info in text field
                            praefixcpu.valueCodeableConcept as vcc,
                            vcc.coding = c('urn:oid:2.16.840.1.113883.15.16' , value),
                            vcc.text = 'N-praefix slice';
                        };
                    };
                };
            };
        };

        // Metastasen(M)
        // Abwesenheit oder Vorhandensein von Metastasen
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1382'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as M then
            {
                operations -> M.code =  cc('http://loinc.org', '21907-1');

                // Add value valueCodeableConcept   
                value as Mclass -> M.valueCodeableConcept as vcc,
                                    vcc.text = 'M slice',
                                    vcc.coding = c('urn:oid:2.16.840.1.113883.15.16', Mclass);
                
                operations.data as data then
                {
                    data.values as valuesprafix where "blockindex = 1 and groupindex = 0 and itemid = 'id_2498'" then
                    {   
                        valuesprafix.value as value then
                        {
                            operations -> M.extension as praefixcpu,
                            praefixcpu.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nngm/tnm-praefix-cpu',

                            // Create the coding so you can add slice info in text field
                            praefixcpu.valueCodeableConcept as vcc,
                            vcc.coding = c('urn:oid:2.16.840.1.113883.15.16' , value),
                            vcc.text = 'M-praefix slice';
                        };
                    };
                };
            };
        };
    };
}