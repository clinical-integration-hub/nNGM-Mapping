/// version = 0.1
/// title = "nNGM_Mapping_LiquidBiopsyFHIR"
/*
TODO
    - repeatindex is off by +1
*/

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_LiquidBiopsyFHIR" = nNGM_Mapping_LiquidBiopsyFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" as target
uses "http://hl7.org/fhir/StructureDefinition/Organization" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target

group TransformBundleLiquidBiopsy(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    operations then CreateOrganizationLiquidBiopsy(operations, bundle, composition, section);

    // there may be more than 1 instance of Observation, thus an index is needed to reference (and create) the correct observation
    operations then CreateDiagnosticReportLiquidBiopsy(operations, bundle, composition, section, index);
    operations then CreateObservationLiquidBiopsy(operations, bundle, composition, section, index);
}

/* ------------------------- DiagnosticReport ------------------------- */
group CreateDiagnosticReportLiquidBiopsy(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    operations.data as data, data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('DiagnosticReport') as diagnosticreport then 
        {
            operations then TransformDiagnosticReportLiquidBiopsy(operations, diagnosticreport, composition, section, index);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(diagnosticreport, '\'DiagnosticReport/\' + $this.id');
        };
    }; 
}

/* ------------------------- DiagnosticReport ------------------------- */
group TransformDiagnosticReportLiquidBiopsy(source operations: BackboneElement, target tgt: DiagnosticReport, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    // since there can be more than 1 instance of the biopsy section we need an index to assign the corresponding data to each observation
    operations then InitSectionIndex(operations, index); // (re)set index to 0

    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/DiagnosticReport/nNGM/befund';

    // status
    operations -> tgt.status = 'final';

    // code
    operations -> tgt.code = cc('http://loinc.org', '50398-7'); 
    
    // Subject 
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_befund2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as diagnosticReport, diagnosticReport.reference = evaluate(value, '\'DiagnosticReport/\' + $this');
        };

        // Untersuchungs-ID
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            values.value as id -> tgt.identifier = create('Identifier') as befundNummer,
                                                          befundNummer.system = 'http://uk-koeln.de/NamingSystem/nNGM/befundnummer',
                                                          befundNummer.value  = id;
        };
        
        // Referenzen
        // Specimen is set in Master.map

        // Observations
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_liquidBiopsy'" then
        {
            values.value as value -> tgt.result = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
            operations then IncrementSectionIndex(operations, index);   
        };

        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

/* -------------------------- Organization ---------------------------- */
group CreateOrganizationLiquidBiopsy(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('Organization') as organization then 
        {
            operations then TransformOrganizationLiquidBiopsy(operations, organization, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(organization, '\'Organization/\' + $this.id');
        };
    };
}

/* -------------------------- Organization ---------------------------- */
group TransformOrganizationLiquidBiopsy(source operations: BackboneElement, target tgt: Organization, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://clinicalsite.org/fhir/StructureDefinition/organizationalunit';

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as organization, organization.reference = evaluate(value, '\'Organization/\' + $this');
        };

        /* ------------------------------ Netzwerkzentrum ---------------------------- */
        // Standort
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {   
            values.value as name -> tgt.name = name;
        };
    };
}

/* ---------------------------- Observation --------------------------- */
group CreateObservationLiquidBiopsy(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    // since there can be more than 1 instance of the biopsy section we need an index to assign the corresponding data to each observation
    operations then InitSectionIndex(operations, index); // (re)set index to 0

    operations.data as data, data.values as values where "repeatindex = %index.sectionIndex and (blockindex = 4 and groupindex = 0 and itemid = 'id_2528'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid = 'id_1929'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid = 'id_1928'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid = 'id_1931'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid = 'lb_referencetranscript_5_end_gene'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid = 'lb_3_end_gene'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid = 'lb_exon_3_end_gen'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid = 'lb_referencetranscript_3_end_gen'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid = 'id_1930'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid = 'id_1932')" then
    {
        operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationLiquidBiopsy(operations, observation, composition, section, index);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');
        };
        operations then IncrementSectionIndex(operations, index);
    };
}

/* ---------------------------- Observation --------------------------- */
group TransformObservationLiquidBiopsy(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/liquid-biopsy';

    // Status and Extension
    operations then TransformLiquidBiopsyStatusAndExtension(operations, tgt);

    //FISH category
    operations -> tgt.category as category then
    {
        operations -> category.coding = create ('Coding') as coding, coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
                                                                       coding.code = 'laboratory';                                                    
    };

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');
    
    // Code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'Liquid Biopsy');

    // Method
    operations -> tgt.method = cc('http://ncit.nci.nih.gov','C101293');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_liquidBiopsy'" then
        {
            values.value as value where "unit.exists().not()" then // to not use the unit = _research uuid value element
            {
                values.value as value -> tgt.id = value;
                values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
       
            };
        };

        /* ------------------------------ Netzwerkzentrum ---------------------------- */
        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2614'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as componentSop then
            {
                sop -> componentSop.valueString = sop;
                sop -> componentSop.code = cc('http://ncit.nci.nih.gov', 'C48443');
            };
        };

        /* --------------------------------- METHODIK ------------------------------ */
        //Assay -> assay
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid ='id_2601'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits',value);
                value -> component.code = cc('http://ncit.nci.nih.gov', 'C60819');
            };
        };

        //Hersteller -> hersteller
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid ='id_2602'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho',value);
                value -> component.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        /* ---------------------------- LIQUID BIOPSY ------------------------------ */
        //Date of Assessment
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_2528'" then
        {
            values.value as value -> tgt.effectiveDateTime = dateOp(value, 'date');
        };

        //Phänotyp -> phaenotyp
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_1929'" then
        {
            values.value where "value = 'Mutation'" then
            {
                values.value as value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C45576' ,'Mutation Abnormality');
                    value -> component.code = cc('http://ncit.nci.nih.gov', 'C16977');
                };
            };

            values.value where "value = 'Fusion'" then
            {
                values.value as value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C20195' ,'Gene Fusion');
                    value -> component.code = cc('http://ncit.nci.nih.gov', 'C16977');
                };
            };
        };

        //Gen -> gene-studied
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_1928'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueCodeableConcept = cc('http://www.genenames.org',value);
                value -> component.code = cc('http://ncit.nci.nih.gov', '48018-6');
            };
        };

        //Exon des 5' Gens -> exon
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_1931'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger = cast(value, 'FHIR.integer');
                value -> component.code = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };

        //Referenztranskript 5' Gen -> referenztranskript
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='lb_referencetranscript_5_end_gene'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code = cc('http://loinc.org', '51958-7');
            };
        };

        //3' Gen der Fusion (2.Gen) -> 2ndGen
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='lb_3_end_gene'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueCodeableConcept = cc('http://www.genenames.org',value);
                value -> component.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', '2ndGen');
            };
        };

        //Exon des 3' Gens -> 2ndGenExon
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='lb_exon_3_end_gen'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger = cast(value, 'FHIR.integer');
                value -> component.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', '2ndGenExon');
            };
        };

        //Referenztranskript 3' Gen -> 2ndGenTranskript
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='lb_referencetranscript_3_end_gen'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', '2ndGenTranskript');
            };
        };

        //HGVS c. (Mutation cDNA) -> dna-chg
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_1930'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code = cc('http://loinc.org', '48004-6');
            };
        };

        //HGVS p. (Mutation Protein) -> amino-acid-chg
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_1932'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code = cc('http://loinc.org', '48005-3');
            };
        };

        // Referenzen
        // Specimen is set in Master.map

        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

group TransformLiquidBiopsyStatusAndExtension(source operations: BackboneElement, target tgt: Observation)
{
    // Durchführung
    operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2520'" then
    {
        values.value as value where "$this.value = 'in Bearbeitung'" then 
        {
            value -> tgt.status = 'registered';
        };
        values.value as value where "$this.value = 'abgeschlossen'" then 
        {
            value -> tgt.status = 'final';
        };
    };
    
    // Abschluss
    operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2462'" then
    {
        values.value as value, value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as statusExtension then
        {
            value -> statusExtension.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/NNGM/statusAbschluss',value, value);
            value -> statusExtension.url = 'status';
        };
    };

    // Datum des Abschlusses
    operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2521'" then
    {
        values.value as value, value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as datumExtension then
        {
            value -> datumExtension.valueDate = dateOp(value, 'date');
            value -> datumExtension.url = 'datum';
        };
    };
}