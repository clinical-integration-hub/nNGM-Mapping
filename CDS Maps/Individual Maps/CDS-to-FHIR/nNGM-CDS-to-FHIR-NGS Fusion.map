///version = 0.1
///title = "FusionNGSFHIR"
/*
TODO
    - Repeatindex is off by +1
*/

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_FusionNGSFHIR" = nNGM_Mapping_FusionNGSFHIR

uses "http://hl7.org/fhir/StructureDefinition/CST_Transport" as source


uses "http://hl7.org/fhir/StructureDefinition/Specimen" as target
uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target
uses "http://hl7.org/fhir/StructureDefinition/ServiceReqeust" as target


/* ------------------------------ Bundle ---------------------------- */
group TransformBundleFusionNGS(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target diagnosticSection: BackboneElement, target index: RepeatIndex)
{
    operations -> diagnosticSection.section = create('BackboneElement') as section, section.title = 'fusion-ngs', section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'fusion-ngs') then
    {
        operations then CreateOrganizationFusionNGS(operations, bundle, composition, section);

        // there may be more than 1 instance of Observation, thus an index is needed to reference (and create) the correct observation
        operations then CreateDiagnosticReportFusionNGS(operations, bundle, composition, section, index);
        operations then CreateObservationsFusionNGS(operations, bundle, composition, section, index);
    };
}

/* ------------------------------DiagnosticReport---------------------------- */
group CreateDiagnosticReportFusionNGS(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    operations.data as data, data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('DiagnosticReport') as diagnosticreport then 
        {
            operations then TransformDiagnosticReportFusionNGS(operations, diagnosticreport, composition, section, index);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(diagnosticreport, '\'DiagnosticReport/\' + $this.id');
        };
    }; 
}

/* ------------------------------DiagnosticReport---------------------------- */
group TransformDiagnosticReportFusionNGS(source operations: BackboneElement, target tgt: DiagnosticReport, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    // since there can be more than 1 instance of the Sonstiges Observation we need an index to assign the corresponding data to each observation
    operations then InitSectionIndex(operations, index); // (re)set index to 0

    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/DiagnosticReport/nNGM/befund';

    // status
    operations -> tgt.status = 'final';

    // code
    operations -> tgt.code = cc('http://loinc.org', '50398-7'); 

    // Subject 
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_befund2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as diagnosticReport, diagnosticReport.reference = evaluate(value, '\'DiagnosticReport/\' + $this');
        };

        // Referenzen
        // Untersuchungs-ID
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            values.value as id -> tgt.identifier = create('identifier') as befundNummer,
                                                    befundNummer.system = 'http://uk-koeln.de/NamingSystem/nNGM/befundnummer',
                                                    befundNummer.value  = id;
        };

        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };

        // Observations
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2511'" then
        {
            // if Sonstiges: create n observation references (with n according to repeatindex)
            values.value where "$this.value = 'Sonstiges'" then
            {
                operations.data as data, data.values as values where "blockindex = 14 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_ngsFusionExpression_sonstiges'" then
                {
                    values.value as value -> tgt.result = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
                    operations then IncrementSectionIndex(operations, index);
                };
            };
            values.value where "$this.value != 'Sonstiges'" then
            {   
                values.value as value -> tgt.result = create('Reference') as reference then SetReferenceToObservationFusionNGS(operations, value, reference);
            };
        };
        
        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

/* ---------------------------- Organization -------------------------- */
group CreateOrganizationFusionNGS(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('Organization') as organization then 
        {
            operations then TransformOrganizationFusionNGS(operations, organization, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(organization, '\'Organization/\' + $this.id');
        };
    };
}

/* ---------------------------- Organization -------------------------- */
group TransformOrganizationFusionNGS(source operations: BackboneElement, target tgt: Organization, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://clinicalsite.org/fhir/StructureDefinition/organizationalunit';

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as organization, organization.reference = evaluate(value, '\'Organization/\' + $this');
        };

        /* ------------------------------ Netzwerkzentrum ---------------------------- */
        // Standort
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as name -> tgt.name = name;
        };
    };
}

/* ------------------------------ Check which Observation is required ---------------------------- */
group CreateObservationsFusionNGS(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    // since there can be more than 1 instance of the Sonstiges Observation we need an index to assign the corresponding data to each observation
    operations then InitSectionIndex(operations, index); // (re)set index to 0

    // Check whether observation should be created
    operations.data as data, data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2511'" then
    {
        // ALK
        values.value where "$this.value = 'ALK'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationALKFusionNGS(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // RET
        values.value where "$this.value = 'RET'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationRETFusionNGS(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // ROS1
        values.value where "$this.value = 'ROS1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationROS1FusionNGS(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // NTRK1
        values.value where "$this.value = 'NTRK1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationNTRK1FusionNGS(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // NTRK2
        values.value where "$this.value = 'NTRK2'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationNTRK2FusionNGS(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // NTRK3
        values.value where "$this.value = 'NTRK3'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationNTRK3FusionNGS(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // FGFR1
        values.value where "$this.value = 'FGFR1'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationFGFR1FusionNGS(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // FGFR2
        values.value where "$this.value = 'FGFR2'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationFGFR2FusionNGS(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // FGFR3
        values.value where "$this.value = 'FGFR3'" -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationFGFR3FusionNGS(operations, observation, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');   
        };
        // Sonstiges: create n observation (with n according to repeatindex)
        values.value where "$this.value = 'Sonstiges'" then
        {
            operations.data as data, data.values as values where "repeatindex = %index.sectionIndex and (blockindex = 14 and groupindex = 0 and itemid ='id_2246'
                                                                                                        or blockindex = 14 and groupindex = 0 and itemid ='id_2254'
                                                                                                        or blockindex = 14 and groupindex = 0 and itemid ='id_2255'
                                                                                                        or blockindex = 14 and groupindex = 0 and itemid ='id_2256'
                                                                                                        or blockindex = 14 and groupindex = 0 and itemid ='id_2257'
                                                                                                        or blockindex = 14 and groupindex = 0 and itemid ='id_2258'
                                                                                                        or blockindex = 14 and groupindex = 0 and itemid ='id_2259')" then
            {
                operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then
                {
                    operations then TransformObservationSonstigesFusionNGS(operations, observation, composition, section, index);
                    operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id'); 
                };
                operations then IncrementSectionIndex(operations, index);
            };
        };
    };
}

/* ------------------------------ Observation ALK ----------------------------------- */
group TransformObservationALKFusionNGS(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //Code: Item required on simplifier profil
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'ALK', 'ALK');

    //Fusion NGS
    operations then MapSOPAssayHerstellerCategoryMethodStatusFusionNGS(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_alk'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Date of Assessment
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid ='id_2098'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Phänotyp
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2099'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expresssion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };
        
        /*---------------------NGS Fusion -------------------------------*/
        //Ergebnis
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2127'" then
        {
                values.value where "$this.value = 'positiv'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
                };

                values.value where "$this.value = 'negativ'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
                };

                values.value where "$this.value = 'nicht auswertbar'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
                };
        };

        //Fusionspartner
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2128'" then
        {
            values.value as fusionspartner -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
                fusionspartner -> componentFusionspartner.valueString = fusionspartner;
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2129'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentAnzahlDerFusionsreads then
            {
                value -> componentAnzahlDerFusionsreads.valueInteger = cast(value, 'FHIR.integer');
                value -> componentAnzahlDerFusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };

        //5' Fusionspartner Exon
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2130'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentFusionsPartnerExon then
            {
                value -> componentFusionsPartnerExon.valueInteger = cast(value, 'FHIR.integer');
                value -> componentFusionsPartnerExon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        //ALK Exon
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2131'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentExon then
            {
                value -> componentExon.valueInteger = cast(value, 'FHIR.integer');
                value -> componentExon.code = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
        
        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

/* ------------------------------ Observation RET ----------------------------------- */
group TransformObservationRETFusionNGS(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //Code: Item required on simplifier profil
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'RET', 'RET');

    //Fusion NGS
    operations then MapSOPAssayHerstellerCategoryMethodStatusFusionNGS(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ret'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Date of Assessment
        data.values as values where "blockindex = 6 and  groupindex = 0 and itemid ='id_2183'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Phänotyp
        data.values as values where "blockindex = 6 and  groupindex = 0 and itemid ='id_2184'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expresssion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        /*---------------------NGS Fusion -------------------------------*/
        //Ergebnis
        data.values as values where "blockindex = 6 and  groupindex = 0 and itemid ='id_2206'" then
        {
            values.value where "$this.value = 'positiv'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
                };

                values.value where "$this.value = 'negativ'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
                };

                values.value where "$this.value = 'nicht auswertbar'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
                };
        };

        //Fusionspartner
        data.values as values where "blockindex = 6 and  groupindex = 0 and itemid ='id_2207'" then
        {
            values.value as fusionspartner -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
                fusionspartner -> componentFusionspartner.valueString = fusionspartner;
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads
        data.values as values where "blockindex = 6 and  groupindex = 0 and itemid ='id_2208'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentAnzahlDerFusionsreads then
            {
                value -> componentAnzahlDerFusionsreads.valueInteger = cast(value, 'FHIR.integer');
                value -> componentAnzahlDerFusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };

        //5' Fusionspartner Exon
        data.values as values where "blockindex = 6 and  groupindex = 0 and itemid ='id_2209'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentFusionsPartnerExon then
            {
                value -> componentFusionsPartnerExon.valueInteger = cast(value, 'FHIR.integer');
                value -> componentFusionsPartnerExon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        //RET Exon
        data.values as values where "blockindex = 6 and  groupindex = 0 and itemid ='id_2210'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentExon then
            {
                value -> componentExon.valueInteger = cast(value, 'FHIR.integer');
                value -> componentExon.code = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 

        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

/* ------------------------------ Observation ROS1 ----------------------------------- */
group TransformObservationROS1FusionNGS(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //Code: Item required on simplifier profil
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'ROS1', 'ROS1');

    //Fusion NGS
    operations then MapSOPAssayHerstellerCategoryMethodStatusFusionNGS(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ros1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Date of Assessment
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2211'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        //Phänotyp
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2212'" then
        {
            values.value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as phaenotyp where "value = 'Expresssion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C80488', 'Expression');
                    };
                };

                values.value as phaenotyp where "value = 'Fusion'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C28510', 'Fusion Gene');
                    };
                };

                values.value as phaenotyp where "value = 'Amplifikation'" then
                {
                    phaenotyp->tgt.component = create('BackboneElement') as componentPhaenotyp then
                    {
                        phaenotyp->componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                        phaenotyp->componentPhaenotyp.valueCodeableConcept = cc('http://ncit.nci.nih.gov', 'C25418', 'Amplification');
                    };
                };
            };
        };

        /*---------------------NGS Fusion -------------------------------*/
        //Ergebnis
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2241'" then
        {
            values.value where "$this.value = 'positiv'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
                };

                values.value where "$this.value = 'negativ'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
                };

                values.value where "$this.value = 'nicht auswertbar'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
                };
        };

        //Fusionspartner
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2242'" then
        {
            values.value as fusionspartner -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
                fusionspartner -> componentFusionspartner.valueString = fusionspartner;
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2243'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentAnzahlDerFusionsreads then
            {
                value -> componentAnzahlDerFusionsreads.valueInteger = cast(value, 'FHIR.integer');
                value -> componentAnzahlDerFusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };

        //5' Fusionspartner Exon
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2244'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentFusionsPartnerExon then
            {
                value -> componentFusionsPartnerExon.valueInteger = cast(value, 'FHIR.integer');
                value -> componentFusionsPartnerExon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        //ROS1 Exon
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2245'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentExon then
            {
                value -> componentExon.valueInteger = cast(value, 'FHIR.integer');
                value -> componentExon.code = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 

        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

/* ------------------------------ Observation NTRK1 ----------------------------------- */
group TransformObservationNTRK1FusionNGS(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //Code: Item required on simplifier profil
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'NTRK1', 'NTRK1');

    //Fusion NGS
    operations then MapSOPAssayHerstellerCategoryMethodStatusFusionNGS(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ntrk1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Date of Assessment
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2540'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        /*---------------------NGS Fusion -------------------------------*/
        //Ergebnis
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2547'" then
        {
            values.value where "$this.value = 'positiv'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
                };

                values.value where "$this.value = 'negativ'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
                };

                values.value where "$this.value = 'nicht auswertbar'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
                };
        };

        //Fusionspartner
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2548'" then
        {
            values.value as fusionspartner -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
                fusionspartner -> componentFusionspartner.valueString = fusionspartner;
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2549'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentAnzahlDerFusionsreads then
            {
                value -> componentAnzahlDerFusionsreads.valueInteger = cast(value, 'FHIR.integer');
                value -> componentAnzahlDerFusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };

        //5' Fusionspartner Exon
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2550'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentExon then
            {
                value -> componentExon.valueInteger = cast(value, 'FHIR.integer');
                value -> componentExon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 

        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

/* ------------------------------ Observation NTRK2 ----------------------------------- */
group TransformObservationNTRK2FusionNGS(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //Code: Item required on simplifier profil
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'NTRK2', 'NTRK2');

    //Fusion NGS
    operations then MapSOPAssayHerstellerCategoryMethodStatusFusionNGS(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ntrk2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Date of Assessment
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2592'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        /*---------------------NGS Fusion -------------------------------*/
        //Ergebnis
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2596'" then
        {
            values.value where "$this.value = 'positiv'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
                };

                values.value where "$this.value = 'negativ'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
                };

                values.value where "$this.value = 'nicht auswertbar'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
                };
        };

        //Fusionspartner
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2597'" then
        {
            values.value as fusionspartner -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
                fusionspartner -> componentFusionspartner.valueString = fusionspartner;
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2598'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentAnzahlDerFusionsreads then
            {
                value -> componentAnzahlDerFusionsreads.valueInteger = cast(value, 'FHIR.integer');
                value -> componentAnzahlDerFusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };

        //5' Fusionspartner Exon
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2599'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentFusionsPartnerExon then
            {
                value -> componentFusionsPartnerExon.valueInteger = cast(value, 'FHIR.integer');
                value -> componentFusionsPartnerExon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 

        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

/* ------------------------------ Observation NTRK3 ----------------------------------- */
group TransformObservationNTRK3FusionNGS(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //Code: Item required on simplifier profil
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'NTRK3', 'NTRK3');

    //Fusion NGS
    operations then MapSOPAssayHerstellerCategoryMethodStatusFusionNGS(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ntrk3'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Date of Assessment
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2584'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        /*---------------------NGS Fusion -------------------------------*/
        //Ergebnis
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2588'" then
        {
            values.value where "$this.value = 'positiv'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
                };

                values.value where "$this.value = 'negativ'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
                };

                values.value where "$this.value = 'nicht auswertbar'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
                };
        };

        //Fusionspartner
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2589'" then
        {
            values.value as fusionspartner -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
                fusionspartner -> componentFusionspartner.valueString = fusionspartner;
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2590'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentAnzahlDerFusionsreads then
            {
                value -> componentAnzahlDerFusionsreads.valueInteger = cast(value, 'FHIR.integer');
                value -> componentAnzahlDerFusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };

        //5' Fusionspartner Exon
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2591'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentFusionsPartnerExon then
            {
                value -> componentFusionsPartnerExon.valueInteger = cast(value, 'FHIR.integer');
                value -> componentFusionsPartnerExon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 

        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

/* ------------------------------ Observation FGFR1 ----------------------------------- */
group TransformObservationFGFR1FusionNGS(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //Code: Item required on simplifier profil
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'FGFR1', 'FGFR1');

    //Fusion NGS
    operations then MapSOPAssayHerstellerCategoryMethodStatusFusionNGS(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_fgfr1'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Date of Assessment
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2576'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        /*---------------------NGS Fusion -------------------------------*/
        //Ergebnis
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2580'" then
        {
            values.value where "$this.value = 'positiv'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
                };

                values.value where "$this.value = 'negativ'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
                };

                values.value where "$this.value = 'nicht auswertbar'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
                };
        };

        //Fusionspartner
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2581'" then
        {
            values.value as fusionspartner -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
                fusionspartner -> componentFusionspartner.valueString = fusionspartner;
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2582'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentAnzahlDerFusionsreads then
            {
                value -> componentAnzahlDerFusionsreads.valueInteger = cast(value, 'FHIR.integer');
                value -> componentAnzahlDerFusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };

        //5' Fusionspartner Exon
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2583'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentFusionsPartnerExon then
            {
                value -> componentFusionsPartnerExon.valueInteger = cast(value, 'FHIR.integer');
                value -> componentFusionsPartnerExon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 

        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

/* ------------------------------ Observation FGFR2 ----------------------------------- */
group TransformObservationFGFR2FusionNGS(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //Code: Item required on simplifier profil
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'FGFR2', 'FGFR2');

    //Fusion NGS
    operations then MapSOPAssayHerstellerCategoryMethodStatusFusionNGS(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_fgfr2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Date of Assessment
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2568'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        /*---------------------NGS Fusion -------------------------------*/
        //Ergebnis
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2572'" then
        {
            values.value where "$this.value = 'positiv'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
                };

                values.value where "$this.value = 'negativ'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
                };

                values.value where "$this.value = 'nicht auswertbar'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
                };
        };

        //Fusionspartner
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2573'" then
        {
            values.value as fusionspartner -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
                fusionspartner -> componentFusionspartner.valueString = fusionspartner;
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2574'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentAnzahlDerFusionsreads then
            {
                value -> componentAnzahlDerFusionsreads.valueInteger = cast(value, 'FHIR.integer');
                value -> componentAnzahlDerFusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };

        //5' Fusionspartner Exon
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2575'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentFusionsPartnerExon then
            {
                value -> componentFusionsPartnerExon.valueInteger = cast(value, 'FHIR.integer');
                value -> componentFusionsPartnerExon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 

        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

/* ------------------------------ Observation FGFR3 ----------------------------------- */
group TransformObservationFGFR3FusionNGS(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //Code: Item required on simplifier profil
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'FGFR3', 'FGFR3');

    //Fusion NGS
    operations then MapSOPAssayHerstellerCategoryMethodStatusFusionNGS(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_fgfr3'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Date of Assessment
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2560'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        /*---------------------NGS Fusion -------------------------------*/
        //Ergebnis
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2564'" then
        {
            values.value where "$this.value = 'positiv'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
                };

                values.value where "$this.value = 'negativ'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
                };

                values.value where "$this.value = 'nicht auswertbar'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
                };
        };

        //Fusionspartner
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2565'" then
        {
            values.value as fusionspartner -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
                fusionspartner -> componentFusionspartner.valueString = fusionspartner;
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };

        //Anzahl der Fusionsreads
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2566'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentAnzahlDerFusionsreads then
            {
                value -> componentAnzahlDerFusionsreads.valueInteger = cast(value, 'FHIR.integer');
                value -> componentAnzahlDerFusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };

        //5' Fusionspartner Exon
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2567'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentFusionsPartnerExon then
            {
                value -> componentFusionsPartnerExon.valueInteger = cast(value, 'FHIR.integer');
                value -> componentFusionsPartnerExon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 

        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

/* ------------------------------ Observation Sonstiges ----------------------------------- */
group TransformObservationSonstigesFusionNGS(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //Code: Item required on simplifier profil
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'Sonstiges', 'Sonstiges');

    //Fusion NGS
    operations then MapSOPAssayHerstellerCategoryMethodStatusFusionNGS(operations, tgt);

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 14 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_ngsFusionExpression_sonstiges'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Date of Assessment
        data.values as values where "blockindex = 14 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_2246'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        /*---------------------NGS Fusion -------------------------------*/
        //Ergebnis
        data.values as values where "blockindex = 14 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_2254'" then
        {
            values.value where "$this.value = 'positiv'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6576-8', 'Positive');
                };

                values.value where "$this.value = 'negativ'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA6577-6', 'Negative');
                };

                values.value where "$this.value = 'nicht auswertbar'" then 
                {
                    values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://loinc.org', 'LA18198-4', 'No call');
                };
        };

        //Erster Fusionspartner
        data.values as values where "blockindex = 14 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_2255'" then
        {
            values.value as ersterfusionspartner -> tgt.component = create('BackboneElement') as componentErsterFusionspartner then
            {
                ersterfusionspartner -> componentErsterFusionspartner.valueCodeableConcept = cc('http://www.genenames.org',ersterfusionspartner);
                ersterfusionspartner -> componentErsterFusionspartner.code = cc('http://loinc.org', '48018-6');
            };
        };

        //Zweiter Fusionspartner
        data.values as values where "blockindex = 14 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_2256'" then
        {
            values.value as fusionspartner -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
                fusionspartner -> componentFusionspartner.valueCodeableConcept = cc('http://www.genenames.org',fusionspartner);
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
        //Anzahl der Fusionsreads
        data.values as values where "blockindex = 14 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_2257'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentAnzahlDerFusionsreads then
            {
                value -> componentAnzahlDerFusionsreads.valueInteger = cast(value, 'FHIR.integer');
                value -> componentAnzahlDerFusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };
        
        //Exon erster Fusionspartner
        data.values as values where "blockindex = 14 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_2258'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentErsterFusionspartnerExon then
            {
                value -> componentErsterFusionspartnerExon.valueString = value;
                value -> componentErsterFusionspartnerExon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'erster-fusionspartner-exon');
            };
        };
        //Exon zweiter Fusionspartner
        data.values as values where "blockindex = 14 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_2259'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as componentFusionsPartnerExon then
            {
                value -> componentFusionsPartnerExon.valueString = value;
                value -> componentFusionsPartnerExon.code = cc('http://ncit.nci.nih.gov', 'fusionspartner-exon');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // }; 

        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}


/*-----------------HELPERS----------------------------*/
/* ------ Items for all the observation created---------- */
group MapSOPAssayHerstellerCategoryMethodStatusFusionNGS(source operations: BackboneElement, target tgt: Observation)
{
    // Status and Extension
    operations then TransformFusionNGSStatusAndExtension(operations, tgt);

    //FISH category
    operations -> tgt.category as category then
    {
        operations -> category.coding = create ('Coding') as coding, coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
                                                                    coding.code = 'laboratory';                                                    
    };

    operations -> tgt.method = cc('http://ncit.nci.nih.gov','C101293');

    operations.data as data then
    {                      
        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2612'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as componentSop then
            {
                sop -> componentSop.valueString = sop;
                sop -> componentSop.code = cc('http://ncit.nci.nih.gov', 'C48443');
            };
        };

        // Standort
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as nz -> tgt.component = create('BackboneElement') as standort then
            {
                values.value as value where "%tgt.component.where(code = 'C25341').exists().not()" then
                {
                    nz -> standort.valueString = nz;
                    nz -> standort.code = cc('http://ncit.nci.nih.gov', 'C25341');
                };
            };
        };
        
        /* ------------------------------Methodik---------------------------- */
        // Assay
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2538'" then
        {
            values.value as assay -> tgt.component = create('BackboneElement') as componentAssay then
            {
                assay -> componentAssay.code = cc('http://ncit.nci.nih.gov', 'C60819');
                assay -> componentAssay.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits',assay) ;
            };
        };

        //Hersteller 
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2539'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
            };
        };
    };
}

group TransformFusionNGSStatusAndExtension(source operations: BackboneElement, target tgt: Observation)
{
    // Durchführung
    operations.data as data, data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2520'" then
    {
        values.value as value where "$this.value = 'in Bearbeitung'" then 
        {
            value -> tgt.status = 'registered';
        };
        values.value as value where "$this.value = 'abgeschlossen'" then 
        {
            value -> tgt.status = 'final';
        };
    };
    
    // Abschluss
    operations.data as data, data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2462'" then
    {
        values.value as value, value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as statusExtension then
        {
            value -> statusExtension.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/NNGM/statusAbschluss',value, value);
            value -> statusExtension.url = 'status';
        };
    };

    // Datum des Abschlusses
    operations.data as data, data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
    {
        values.value as value, value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as datumExtension then
        {
            value -> datumExtension.valueDate = dateOp(value, 'date');
            value -> datumExtension.url = 'datum';
        };
    };
}

group SetReferenceToObservationFusionNGS(source operations: BackboneElement, source name: string, target tgt: Reference)
{
    // Check which observation should be referenced
    name where "%name = 'ALK'" then 
    {
        operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_alk'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'RET'" then 
    {
        operations.data as data, data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ret'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'ROS1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ros1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'NTRK1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ntrk1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'NTRK2'" then 
    {
        operations.data as data, data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ntrk2'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'NTRK3'" then 
    {
        operations.data as data, data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_ntrk3'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'FGFR1'" then 
    {
        operations.data as data, data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_fgfr1'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'FGFR2'" then 
    {
        operations.data as data, data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_fgfr2'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
    name where "%name = 'FGFR3'" then 
    {
        operations.data as data, data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'uuid_ngsFusionExpression_fgfr3'" then
        {
            values.value as value -> tgt.reference = evaluate(value, '\'Observation/\' + $this');
        };
    };
}

