/// version = 0.1
/// title = "SonstigeUntersuchungenMap"

/*
TODO
    - repeatindex is off by +1 thus there are always 1 too many observation referenced in DiagnosticReport and ServiceRequest
    - Specimen (creation and reference of uuid_specimen_nngm4) is commented out
*/

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SonstigeUntersuchungenFHIR" = nNGM_Mapping_SonstigeUntersuchungenFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source

uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" as target
uses "http://hl7.org/fhir/StructureDefinition/Organization" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" as target

group TransformBundleSonstigeUntersuchungen(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target index: RepeatIndex)
{
    operations -> composition.section = create('BackboneElement') as section, section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'sonstige-untersuchungen') then
    {        
        operations then CreateOrganizationSonstigeUntersuchungen(operations, bundle, composition, section);
        // operations then CreateSpecimenSonstigeUntersuchungen(operations, bundle, composition, section);
        // there may be more than 1 instance of Observation, thus an index is needed to reference (and create) the correct observation
        operations then CreateDiagnosticReportSonstigeUntersuchungen(operations, bundle, composition, section, index);
        operations then CreateServiceRequestSonstigeUntersuchungen(operations, bundle, composition, section, index);
        operations then CreateObservationSonstigeUntersuchungen(operations, bundle, composition, section, index);
    };
}

/*-----------------Specimen-----------------------*/
group CreateSpecimenSonstigeUntersuchungen(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1601'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('Specimen') as specimen then 
        {
            operations then TransformSpecimenIHC(operations, specimen, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(specimen, '\'Specimen/\' + $this.id');
        };
    };
}

group TransformSpecimenSonstigeUntersuchungen(source operations: BackboneElement, target tgt: Specimen, target composition: Composition, target section: BackboneElement) 
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Specimen/nNGM';

    // fixed status
    operations -> tgt.type = create('BackboneElement') as cc, cc.coding as type,
                      type.system = 'http://snomed.info/sct', 
                      type.version = 'http://snomed.info/sct/900000000000207008',
                      type.code as code, 
                      code.extension as dataAbsentReason, 
                      dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
                      dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        };

        // Referenzen
        // Request
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'uuid_nngm_testung2'" then
        {
            values.value as value -> tgt.request = create('Reference') as serviceRequest, serviceRequest.reference = evaluate(value, '\'ServiceRequest/\' + $this');
        };
    };
}

/* ------------------------------ Check if DiagnosticReport needs to be created ---------------------------- */
group CreateDiagnosticReportSonstigeUntersuchungen(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    operations.data as data, data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('DiagnosticReport') as diagnosticReport then
        {
            operations then TransformDiagnosticReportSonstigeUntersuchungen(operations, diagnosticReport, composition, section, index);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(diagnosticReport, '\'DiagnosticReport/\' + $this.id');
        }; 
    };
}

/* ------------------------------ DiagnosticReport ---------------------------- */
group TransformDiagnosticReportSonstigeUntersuchungen(source operations: BackboneElement, target tgt: DiagnosticReport, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    // since there can be more than 1 instance of the NGS Lung Panel we need an index to assign the corresponding data to each observation
    operations then InitSectionIndex(operations, index); // (re)set index to 0

    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/DiagnosticReport/nNGM/befund';

    // Status
    operations ->  tgt.status as status, 
            status.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    // Code
    operations ->  tgt.code as code, 
            code.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_befund2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as untersuchung, untersuchung.reference = evaluate(value, '\'DiagnosticReport/\' + $this');
        };

        // Reference Patient
        operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

        // Reference Observations
        data.values as values where "blockindex = 3 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_weitereUntersuchung'" then
        {
            values.value as value -> tgt.result = create('Reference') as result, result.reference = evaluate(value, '\'Observation/\' + $this');
            operations then IncrementSectionIndex(operations, index);
        };

        // Reference performer -> Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };

        //Referenzen
        //Untersuchungs-ID
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            values.value as id -> tgt.identifier = create('Identifier') as befundNummer,
                                                          befundNummer.system = 'http://uk-koeln.de/NamingSystem/nNGM/befundnummer',
                                                          befundNummer.value = id;
        };

        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };
    };
}

/* ------------------------------ Organization ---------------------------- */
group CreateOrganizationSonstigeUntersuchungen(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('Organization') as organization then
        {
            operations then TransformOrganizationSonstigeUntersuchungen(operations, organization, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(organization, '\'Organization/\' + $this.id');
        };
    };
}

/* ------------------------------ Organization ---------------------------- */
group TransformOrganizationSonstigeUntersuchungen(source operations: BackboneElement, target tgt: Organization, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://clinicalsite.org/fhir/StructureDefinition/organizationalunit';

    operations.data as data then
    {
        // ID
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as netzwerkZentrum, netzwerkZentrum.reference = evaluate(value, '\'Organization/\' + $this');
        };

        /* ------------------------------ Netzwerkzentrum ---------------------------- */
        // Standort
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as name -> tgt.name = name;
        };

    };
}

/* ------------------------------ Check if Observation needs to be created ---------------------------- */
group CreateObservationSonstigeUntersuchungen(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    // since there can be more than 1 instance of the Untersuchung section we need an index to assign the corresponding data to each observation
    operations then InitSectionIndex(operations, index);

    operations.data as data, data.values as values where "repeatindex = %index.sectionIndex and (blockindex = 3 and groupindex = 0 and itemid = 'id_2026'
                                                                                                or blockindex = 3 and groupindex = 0 and itemid = 'id_2527'
                                                                                                or blockindex = 3 and groupindex = 0 and itemid = 'id_2027'
                                                                                                or blockindex = 3 and groupindex = 0 and itemid = 'id_2028'
                                                                                                or blockindex = 3 and groupindex = 0 and itemid = 'id_2282'
                                                                                                or blockindex = 3 and groupindex = 0 and itemid = 'id_2283'
                                                                                                or blockindex = 3 and groupindex = 0 and itemid = 'id_2031')" then
    {
        operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationSonstigeUntersuchungen(operations, observation, composition, section, index);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');
        }; 
        operations then IncrementSectionIndex(operations, index);
    };
}

/* ------------------------------------ Observation ----------------------------------- */
group TransformObservationSonstigeUntersuchungen(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/weitere-untersuchung';
    
    operations ->  tgt.status as status, 
            status.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');


    operations -> tgt.method as method,
            method.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    operations.data as data then
    {
        // ID
        data.values as values where "blockindex = 3 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_weitereUntersuchung'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as untersuchung, untersuchung.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // References
        // Subject
        operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');
        
        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };

        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };

        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2618'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as componentSop then
            {
                sop -> componentSop.valueString = sop;
                sop -> componentSop.code = cc('http://ncit.nci.nih.gov', 'C48443');
            };
        };
        // Date of Assessment
        data.values as values where "blockindex = 3 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_2527'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Bezeichnung
        data.values as values where "blockindex = 3 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_2026'" then
        {
            values.value as value -> tgt.code = create('CodeableConcept') as code then
            {
                value -> code.coding as coding, 
                            coding.system = 'http://loinc.org',
                            coding.code = '69548-6';
                value -> code.text = value;
            };
        };
        // Assay
        data.values as values where "blockindex = 3 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_2027'" then
        {
            values.value as assay -> tgt.component = create('BackboneElement') as componentAssay then
            {
                assay -> componentAssay.code = cc('http://ncit.nci.nih.gov', 'C60819');
                assay -> componentAssay.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ish-fish-kits', assay) ;
            };
        };

        // Hersteller
        data.values as values where "blockindex = 3 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_2028'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hersteller-molpatho', hersteller);
            };
        };
        
        //Gen
        data.values as values where "blockindex = 3 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_2282'" then
        {
            values.value as geneStudied -> tgt.component = create('BackboneElement') as componentGeneStudied then
            {
                geneStudied -> componentGeneStudied.code = cc('http://ncit.nci.nih.gov', '48018-6');
                geneStudied -> componentGeneStudied.valueCodeableConcept = cc('http://hl7.org/fhir/uv/genomics-reporting/ValueSet/hgnc', geneStudied);
            };
        };
        //Phaenotyp
        data.values as values where "blockindex = 3 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_2283'" then
        {
            
            values.value as phaenotyp where "$this.value = 'Expression'" then 
            {
                phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp -> componentPhaenotyp.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/phenotypes', 'C80488');
                };
            };
            values.value as phaenotyp where "$this.value = 'Fusion Gene'" then 
            {
                phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp -> componentPhaenotyp.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/phenotypes', 'C28510');
                };
            };
            values.value as phaenotyp where "$this.value = 'Amplification'" then 
            {
                phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp -> componentPhaenotyp.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/phenotypes', 'C25418');
                };
            };
            values.value as phaenotyp where "$this.value != 'Amplification' and $this.value != 'Expression' and $this.value != 'Fusion Gene'" then 
            {
                phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                };
            };
        };
        // Ergebnis
        data.values as values where "blockindex = 3 and groupindex = 0  and repeatindex = %index.sectionIndex and itemid = 'id_2031'" then
        {
            values.value as ergebnis where "$this.value = 'positiv'" then 
            {
                ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', 'aktivierende-Mutation','aktivierende Mutation');
            };
            values.value as ergebnis where "$this.value = 'negativ'" then 
            {
                ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', 'keine-aktivierende-Mutation','keine aktivierende Mutation');
            };
            values.value as ergebnis where "$this.value = 'nicht auswertbar'" then 
            {
                ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', 'nicht-auswertbar','nicht auswertbar');
            };
        };
    };
}

/* -------------------------------------- Check if ServiceRequest needs to be created -------------------------------------------- */
group CreateServiceRequestSonstigeUntersuchungen(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    let resourceIsCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceIsCreated);

    operations.data as data, data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2520'
                                                        or blockindex = 4 and groupindex = 0 and itemid = 'id_2462'
                                                        or blockindex = 4 and groupindex = 0 and itemid = 'id_2521'" then
    {
        // if resource is not created yet: call transform
        operations where "%resourceIsCreated.valueBoolean = false" -> bundle.entry as entry, entry.resource = create('ServiceRequest') as serviceRequest then 
        {
            operations then TransformServiceRequestSonstigeUntersuchungen(operations, serviceRequest, composition, section, index);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(serviceRequest, '\'ServiceRequest/\' + $this.id');
            operations then SetBooleanToTrue(operations, resourceIsCreated);
        };
    }; 
}

/* -------------------------------------- ServiceRequest -------------------------------------------- */
group TransformServiceRequestSonstigeUntersuchungen(source operations: BackboneElement, target tgt: ServiceRequest, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    // since there can be more than 1 instance of the NGS Lung Panel we need an index to assign the corresponding data to each observation
    operations then InitSectionIndex(operations, index); // (re)set index to 0

    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/ServiceRequest/nNGM/testung';

    // intent
    operations -> tgt.intent = 'proposal';

     // Subject
    operations.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    // Category
    operations -> tgt.category as category, 
            category.coding as coding,
            coding.code as code,
            code.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    // Code 
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nngm/testung-anforderung-code', 'sonstige-untersuchungen');

    // authoredOn
    operations -> tgt.authoredOn as code, 
            code.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');    
        
    operations.data as data then
    {
        // References
        // ID
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_befund2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as anforderungTestung, anforderungTestung.reference = evaluate(value, '\'ServiceRequest/\' + $this');
        };

        // Reference Patient
        operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.requester = create('Reference') as organization, organization.reference = evaluate(value, '\'Organization/\' + $this');
        };

        // Reference Observations
        data.values as values where "blockindex = 3 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_weitereUntersuchung'" then
        {
            values.value as value -> tgt.reasonReference = create('Reference') as reasonReference, reasonReference.reference = evaluate(value, '\'Observation/\' + $this');
            operations then IncrementSectionIndex(operations, index);
        };

        // Reference Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };

        //Status der Untersuchungen
        //Durchfuehrung
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2520'" then
        {
            values.value as value where "$this.value = 'in Bearbeitung'" then 
            {
                value -> tgt.status = 'active';
            };
            values.value as value where "$this.value = 'abgeschlossen'" then 
            {
                value -> tgt.status = 'completed';
            };
        };
    };

    // Extensions
    operations then TransformSonstigeUntersuchungenStatusExtension(operations, tgt);
}

/* -------------------------------------- Create double extensions for Status -------------------------------------------- */
group TransformSonstigeUntersuchungenStatusExtension(source operations: BackboneElement, target tgt: ServiceRequest)
{
    operations.data as data then
    {
        // Status des Abschlusses
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2462'" then
        {
            values.value as value where "%tgt.status.extension.extension.where(url = 'status').exists().not()" then
            {
                value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as statusExtension then
                {
                    value -> statusExtension.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/NNGM/statusAbschluss',value, value);
                    value -> statusExtension.url = 'status';
                };
            };
        };

        //Datum des Abschlusses
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as value where "%tgt.status.extension.extension.where(url = 'datum').exists().not()" then
            {
                value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as datumExtension then
                {
                    value -> datumExtension.valueDate = dateOp(value, 'date');
                    value -> datumExtension.url = 'datum';
                };
            };
        };
    };
}