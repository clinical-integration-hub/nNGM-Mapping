/// version = 0.1
/// title = "nNGM: Mapping Histologie FHIR"

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_HistologieFHIR" = nNGM_Mapping_HistologieFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" as target
uses "http://hl7.org/fhir/StructureDefinition/Specimen" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" as target


/* ------------------------------ Bundle ---------------------------- */
group TransformBundleHistologie(source operations: BackboneElement, target bundle: Bundle, target composition: Composition)
{
    operations -> composition.section = create('BackboneElement') as section, section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'histologie') then
    {
        // operations then CreateSpecimenHistologie(operations, bundle, composition, section);
        operations then CreateDiagnosticReportHistologie(operations, bundle, composition, section);
        operations then CreateObservationHistologie(operations, bundle, composition, section);
        operations then CreateServiceRequestHistologie(operations, bundle, composition, section);
    };
}

/* ------------------------------ Check if Specimen is required ---------------------------- */
group CreateSpecimenHistologie(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1601'
                                    or blockindex = 0 and groupindex = 0 and itemid = 'id_2515'
                                    or blockindex = 0 and groupindex = 0 and itemid = 'id_2516'
                                    or blockindex = 0 and groupindex = 0 and itemid = 'id_2517'" then
        {
            src -> tgt.resource = create('Specimen') as specimen then TransformSpecimenHistologie(src, specimen);
        };
    };
}

/* ------------------------------ Specimen ---------------------------- */
group TransformSpecimenHistologie(source src: CTS_Transport, target tgt: Specimen) 
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Specimen/nNGM';

    // Patient reference
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    src.operations as operations, operations.data as data then 
    {
        // Biopsy-ID -> biopsyId.value
         data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1601'" then
        {
            values.value as value -> tgt.identifier = create('Identifier') as biopsieId, biopsieId.system = cast('http://uk-koeln.de/NamingSystem/nNGM/biopsienummer', 'FHIR.uri'), biopsieId.value = value;
        };

        // Eingang des Tumormaterials in der Pathologie -> receivedTime
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2515'" then
        {
            values.value as value -> tgt.receivedTime = dateOp(value, 'dateTime');
        };

        // Eingangsnummer des Tumormaterials in der Pathologie -> accessionIdentifier:eingangsnummerPatho
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2516'" then
        {
            values.value as value -> tgt.accessionIdentifier as identifier, identifier.system = cast('http://uk-koeln.de/NamingSystem/nNGM/eingangPathoNummer', 'FHIR.uri'), identifier.value = value;
        };

        // Tumormaterial -> type.text
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2517'" then
        {
           values.value as value -> tgt.type as type, type.text = value, type.coding = create('Coding') as snomedGlobalPatientSet, snomedGlobalPatientSet.system = 'http://snomed.info/sct',
                                                                                        snomedGlobalPatientSet.version = 'http://snomed.info/sct/900000000000207008',
                                                                                        snomedGlobalPatientSet.code as code, code.extension as dataAbsentReason,
                                                                                        dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
                                                                                        dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');
        };
    };
}

/* ------------------------------ Check if DiagnosticReport is required ---------------------------- */
group CreateDiagnosticReportHistologie(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether resource should be created
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);

    operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'assessment_id' or 
                                                        blockindex = 0 and groupindex = 0 and itemid = 'extern_patho_case_id'" then
    {
        operations then SetBooleanToTrue(operations, resourceShouldBeCreated);
    };

    // Create resource if bool set to true
    operations where "%resourceShouldBeCreated.valueBoolean = true" -> bundle.entry as entry, entry.resource = create('DiagnosticReport') as diagnosticReport then 
    {
        operations then TransformDiagnosticReportHistologie(operations, diagnosticReport, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(diagnosticReport, '\'DiagnosticReport/\' + $this.id');
    };
}

/* ------------------------------ DiagnosticReport ---------------------------- */
group TransformDiagnosticReportHistologie(source operations: BackboneElement, target tgt: DiagnosticReport, target composition: Composition, target section: BackboneElement)
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/DiagnosticReport/nNGM/befund';

    // Status
    operations -> tgt.status as status, status.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    // Code
    operations -> tgt.code as code, code.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_nngm_befund'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as untersuchung, untersuchung.reference = evaluate(value, '\'DiagnosticReport/\' + $this');
        };

        // Reference Patient
        operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

        // Reference Observations
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_nngm_histologie'" then
        {
            values.value as value -> tgt.result = create('Reference') as result, result.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Referenzen
        //Untersuchungs-ID
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            values.value as id -> tgt.identifier = create('Identifier') as befundNummer,
                                                          befundNummer.system = 'http://uk-koeln.de/NamingSystem/nNGM/befundnummer',
                                                          befundNummer.value = id;
        };

        // Pathologie-Fall-ID 
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'extern_patho_case_id'" then
        {
            values.value as id -> tgt.identifier = create('Identifier') as externePathoBefundNummer,
                                                          externePathoBefundNummer.system = 'http://uk-koeln.de/NamingSystem/nNGM/externePathoBefundnummer',
                                                          externePathoBefundNummer.value = id;
        };

    };
}

/* ------------------------------ Observation ---------------------------- */
group CreateObservationHistologie(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether observation should be created
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);

    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_1658'
                                or blockindex = 2 and groupindex = 0 and itemid = 'id_2469'
                                or blockindex = 2 and groupindex = 0 and itemid = 'id_2403'
                                or blockindex = 3 and groupindex = 0 and itemid = 'id_1286'
                                or blockindex = 3 and groupindex = 0 and itemid = 'id_1296'
                                or blockindex = 3 and groupindex = 0 and itemid = 'id_1294'
                                or blockindex = 3 and groupindex = 0 and itemid = 'id_1288'
                                or blockindex = 3 and groupindex = 0 and itemid = 'id_1292'
                                or blockindex = 3 and groupindex = 0 and itemid = 'id_2519'" then
    {
        operations then SetBooleanToTrue(operations, resourceShouldBeCreated);
    };

    // Create resource if bool set to true
    operations where "%resourceShouldBeCreated.valueBoolean = true" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
    {
        operations then TransformObservation(operations, observation, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');
    };
}

group TransformObservation(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    // Resource information
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/histologie';

    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Code
    operations -> tgt.code = cc('http://ncit.nci.nih.gov', 'C18000');

    //status
    operations -> tgt.status as code, 
            code.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    // Access data 
    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_nngm_histologie'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Klassifikation -> component:klassifikation.valueCodeableConcept
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_1658'" then
        {
            values.value as value -> tgt.component = create('CodeableConcept') as klassifikation,
                                                    klassifikation.code = cc('http://ncit.nci.nih.gov', 'C25161'),
                                                    klassifikation.valueCodeableConcept as vcc,
                                                    vcc.coding as coding,
                                                    coding.system = 'http://uk-koeln.de/fhir/ValueSet/nngm/histologie-klassifikation', 
                                                    coding.code = evaluate(value, '$this.split(\'\\t\').first()'),
                                                    coding.display = evaluate(value, '$this.split(\'\\t\').last()');
        };

        // Lokalisation -> bodysite
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2469'" then
        {
            values.value as value -> tgt.bodySite = create('CodeableConcept') as cc, cc.coding as coding, 
            coding.system = 'http://uk-koeln.de/fhir/ValueSet/icd-o-3-bodysite',
            coding.code = evaluate(value, '$this.split(\'\\t\').first()'),
            coding.display = evaluate(value, '$this.split(\'\\t\').last()');
        };

        // Grading
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2403'" then
        {
            values.value as value -> tgt.valueCodeableConcept = create('CodeableConcept') as cc, cc.coding as coding, 
            coding.system = 'http://uk-koeln.de/fhir/ValueSet/nngm/grading',
            coding.code = evaluate(value, '$this.split(\'\\t\').first()'),
            coding.display = evaluate(value, '$this.split(\'\\t\').last()');
        };

        
        //Wachstumsmuster bei Adenokarzinom lepidisch -> component:wachtumsmusterBeiAdenokarzinomLepidisch.valueQuantity
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1286'" then
        {
            values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8250/3');
            }; 
        };

        //Wachstumsmuster bei Adenokarzinom azinaer -> component:wachtumsmusterBeiAdenokarzinomAzinaer.valueQuantity
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1296'" then
        {
            values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8551/3');
            }; 
        };

        // 18: Wachstumsmuster bei Adenokarzinom papillaer -> component:wachtumsmusterBeiAdenokarzinomPapilaer.valueQuantity
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1294'" then
        {
            values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8260/3');
            }; 
        };
        
        //Wachstumsmuster bei Adenokarzinom mikropapill�r -> component:wachtumsmusterBeiAdenokarzinomMikropapilaer.valueQuantity
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1288'" then
        {
            values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8265/3');
            }; 
        };

        //Wachstumsmuster bei Adenokarzinom solide -> component:wachtumsmusterBeiAdenokarzinomSolide.valueQuantity
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1292'" then
        {
            values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8230/3');
            }; 
        };

        //Anteil an Siegelringzellkarzinomen -> component:AnteilSiegelringzellkarzinomen.valueQuantity
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2519'" then
        {
             values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8490/3');
            }; 
        };
    };
}

/* ------------------------------ Helper function ---------------------------- */
group MapPercentageValue(source src: string, target tgt: Quantity)
{
    src -> tgt.value = src,
            tgt.system = 'http://unitsofmeasure.org',
            tgt.unit = 'percentage',
            tgt.code = '%';
}

/* ------------------------------ Check if ServiceRequest is required ---------------------------- */
group CreateServiceRequestHistologie(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether observation should be created
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);

    operations.data as data, data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2520'
                                or blockindex = 4 and groupindex = 0 and itemid = 'id_2462'
                                or blockindex = 4 and groupindex = 0 and itemid = 'id_2521'" then
    {
        operations then SetBooleanToTrue(operations, resourceShouldBeCreated);
    };

    // Create resource if bool set to true
    operations where "%resourceShouldBeCreated.valueBoolean = true" -> bundle.entry as entry, entry.resource = create('ServiceRequest') as serviceRequest then
    {
        operations then TransformServiceRequestHistologie(operations, serviceRequest, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(serviceRequest, '\'ServiceRequest/\' + $this.id');
    };
}

/* ------------------------------ ServiceRequest ---------------------------- */
group TransformServiceRequestHistologie(source operations: BackboneElement, target tgt: ServiceRequest, target composition: Composition, target section: BackboneElement)
{
    // Resource information
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/ServiceRequest/nNGM/testung';

    // intent
    operations -> tgt.intent = 'proposal';

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Category
    operations -> tgt.category as category, 
            category.coding as coding,
            coding.code as code,
            code.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');
                
    // code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nngm/testung-anforderung-code', 'histologie');

    // authoredOn
    operations -> tgt.authoredOn as code, 
            code.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');
    
// TODO: orderDetail, requester (reference), performer (reference), specimen (reference) missing?

    // Access Data
    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'uuid_nngm_testung2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as serviceRequest, serviceRequest.reference = evaluate(value, '\'ServiceRequest/\' + $this');
        };

        // Status
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2520'" then
        {
            values.value as value -> tgt.status = cast(value, 'FHIR.code');
        };
    };

    operations then TransformHistologieStatusExtension(operations, tgt);
}

/* -------------------------------------- Create double extensions for Fast Track -------------------------------------------- */
group TransformHistologieStatusExtension(source operations: BackboneElement, target tgt: ServiceRequest)
{
    operations.data as data then
    {
        // Status des Abschlusses
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2462'" then
        {
            values.value as value where "%tgt.status.extension.extension.where(url = 'status').exists().not()" then
            {
                value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as statusExtension then
                {
                    value -> statusExtension.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/NNGM/statusAbschluss',value, value);
                    value -> statusExtension.url = 'status';
                };
            };
        };

        //Datum des Abschlusses
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as value where "%tgt.status.extension.extension.where(url = 'datum').exists().not()" then
            {
                value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as datumExtension then
                {
                    value -> datumExtension.valueDate = dateOp(value, 'date');
                    value -> datumExtension.url = 'datum';
                };
            };
        };
    };
}