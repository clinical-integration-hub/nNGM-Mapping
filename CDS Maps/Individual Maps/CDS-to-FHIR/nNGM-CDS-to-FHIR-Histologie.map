/// version = 0.1
/// title = "nNGM: Mapping Histologie FHIR"

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_HistologieFHIR" = nNGM_Mapping_HistologieFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" as target
uses "http://hl7.org/fhir/StructureDefinition/Specimen" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" as target


/* ------------------------------ Bundle ---------------------------- */
group TransformBundleHistologie(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target diagnosticSection: BackboneElement)
{
    operations -> diagnosticSection.section = create('BackboneElement') as section, section.title = 'histologie', section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'histologie') then
    {
        operations then CreateSpecimenHistologie(operations, bundle, composition, section);
        operations then CreateDiagnosticReportHistologie(operations, bundle, composition, section);
        operations then CreateObservationHistologie(operations, bundle, composition, section);
    };
}

/* ------------------------------ Check if Specimen is required ---------------------------- */
group CreateSpecimenHistologie(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether resource should be created
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);

    operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2515'
                                or blockindex = 0 and groupindex = 0 and itemid = 'id_2516'
                                or blockindex = 0 and groupindex = 0 and itemid = 'id_2517'" then
    {
        operations then SetBooleanToTrue(operations, resourceShouldBeCreated);
    };

    // Create resource if bool set to true
    operations where "%resourceShouldBeCreated.valueBoolean = true" -> bundle.entry as entry, entry.resource = create('Specimen') as specimen then 
    {
        operations then TransformSpecimenHistologie(operations, specimen, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(specimen, '\'Specimen/\' + $this.id');
    };
}

/* ------------------------------ Specimen ---------------------------- */
group TransformSpecimenHistologie(source operations: BackboneElement, target tgt: Specimen, target composition: Composition, target section: BackboneElement) 
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Specimen/nNGM';

    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        };

        // Eingang des Tumormaterials in der Pathologie -> receivedTime
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2515'" then
        {
            values.value as value -> tgt.receivedTime = dateOp(value, 'dateTime');
        };

        // Eingangsnummer des Tumormaterials in der Pathologie -> accessionIdentifier:eingangsnummerPatho
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2516'" then
        {
            values.value as value -> tgt.accessionIdentifier as identifier, identifier.system = cast('http://uk-koeln.de/NamingSystem/nNGM/eingangPathoNummer', 'FHIR.uri'), identifier.value = value;
        };

        // Tumormaterial -> type.text
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2517'" then
        {
           values.value as value -> tgt.type as type, type.text = value, type.coding = create('Coding') as snomedGlobalPatientSet, snomedGlobalPatientSet.system = 'http://snomed.info/sct',
                                                                                        snomedGlobalPatientSet.version = 'http://snomed.info/sct/900000000000207008',
                                                                                        snomedGlobalPatientSet.code as code, code.extension as dataAbsentReason,
                                                                                        dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
                                                                                        dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');
        };
    };
}

/* ------------------------------ Check if DiagnosticReport is required ---------------------------- */
group CreateDiagnosticReportHistologie(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether resource should be created
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);

    operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'assessment_id'" -> bundle.entry as entry, entry.resource = create('DiagnosticReport') as diagnosticReport then 
    {
        operations then TransformDiagnosticReportHistologie(operations, diagnosticReport, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(diagnosticReport, '\'DiagnosticReport/\' + $this.id');    
    };
}

/* ------------------------------ DiagnosticReport ---------------------------- */
group TransformDiagnosticReportHistologie(source operations: BackboneElement, target tgt: DiagnosticReport, target composition: Composition, target section: BackboneElement)
{
    // Metadata
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/DiagnosticReport/nNGM/befund';

    // status
    operations -> tgt.status = 'final';

    // code
    operations -> tgt.code = cc('http://loinc.org', '50398-7'); 

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_nngm_befund'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as untersuchung, untersuchung.reference = evaluate(value, '\'DiagnosticReport/\' + $this');
        };

        // Reference Patient
        operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

        // Reference Specimen
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        {
            values.value as value -> tgt.specimen = create('Reference') as result, result.reference = evaluate(value, '\'Specimen/\' + $this');
        };

        // Reference Observations
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_nngm_histologie'" then
        {
            values.value as value -> tgt.result = create('Reference') as result, result.reference = evaluate(value, '\'Observation/\' + $this');
        };

        //Referenzen
        //Untersuchungs-ID
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            values.value as id -> tgt.identifier = create('Identifier') as befundNummer,
                                                          befundNummer.system = 'http://uk-koeln.de/NamingSystem/nNGM/befundnummer',
                                                          befundNummer.value = id;
        };
    };
}

/* ------------------------------ Observation ---------------------------- */
group CreateObservationHistologie(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    // Check whether observation should be created
    let resourceShouldBeCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceShouldBeCreated);

    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_1658'
                                or blockindex = 2 and groupindex = 0 and itemid = 'id_2469'
                                or blockindex = 2 and groupindex = 0 and itemid = 'id_2403'
                                or blockindex = 3 and groupindex = 0 and itemid = 'id_1286'
                                or blockindex = 3 and groupindex = 0 and itemid = 'id_1296'
                                or blockindex = 3 and groupindex = 0 and itemid = 'id_1294'
                                or blockindex = 3 and groupindex = 0 and itemid = 'id_1288'
                                or blockindex = 3 and groupindex = 0 and itemid = 'id_1292'
                                or blockindex = 3 and groupindex = 0 and itemid = 'id_2519'" then
    {
        operations then SetBooleanToTrue(operations, resourceShouldBeCreated);
    };

    // Create resource if bool set to true
    operations where "%resourceShouldBeCreated.valueBoolean = true" -> bundle.entry as entry, entry.resource = create('Observation') as observation then 
    {
        operations then TransformObservationHistologie(operations, observation, composition, section);
        operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');
    };
}

group TransformObservationHistologie(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement)
{
    // Resource information
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/histologie';

    // Patient reference
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Code
    operations -> tgt.code = cc('http://ncit.nci.nih.gov', 'C18000');

    // Status and Extension
    operations then TransformHistologieStatusAndExtension(operations, tgt);

    // Access data 
    operations.data as data then 
    {
        // ID + Composition insert
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_nngm_histologie'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // Klassifikation -> component:klassifikation.valueCodeableConcept
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_1658'" then
        {
            values.value as value -> tgt.component = create('CodeableConcept') as klassifikation,
                                                    klassifikation.code = cc('http://ncit.nci.nih.gov', 'C25161'),
                                                    klassifikation.valueCodeableConcept as vcc,
                                                    vcc.coding as coding,
                                                    coding.system = 'urn:oid:2.16.840.1.113883.6.43.1', 
                                                    coding.code = evaluate(value, '$this.split(\'\\t\').first()'),
                                                    coding.display = evaluate(value, '$this.split(\'\\t\').last()');
        };

        // Lokalisation -> bodysite
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2469'" then
        {
            values.value as value -> tgt.bodySite = create('CodeableConcept') as cc, cc.coding as coding, 
            coding.system = 'urn:oid:2.16.840.1.113883.6.43.1',
            coding.code = evaluate(value, '$this.split(\'\\t\').first()'),
            coding.display = evaluate(value, '$this.split(\'\\t\').last()');
        };

        // Grading
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2403'" then
        {
            values.value as value -> tgt.valueCodeableConcept = create('CodeableConcept') as cc, cc.coding as coding, 
            coding.system = 'urn:oid:2.16.840.1.113883.15.16',
            coding.code = evaluate(value, '$this.split(\'\\t\').first()'),
            coding.display = evaluate(value, '$this.split(\'\\t\').last()');
        };

        // Reference Specimen
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_specimen_nngm3'" then
        {
            values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        };

        //Wachstumsmuster bei Adenokarzinom lepidisch -> component:wachtumsmusterBeiAdenokarzinomLepidisch.valueQuantity
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1286'" then
        {
            values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then TMapPercentageValueHistologie(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8250/3');
            }; 
        };

        //Wachstumsmuster bei Adenokarzinom azinaer -> component:wachtumsmusterBeiAdenokarzinomAzinaer.valueQuantity
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1296'" then
        {
            values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then TMapPercentageValueHistologie(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8551/3');
            }; 
        };

        // 18: Wachstumsmuster bei Adenokarzinom papillaer -> component:wachtumsmusterBeiAdenokarzinomPapilaer.valueQuantity
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1294'" then
        {
            values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then TMapPercentageValueHistologie(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8260/3');
            }; 
        };
        
        //Wachstumsmuster bei Adenokarzinom mikropapill�r -> component:wachtumsmusterBeiAdenokarzinomMikropapilaer.valueQuantity
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1288'" then
        {
            values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then TMapPercentageValueHistologie(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8265/3');
            }; 
        };

        //Wachstumsmuster bei Adenokarzinom solide -> component:wachtumsmusterBeiAdenokarzinomSolide.valueQuantity
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1292'" then
        {
            values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then TMapPercentageValueHistologie(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8230/3');
            }; 
        };

        //Anteil an Siegelringzellkarzinomen -> component:AnteilSiegelringzellkarzinomen.valueQuantity
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2519'" then
        {
             values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then TMapPercentageValueHistologie(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8490/3');
            }; 
        };
    };
}

/* ------------------------------ Helper function ---------------------------- */
group TMapPercentageValueHistologie(source src: string, target tgt: Quantity)
{
    src -> tgt.value = src,
            tgt.system = 'http://unitsofmeasure.org',
            tgt.unit = 'percentage',
            tgt.code = '%';
}

group TransformHistologieStatusAndExtension(source operations: BackboneElement, target tgt: Observation)
{
    // Durchführung
    operations.data as data, data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2520'" then
    {
        values.value as value where "$this.value = 'in Bearbeitung'" then 
        {
            value -> tgt.status = 'registered';
        };
        values.value as value where "$this.value = 'abgeschlossen'" then 
        {
            value -> tgt.status = 'final';
        };
    };

    // Abschluss
    operations.data as data, data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2462'" then
    {
        values.value as value, value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as statusExtension then
        {
            value -> statusExtension.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/NNGM/statusAbschluss',value, value);
            value -> statusExtension.url = 'status';
        };
    };

    //Datum des Abschlusses
    operations.data as data, data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2521'" then
    {
        values.value as value, value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as datumExtension then
        {
            value -> datumExtension.valueDate = dateOp(value, 'date');
            value -> datumExtension.url = 'datum';
        };
    };
}