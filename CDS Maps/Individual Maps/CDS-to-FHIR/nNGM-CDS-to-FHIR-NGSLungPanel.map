/// version = 0.1
/// title = "NGS Lung Panel"

/*
TODO  
    - deal with repeatindex being off by +1
    - [Observation] adding bundle.entry.request is currently commented out due to a missing repeatindex in the CDS-Export which would result in an error for evaluate()
*/

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_NGSLungPanelFHIR" = nNGM_Mapping_NGSLungPanelFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/Specimen" as target
uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" as target
uses "http://hl7.org/fhir/StructureDefinition/Organization" as target
uses "http://hl7.org/fhir/StructureDefinition/Device" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target


group TransformBundleNGSLungPanel(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target diagnosticSection: BackboneElement, target index: RepeatIndex)
{
    operations -> diagnosticSection.section = create('BackboneElement') as section, section.title = 'ngs-lung-panel', section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'ngs-lung-panel') then
    {
        operations then CreateOrganizationNGSLungPanel(operations, bundle, composition, section);
        operations then CreateDeviceNGSLungPanel(operations, bundle, composition, section);

        // there may be more than 1 instance of Observation, thus an index is needed to reference (and create) the correct observation
        operations then CreateDiagnosticReportNGSLungPanel(operations, bundle, composition, section, index);
        operations then CreateObservationNGSPanel(operations, bundle, composition, section, index);
    };
}

/* -------------------------- DiagnosticReport ------------------------ */
group CreateDiagnosticReportNGSLungPanel(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    operations.data as data, data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('DiagnosticReport') as diagnosticreport then 
        {
            operations then TransformDiagnosticReportNGSLungPanel(operations, diagnosticreport, composition, section, index);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(diagnosticreport, '\'DiagnosticReport/\' + $this.id');
        };
    };          
}

/* -------------------------- DiagnosticReport ------------------------ */
group TransformDiagnosticReportNGSLungPanel(source operations: BackboneElement, target tgt: DiagnosticReport, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/DiagnosticReport/nNGM/befund';

    // status
    operations -> tgt.status = 'final';

    // code
    operations -> tgt.code = cc('http://loinc.org', '50398-7'); 
    
    // Subject 
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_nngm_befund2'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as diagnosticReport, diagnosticReport.reference = evaluate(value, '\'DiagnosticReport/\' + $this');
        };

        // Referenzen
        // Untersuchungs-ID
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            values.value as id -> tgt.identifier = create('identifier') as befundNummer,
                                                    befundNummer.system = 'http://uk-koeln.de/NamingSystem/nNGM/befundnummer',
                                                    befundNummer.value  = id;
        };

        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };

        // Observations
        operations then InitSectionIndex(operations, index); // (re)set index to 0
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_ngsPanel'" then
        {
            values.value as value where "unit.exists().not()" then // to not use the unit = _research uuid value element
            {
                values.value as value -> tgt.result = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
                operations then IncrementSectionIndex(operations, index);
            };
        };

        operations then InitSectionIndex(operations, index); // (re)set index to 0
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_ngsPanel_research'" then
        {
            values.value as value -> tgt.result = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
            operations then IncrementSectionIndex(operations, index);
        };

        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

/* ---------------------------- Organization -------------------------- */
group CreateOrganizationNGSLungPanel(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    operations.data as data, data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
    {
        operations -> bundle.entry as entry, entry.resource = create('Organization') as organization then 
        {
            operations then TransformOrganizationNGSLungPanel(operations, organization, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(organization, '\'Organization/\' + $this.id');
        };
    };
}

/* ---------------------------- Organization -------------------------- */
group TransformOrganizationNGSLungPanel(source operations: BackboneElement, target tgt: Organization, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://clinicalsite.org/fhir/StructureDefinition/organizationalunit';

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as organization, organization.reference = evaluate(value, '\'Organization/\' + $this');
        };

        /* ------------------------------ Netzwerkzentrum ---------------------------- */
        // Standort
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as name -> tgt.name = name;
        };
    };
}

/* ------------------------------ Device ------------------------------ */
group CreateDeviceNGSLungPanel(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement)
{
    let resourceIsCreated = create('Boolean');
    operations then SetBooleanToFalse(operations, resourceIsCreated);

    operations.data as data, data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1260'
                                                        or blockindex = 3 and groupindex = 0 and itemid = 'id_2603'
                                                        or blockindex = 3 and groupindex = 0 and itemid = 'id_2604'
                                                        or blockindex = 3 and groupindex = 0 and itemid = 'ngs_panel_panel_detail'" then
    {
        // if resource is not created yet: call transform
        operations where "%resourceIsCreated.valueBoolean = false" -> bundle.entry as entry, entry.resource = create('Device') as device then 
        {
            operations then TransformDeviceNGSLungPanel(operations, device, composition, section);
            operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(device, '\'Device/\' + $this.id');
            operations then SetBooleanToTrue(operations, resourceIsCreated);
        };
    };       
}

/* ------------------------------ Device ------------------------------ */
group TransformDeviceNGSLungPanel(source operations: BackboneElement, target tgt: Device, target composition: Composition, target section: BackboneElement)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Device/nNGM/ngs-panel';
    
    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_device'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as device, device.reference = evaluate(value, '\'Device/\' + $this');
        };
        
        //NGS Lung Panel Version
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1260'" then
        {
            values.value as value -> tgt.version = create('BackboneElement') as version then 
            {
                value -> version.value = value;
            };
        };
        //NGS Sequencer
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2603'" then
        {
            values.value as value -> tgt.deviceName = create('BackboneElement') as deviceName then 
            {
                value -> deviceName.type = 'other', deviceName.name = value;
            };
        };
        //Hersteller
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2604'" then
        {
            values.value as value -> tgt.manufacturer = value;
        };
        //Panel Detail
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'ngs_panel_panel_detail'" then
        {
            values.value as value -> tgt.note = create('Annotation') as annotation, annotation.text = value;
        };
    };
}

/* ----------------------- Observation NGS Panel ---------------------- */
group CreateObservationNGSPanel(source operations: BackboneElement, target bundle: Bundle, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    // since there can be more than 1 instance of the NGS Lung Panel we need an index to assign the corresponding data to each observation
    operations then InitSectionIndex(operations, index); // (re)set index to 0
    operations.data as data, data.values as values where "repeatindex = %index.sectionIndex and (blockindex = 4 and groupindex = 0 and itemid ='id_1159'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='id_1160'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='id_35'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='id_36'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='id_37'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='id_38'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='ngs_panel_reftranscript'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='ngs_panel_coverage'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='id_47'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='id_48')" then
    {
        operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationNGSLungPanel(operations, observation, composition, section, index);
            // operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');
        };
        operations then IncrementSectionIndex(operations, index);
    };

    operations then InitSectionIndex(operations, index); // (re)set index to 0
    operations.data as data, data.values as values where "repeatindex = %index.sectionIndex and (blockindex = 4 and groupindex = 0 and itemid ='id_41'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='id_42'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='id_43'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='id_44'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='id_45'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='id_46'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='id_39'
                                                                                                or blockindex = 4 and groupindex = 0 and itemid ='id_40')" then
    {
        operations -> bundle.entry as entry, entry.resource = create('Observation') as observation then
        {
            operations then TransformObservationNGSLungPanelResearch(operations, observation, composition, section, index);
            // operations -> entry.request as request, request.method = 'PUT', request.url = evaluate(observation, '\'Observation/\' + $this.id');
        };
        operations then IncrementSectionIndex(operations, index);
    };
}

/* ----------------------- Observation NGS Panel ---------------------- */
/* ---------------------- Panel-Gen ---------------------- */
group TransformObservationNGSLungPanel(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-panel';

    // Status and Extension
    operations then TransformNGSLungPanelStatusAndExtension(operations, tgt);

    //FISH category
    operations -> tgt.category as category then
    {
        operations -> category.coding = create ('Coding') as coding, coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
                                                                    coding.code = 'laboratory';                                                    
    };

    // Code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'NGS Panel'); 

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Method
    operations -> tgt.method = cc('http://ncit.nci.nih.gov','C101293');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_ngsPanel'" then
        {
            values.value as value where "unit.exists().not()" then // to not use the unit = _research uuid value element
            {
                values.value as value -> tgt.id = value;
                values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
            };
        };

        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2616'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as componentSop then
            {
                sop -> componentSop.valueString = sop;
                sop -> componentSop.code = cc('http://ncit.nci.nih.gov', 'C48443');
            };
        };

        /* ------------------- Panel-Gen -------------------- */
        //Date of Assessment
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_1160'" then
        {
            values.value as value -> tgt.effectiveDateTime = dateOp(value, 'date');
        };
        //Gen -> gene-studied
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_1159'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueCodeableConcept = cc('http://www.genenames.org',value);
                value -> component.code = cc('http://ncit.nci.nih.gov', '48018-6');
            };
        };
        //Exon -> exon
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_35'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };
        //HGVS c. (Mutation cDNA) -> dna-chg
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_36'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code = cc('http://loinc.org', '48004-6');
            };
        };
        //HGVS p. (Mutation Protein) -> amino-acid-chg
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_37'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code = cc('http://loinc.org', '48005-3');
            };
        };
        //Allelic fraction -> allelicfraction
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_38'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code = cc('http://ncit.nci.nih.gov', 'C154665');
                value -> component.valueQuantity = create('Quantity') as quantity,
                                                   quantity.value  = value,
                                                   quantity.unit   ='%',
                                                   quantity.system = 'http://unitsofmeasure.org',
                                                   quantity.code   = '%';
            };
        };
        //Referenztranskript -> referenztranskript
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='ngs_panel_reftranscript'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code = cc('http://loinc.org', '51958-7');
            };
        };
        //Coverage -> coverage
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='ngs_panel_coverage'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code = cc('http://loinc.org', '82121-5');
            };
        };
        //Biologische/molekulare Bewertung
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_47'" then
        {
            values.value as value -> tgt.interpretation = cc('http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation',value);
        };
        //Kommentar
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_48'" then
        {
            values.value as value -> tgt.note = create('Annotation') as annotation, annotation.text = value;
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };

        // Device
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_device'" then
        {
            values.value as value -> tgt.device = create('Reference') as device, device.reference = evaluate(value, '\'Device/\' + $this');
        };

        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

/* ---------------------- Panel-Gen Forschung ---------------------- */
group TransformObservationNGSLungPanelResearch(source operations: BackboneElement, target tgt: Observation, target composition: Composition, target section: BackboneElement, target index: RepeatIndex)
{
    operations -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-panel';

    // Status and Extension
    operations then TransformNGSLungPanelStatusAndExtension(operations, tgt);

    //FISH category
    operations -> tgt.category as category then
    {
        operations -> category.coding = create ('Coding') as coding, coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
                                                                    coding.code = 'laboratory';                                                    
    };

    // Code
    operations -> tgt.code = cc('http://uk-koeln.de/fhir/CodeSystem/nNGM/molpatho-obs-codes', 'NGS Panel'); 

    // Subject
    operations -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(composition, '\'Patient/\' + $this.subject.reference');

    // Method
    operations -> tgt.method = cc('http://ncit.nci.nih.gov','C101293');

    // Access data
    operations.data as data then
    {
        // ID + Composition insert
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'uuid_ngsPanel_research'" then
        {
            values.value as value -> tgt.id = value;
            values.value as value -> section.entry = create('Reference') as observation, observation.reference = evaluate(value, '\'Observation/\' + $this');
        };

        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2616'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as componentSop then
            {
                sop -> componentSop.valueString = sop;
                sop -> componentSop.code = cc('http://ncit.nci.nih.gov', 'C48443');
            };
        };

        /* ------------------- Panel-Gen Forschung -------------------- */
        //Genome build -> ref-sequence-assembly
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_41'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code = cc('http://loinc.org', '62374-4');
            };
        };
        //Chromosom -> chromosome
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_42'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger = cast(value, 'FHIR.integer');
                value -> component.code = cc('http://ncit.nci.nih.gov', 'C13202');
            };
        };

        //Position Start/Stop -> exact-start-end.low/high
        data.values as values where "%tgt.component.code.where(coding.code = '81254-5').exists().not()
                                    and blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and (itemid = 'id_43' or itemid = 'id_44')" then
        {
            values -> tgt.component = create('BackboneElement') as component, component.code = cc('http://loinc.org', '81254-5'), component.valueRange as valueRange then
            {
                //Position Start (1-basiert) -> exact-start-end.low
                operations.data as data, data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_43'" then
                {
                    values.value as value -> valueRange.low = create('Quantity') as qty, qty.value = value;
                };

                //Position Stop (1-basiert) -> exact-start-end.high
                operations.data as data, data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid = 'id_44'" then
                {
                    values.value as value -> valueRange.high = create('Quantity') as qty, qty.value = value;
                };
            };
        };

        //Ref allele (Nukleotid) -> ref-allele
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_45'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code = cc('http://loinc.org', '69547-8');
            };
        };
        //Alt allele (Nukleotid) -> alt-alllele
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_46'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code = cc('http://loinc.org', '69551-0');
            };
        };

        //Reads Ref Allel -> reads-ref-allele
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_39'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger = cast(value, 'FHIR.integer');
                value -> component.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'ReadsRefAllel');
            };
        };
        //Reads Alt Allel -> reads-alt-allele
        data.values as values where "blockindex = 4 and groupindex = 0 and repeatindex = %index.sectionIndex and itemid ='id_40'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger = cast(value, 'FHIR.integer');
                value -> component.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'ReadsAltAllel');
            };
        };

        // Referenzen
        // Specimen
        // data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'uuid_specimen_nngm4'" then
        // {
        //     values.value as value -> tgt.specimen = create('Reference') as specimen, specimen.reference = evaluate(value, '\'Specimen/\' + $this');
        // };

        // Device
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'uuid_device'" then
        {
            values.value as value -> tgt.device = create('Reference') as device, device.reference = evaluate(value, '\'Device/\' + $this');
        };

        // Organization
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'uuid_organizationalunit'" then
        {
            values.value as value -> tgt.performer = create('Reference') as performer, performer.reference = evaluate(value, '\'Organization/\' + $this');
        };
    };
}

group TransformNGSLungPanelStatusAndExtension(source operations: BackboneElement, target tgt: Observation)
{
    // Durchführung
    operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2520'" then
    {
        values.value as value where "$this.value = 'in Bearbeitung'" then 
        {
            value -> tgt.status = 'registered';
        };
        values.value as value where "$this.value = 'abgeschlossen'" then 
        {
            value -> tgt.status = 'final';
        };
    };
    
    // Abschluss
    operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2462'" then
    {
        values.value as value, value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as statusExtension then
        {
            value -> statusExtension.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/NNGM/statusAbschluss',value, value);
            value -> statusExtension.url = 'status';
        };
    };

    // Datum des Abschlusses
    operations.data as data, data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2521'" then
    {
        values.value as value, value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as datumExtension then
        {
            value -> datumExtension.valueDate = dateOp(value, 'date');
            value -> datumExtension.url = 'datum';
        };
    };
}

