/// version = 1.0
/// title = "nNGM: FHIR to CTS"

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_CdsToFhir_Master" = nNGM_Mapping_CdsToFhir_Master

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target


// Stammdaten
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_StammdatenFHIR"

// Antrag
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_BasisangabenFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_Anforderung"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_TNMFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_ResistenztestungFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_VorbefundFHIR"

// Befund
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_ImmunhistochemieFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_HistologieFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_MolekularphatologieFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_NGSLungPanelFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_FusionNGSFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_FastTrackFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SonstigeUntersuchungenFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_LiquidBiopsyFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nnGM_Mapping_BeurteilungFHIR"

// Therapien
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_StrahlentherapieFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SonstigeTherapieFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_OperationTherapieFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SystemischeTherapieFHIR"


group MapCDS(source src: CTS_Transport, target tgt: Bundle)
{
    // Bundle metadata
    src -> tgt.id = uuid();
    src -> tgt.type = 'collection';

    src then MapStammdaten(src, tgt);

    // TODO
    // src then MapAntrag(src, tgt);

    // TODO
    // src then MapBefund(src, tgt);

    // TODO
    src then MapTherapies(src, tgt);

    // TODO
    // src then MapTNM(src, tgt);
}

group MapStammdaten(source src: CTS_Transport, target tgt: Bundle)
{
    /* ------------------------------ Stammdaten ---------------------------- */
    src.operations as operations, operations where "crfid = 'SD' and type = 'save'" ->
        tgt.entry as entry,
        entry.resource = create('Bundle') as bundleStammdaten,
        bundleStammdaten.entry as entryStammdaten,
        entryStammdaten.resource = create('Composition') as compositionStammdaten then
    {
        /* ------------------------------ Bundle ---------------------------- */

        // Meta
        src -> bundleStammdaten.id = uuid();
        src -> bundleStammdaten.type = 'transaction';

        /* ------------------------------ Composition ---------------------------- */

        // Meta
        src -> compositionStammdaten.title = 'Stammdaten pseudonymisiert';
        src -> compositionStammdaten.id = uuid();
        src -> compositionStammdaten.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/Stammdaten-pseudonymisiert';
        src -> compositionStammdaten.status = cast('final', 'FHIR.code');

        // Request
        src -> entryStammdaten.request as request, request.method = 'PUT', request.url = evaluate(compositionStammdaten, '\'Composition/\' + $this.id');

        // Type
        src -> compositionStammdaten.type = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/compositions', 'stammdaten');

        // Category idat or not idat
        src -> compositionStammdaten.category = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/composition-category', 'psn');

        // Subject
        operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_nngm_patient'" then
        {
            src.patid as patid, values.value as value -> compositionStammdaten.subject = create('Reference') as subject, subject.reference = value, subject.identifier as identifier, identifier.system = 'http://uk-koeln.de/fhir/NamingSystem/nNGM/patient-identifier', identifier.value = patid;
        };

        // Date
        operations.timestamp as timestamp -> compositionStammdaten.date = dateOp(timestamp, 'dateTime');

        // Author 
        operations.editor as author -> compositionStammdaten.author = create('Reference') as subject, subject.reference = author; 
            
        /* ------------------------------ Resources ---------------------------- */
        operations then TransformBundleStammdaten(operations, bundleStammdaten, compositionStammdaten);
    };
}

// TODO
group MapTherapies(source src: CTS_Transport, target tgt: Bundle)
{
    let index = create('RepeatIndex');

    /* ------------------------------ Therapien ---------------------------- */
    src then InitMaxIndexTherapie(src, index); // Reset maxIndex
    
    src ->
    // Add a transaction bundle to the collection bundle
    tgt.entry as entry,
    entry.resource = create('Bundle') as bundleTherapie,
    // Add a composition to the transaction bundle
    bundleTherapie.entry as entryTherapie,
    entryTherapie.resource = create('Composition') as compositionTherapie then
    {

        let maxIndex = evaluate(index, '$this.maxIndex');
        /* ------------------------------ Bundle ---------------------------- */

        // Meta
        src -> bundleTherapie.id = uuid();
        src -> bundleTherapie.type = 'transaction';

        /* ------------------------------ Composition ---------------------------- */

        // Meta
        src -> compositionTherapie.id = uuid();
        src -> compositionTherapie.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/Therapie-pseudonymisiert';
        src -> compositionTherapie.type = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/compositions', 'therapie');

        // Category idat or psn depends on which type of patient/consent is in the bundle
        src -> compositionTherapie.category = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/composition-category', 'psn');

        // Title
        src -> compositionTherapie.title = 'Therapie pseudonymisiert';

        // Status
        src -> compositionTherapie.status = cast('final', 'FHIR.code');

        // Subject
        src.operations as operations, operations where "crfid = 'SD'", operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_nngm_patient'" then
        {
            src.patid as patid, values.value as value -> compositionTherapie.subject = create('Reference') as subject, subject.reference = value, subject.identifier as identifier, identifier.system = 'http://uk-koeln.de/fhir/NamingSystem/nNGM/patient-identifier', identifier.value = patid;
        };

        // Request
        src -> entryTherapie.request as request, request.method = 'PUT', request.url = evaluate(compositionTherapie, '\'Composition/\' + $this.id');

        // Date
        src.operations as operations, operations.timestamp as timestamp -> compositionTherapie.date = dateOp(timestamp, 'dateTime');

        // Author
        src.operations as operations, operations.editor as author where "%compositionTherapie.author.exists().not()" then 
        {
            operations.editor as author -> compositionTherapie.author = create('Reference') as subject, subject.reference = author; 
        };

        /* ------------------------------ Section ---------------------------- */
        
        src then InitFormIndex(src, index);

        // Operation
        src.operations as operations, operations where "%index.formIndex <= %maxIndex" -> compositionTherapie.section as compositionSection then
        {
            src.operations as operations,
                    operations where "crfid = 'OP' + %index.formIndex.toString() and type = 'save'" -> 
                    compositionTherapie.section = create('BackboneElement') as section,
                    section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'operation') then
            {
                operations then TransformBundleOperationTherapie(operations, bundleTherapie, compositionTherapie, section);
                operations -> section.entry = create('Reference') as reference,
                    reference.display = 'operation',
                    reference.identifier = create('Identifier') as formularId,
                    formularId.system = 'http://uk-koeln.de/NamingSystem/nNGM/formularId',
                    formularId.value = evaluate(index, '$this.formIndex.toString()');
            };
        

            // SystemischeTherapie
            src.operations as operations,
                    operations where "crfid = 'SY' + %index.formIndex.toString() and type = 'save'" -> 
                    compositionTherapie.section = create('BackboneElement') as section,
                    section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'systemischeTherapie') then
            {
                operations then TransformBundleSystemischeTherapie(operations, bundleTherapie, compositionTherapie, section);
                operations -> section.entry = create('Reference') as reference,
                    reference.display = 'systemischeTherapie',
                    reference.identifier = create('Identifier') as formularId,
                    formularId.system = 'http://uk-koeln.de/NamingSystem/nNGM/formularId',
                    formularId.value = evaluate(index, '$this.formIndex.toString()');
            };
                    
            // Strahlentherapie
            src.operations as operations,
                    operations where "crfid = 'ST' + %index.formIndex.toString() and type = 'save'" -> 
                    compositionTherapie.section = create('BackboneElement') as section,
                    section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'strahlentherapie') then
            {
                operations then TransformBundleStrahlentherapie(operations, bundleTherapie, compositionTherapie, section);
                operations -> section.entry = create('Reference') as reference,
                    reference.display = 'strahlentherapie',
                    reference.identifier = create('Identifier') as formularId,
                    formularId.system = 'http://uk-koeln.de/NamingSystem/nNGM/formularId',
                    formularId.value = evaluate(index, '$this.formIndex.toString()');
            };
            
            // Sonstige Therapie
            src.operations as operations,
                    operations where "crfid = 'ST' + %index.formIndex.toString() and type = 'save'" -> 
                    compositionTherapie.section = create('BackboneElement') as section,
                    section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'sonstigeTherapie') then
            {
                operations then TransformBundleSonstigeTherapie(operations, bundleTherapie, compositionTherapie, section);
                operations -> section.entry = create('Reference') as reference,
                    reference.display = 'sonstigeTherapie',
                    reference.identifier = create('Identifier') as formularId,
                    formularId.system = 'http://uk-koeln.de/NamingSystem/nNGM/formularId',
                    formularId.value = evaluate(index, '$this.formIndex.toString()');
            };
            
            src then IncrementFormIndex(src, index);
        };

        /* ------------------------------ Increment index ---------------------------- */
        src then InitMaxIndexTherapie(src, index); // Reset maxIndex
    };
}

// Helper functions
group InitCaseIndex(source src: CTS_Transport, target index: RepeatIndex)
{
    src -> index.caseIndex = 1;
}

group IncrementCaseIndex(source src: CTS_Transport, target index: RepeatIndex)
{
    src -> index.caseIndex = evaluate(index, '$this.caseIndex + 1');
}

group InitFormIndex(source src: CTS_Transport, target index: RepeatIndex)
{
    src -> index.formIndex = 1;
}

group IncrementFormIndex(source src: CTS_Transport, target index: RepeatIndex)
{
    src -> index.formIndex = evaluate(index, '$this.formIndex + 1');
}

group InitSectionIndex(source src: BackboneElement, target index: RepeatIndex)
{
    src -> index.sectionIndex = 0;
}

group IncrementSectionIndex(source src: BackboneElement, target index: RepeatIndex)
{
    src -> index.sectionIndex = evaluate(index, '$this.sectionIndex + 1');
}

/*  InitMaxIndex: 
    The main idea is to search through the CDS export and find the highest formIndex to let our loops run until this maximum.
    To get this maxIndex, we look at the crfid of each form (e.g. 1-AF1, 1-AF2,..2-AF1,..) and try to isolate the number after the letters.
    This could easily be done by using a regex like \d+-[A-Z]+ in combination with a FHIRPath function like replaceMatches() for all forms.
    But I wasn't able to get this function working. So I used the following workaround on each form, for instance for Anforderung (AF):
        1. get the starting position of '-AF', add the length of this string '-AF' to get the starting position of the formIndex
            if this formIndex is bigger than the current maxIndex, 
        2. assign it to the maxIndex via evaluate() (therefore we need to create the same substring again)
*/
group InitMaxIndexAntrag(source src: CTS_Transport, target index: RepeatIndex)
{
    // Create this let because we can't check on two parameters with the same name in FHIRPath
    let caseIndex = evaluate(index, '$this.caseIndex');

    // init maxIndex, then find maxFormIndex
    src -> index.maxIndex = 1;

    // Anforderung
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-AF') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-AF\') + \'-AF\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-AF\') + \'-AF\'.length()).toInteger()');
    };

    // TNM
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-TNM') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-TNM\') + \'-TNM\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-TNM\') + \'-TNM\'.length()).toInteger()');
    };

    // Resistenztestung
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-RT') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-RT\') + \'-RT\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-RT\') + \'-RT\'.length()).toInteger()');
    };

    // Vorbefund
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-VB') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-VB\') + \'-VB\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-VB\') + \'-VB\'.length()).toInteger()');
    };
}

group InitMaxIndexBefund(source src: CTS_Transport, target index: RepeatIndex)
{
    // Create this let because we can't check on two parameters with the same name in FHIRPath
    let caseIndex = evaluate(index, '$this.caseIndex');

    // init maxIndex, then find maxFormIndex
    src -> index.maxIndex = 1;

    // Histologie
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-HL') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-HL\') + \'-HL\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-HL\') + \'-HL\'.length()).toInteger()');
    };

    // Immunhistochemie
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-IHC') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-IHC\') + \'-IHC\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-IHC\') + \'-IHC\'.length()).toInteger()');
    };

    // NGS Lung Panel
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-LP') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-LP\') + \'-LP\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-LP\') + \'-LP\'.length()).toInteger()');
    };

    // Molekularpathologie
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-MP') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-MP\') + \'-MP\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-MP\') + \'-MP\'.length()).toInteger()');
    };

    // Fusion NGS
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-FS') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-FS\') + \'-FS\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-FS\') + \'-FS\'.length()).toInteger()');
    };

    // Fast Track
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-FT') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-FT\') + \'-FT\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-FT\') + \'-FT\'.length()).toInteger()');
    };

    // Sonstige Untersuchungen
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-SU') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-SU\') + \'-SU\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-SU\') + \'-SU\'.length()).toInteger()');
    };

    // Liquid Biopsy
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-LB') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-LB\') + \'-LB\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-LB\') + \'-LB\'.length()).toInteger()');
    };
}

group InitMaxIndexTherapie(source src: CTS_Transport, target index: RepeatIndex)
{
    // init maxIndex, then find maxFormIndex
    src -> index.maxIndex = 1;

    // Operation
    src.operations as operations, operations where "crfid.contains('OP') and crfid.contains('-').not() and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'OP\') + \'OP\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'OP\') + \'OP\'.length()).toInteger()');
    };

    // Systemische Therapie
    src.operations as operations, operations where "crfid.contains('SY') and crfid.contains('-').not() and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'SY\') + \'SY\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'SY\') + \'SY\'.length()).toInteger()');
    };

    // Strahlentherapie
    src.operations as operations, operations where "crfid.contains('ST') and crfid.contains('-').not() and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'ST\') + \'ST\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'ST\') + \'ST\'.length()).toInteger()');
    };

    // Sonstige Therapie
    src.operations as operations, operations where "crfid.contains('ST') and crfid.contains('-').not() and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'SO\') + \'SO\'.length()).toInteger() > %index.maxIndex"
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'SO\') + \'SO\'.length()).toInteger()');
    };
}


group InitFormIndex(source src: CTS_Transport, target index: RepeatIndex)
{
    src -> index.formIndex = 1;
}

group IncrementFormIndex(source src: CTS_Transport, target index: RepeatIndex)
{
    src -> index.formIndex = evaluate(index, '$this.formIndex + 1');
}

group InitSectionIndex(source src: BackboneElement, target index: RepeatIndex)
{
    src -> index.sectionIndex = 0;
}

group IncrementSectionIndex(source src: BackboneElement, target index: RepeatIndex)
{
    src -> index.sectionIndex = evaluate(index, '$this.sectionIndex + 1');
}

group SetBooleanToFalse(source src: BackboneElement, target boolean: Boolean)
{
    src -> boolean.valueBoolean = false;
}

group SetBooleanToTrue(source src: BackboneElement, target boolean: Boolean)
{
    src -> boolean.valueBoolean = true;
}