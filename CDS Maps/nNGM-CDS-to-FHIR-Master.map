/// version = 0.1
/// title = "nNGM: nNGMv09c - FHIR to CTS"

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_CdsToFhir_Master" = nNGM_Mapping_CdsToFhir_Master

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target


// Stammdaten
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_StammdatenFHIR"

// Antrag
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_BasisangabenFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_Anforderung"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_TNMFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_ResistenztestungFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_VorbefundFHIR"

// Befund
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_FastTrackFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_ImmunhistochemieFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_NGSLungPanelFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_LiquidBiopsyFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_FusionNGSFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_MolekularphatologieFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_HistologieFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SonstigeUntersuchungenFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nnGM_Mapping_BeurteilungFHIR"

// Therapien
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_StrahlentherapieFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SonstigeTherapieFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_OperationTherapieFHIR"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SystemischeTherapieFHIR"

group MapCDS(source src: CTS_Transport, target tgt: Bundle)
{
    // Bundle metadata
    src -> tgt.id = uuid();
    src -> tgt.type = 'collection';

    src then MapStammdaten(src, tgt);
    
    // TODO
    src then MapAntrag(src, tgt);

    // TODO
    //src then MapBefund(src, tgt);

    // TODO
    //src then MapTherapies(src, tgt);

    // TODO
    //src then TransformBundleTNM(src, tgt);
}

// TODO
group MapStammdaten(source src: CTS_Transport, target tgt: Bundle)
{
    /* ------------------------------ Stammdaten ---------------------------- */
    src.operations as operations, operations where "crfid = 'SD' and type = 'save'" -> 
        tgt.entry as entry,
        entry.resource = create('Bundle') as bundleStammdaten,
        bundleStammdaten.entry as entryStammdaten, 
        entryStammdaten.resource = create('Composition') as compositionStammdaten then
    {
        /* ------------------------------ Bundle ---------------------------- */

        // Meta
        src -> bundleStammdaten.id = uuid();
        src -> bundleStammdaten.type = 'transaction';

        /* ------------------------------ Composition ---------------------------- */

        // Meta
        src -> compositionStammdaten.title = 'Stammdaten';
        src -> compositionStammdaten.id = uuid();
        src -> compositionStammdaten.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/Stammdaten-pseudonymisiert';
        src -> compositionStammdaten.status = cast('final', 'FHIR.code');

        // Type
        src -> compositionStammdaten.type = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/compositions', 'stammdaten');

        // Category idat or not idat
        src -> compositionStammdaten.category = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/composition-category', 'idat');

        // Subject
        operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_nngm_patient'" then
        {
            src.patid as patid, values.value as value -> compositionStammdaten.subject = create('Reference') as subject, subject.reference = value, subject.identifier as identifier, identifier.system = 'http://uk-koeln.de/fhir/NamingSystem/nNGM/patient-identifier', identifier.value = patid;
        };

        // Date
        operations.timestamp as timestamp -> compositionStammdaten.date = dateOp(timestamp, 'dateTime');

        // Author TODO We need a practiioner which is not part of Stammdaten
        // operations.editor as author -> compositionStammdaten.author = create('Reference') as subject, subject.reference = author;
            
        /* ------------------------------ Resources ---------------------------- */
        operations then TransformBundleStammdaten(operations, bundleStammdaten, compositionStammdaten);
    };
}

// TODO
group MapAntrag(source src: CTS_Transport, target tgt: Bundle)
{
    let index = create('RepeatIndex');

    /* ------------------------------ Antrag ---------------------------- */
    src then InitCaseIndex(src, index); // Reset caseIndex
    src then InitMaxIndexAntrag(src, index); // Reset maxIndex

    src.operations as operations,
        // Execute as many times as there are Basisangaben
        operations where "crfid = %index.caseIndex.toString() + '-BA' and type = 'save'" ->
        // Add a transaction bundle to the collection bundle
        tgt.entry as entry,
        entry.resource = create('Bundle') as bundleAntrag,
        // Add a composition to the transaction bundle
        bundleAntrag.entry as entryAntrag, 
        entryAntrag.resource = create('Composition') as compositionAntrag then
    {
        // Create this let because we can't check on two parameters with the same name in FHIRPath
        let caseIndex = evaluate(index, '$this.caseIndex');
        let maxIndex = evaluate(index, '$this.maxIndex');

        /* ------------------------------ Bundle ---------------------------- */

        // Meta
        src -> bundleAntrag.id = uuid(); 
        src -> bundleAntrag.type = 'transaction';

        /* ------------------------------ Composition ---------------------------- */

        // Meta
        src -> compositionAntrag.title = 'Antrag';
        src -> compositionAntrag.id = uuid();
        src -> compositionAntrag.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/Antrag-pseudonymisiert';
        src -> compositionAntrag.status = cast('final', 'FHIR.code');

        // Identifier i.e. Case ID
        src -> compositionAntrag.identifier = create('Identifier') as FallIdentifier,
                                                    FallIdentifier.system = 'http://uk-koeln.de/NamingSystem/nNGM/fallnummer',
                                                    FallIdentifier.value = evaluate(index, '$this.caseIndex.toString()');

        // Type check for type of content
        src -> compositionAntrag.type = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/compositions', 'antrag');

        // Category idat or not idat
        src -> compositionAntrag.category = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/composition-category', 'idat');

        // Subject
        src.operations as operations, operations where "crfid = 'SD'", operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_nngm_patient'" then
        {
            src.patid as patid, values.value as value -> compositionAntrag.subject = create('Reference') as subject, subject.reference = value, subject.identifier as identifier, identifier.system = 'http://uk-koeln.de/fhir/NamingSystem/nNGM/patient-identifier', identifier.value = patid;
        };

        // Date
        operations.timestamp as timestamp -> compositionAntrag.date = dateOp(timestamp, 'dateTime');

        // Author
        operations.editor as author -> compositionAntrag.author = create('Reference') as subject, subject.reference = author;
            
        /* ------------------------------ Resources ---------------------------- */

        // Basisangaben (Antrag.basisangaben)
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-BA' and type = 'save'" then
        {
            src then TransformBundleBasisangaben(operations, bundleAntrag, compositionAntrag);
        };

        // Biopsie(n) (Antrag.biopsie)
        // create 1 biopsieSection per biopsie (in the CDS)
        src then InitFormIndex(src, index); // the formIndex indicates which biopsie (an thus which biopsieSection) should be created
        src.operations as operations, operations where "%index.formIndex <= %maxIndex" -> compositionAntrag.section = create('BackboneElement') as biopsieSection then
        {
            /* ------------------------------ Section ---------------------------- */
            // Meta
            src -> biopsieSection.title = 'biopsy';
            src -> biopsieSection.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections','biopsie');
            src -> biopsieSection.entry = create('Reference') as reference, reference.identifier = create('Identifier') as formularId,
                                                formularId.system = 'http://uk-koeln.de/NamingSystem/nNGM/formularId',
                                                formularId.value = evaluate(index, '$this.formIndex.toString()');
        
            /* ------------------------------ Resources ---------------------------- */
            // Anforderung (Antrag.biopsie.anforderung)
            src.operations as operations, operations where "crfid = %caseIndex.toString() + '-AF' + %index.formIndex.toString() and type = 'save'" then
            {
                src then TransformBundleAnforderung(operations, bundleAntrag, compositionAntrag, biopsieSection);
            };
                
            // TNM (Antrag.biopsie.tnm)
            src.operations as operations, operations where "crfid = %caseIndex.toString() + '-TNM' + %index.formIndex.toString() and type = 'save'" then
            { 
                src then TransformBundleTNM(operations, bundleAntrag, compositionAntrag, biopsieSection);
            };
 
            // Resistenztestung (Antrag.biopsie.resistenztestung)
            src.operations as operations, operations where "crfid = %caseIndex.toString() + '-RT' + %index.formIndex.toString() and type = 'save'" then
            {
                src then TransformBundleResistenztestung(operations, bundleAntrag, compositionAntrag, biopsieSection);
            };                
            
            // Vorbefund (Antrag.biopsie.vorbefund)
            src.operations as operations, operations where "crfid = %caseIndex.toString() + '-VB' + %index.formIndex.toString() and type = 'save'" then
            {
                src then TransformBundleVorbefundFHIR(operations, bundleAntrag, compositionAntrag, biopsieSection, index);
            }; 

            src then IncrementFormIndex(src, index);
        };

        /* ------------------------------ Increment index ---------------------------- */
        src then IncrementCaseIndex(src, index);
        src then InitMaxIndexAntrag(src, index); // Reset maxIndex
        //src -> tgt.id = evaluate(index, '$this.formIndex');
    };
}

// TODO
group MapBefund(source src: CTS_Transport, target tgt: Bundle)
{
    let index = create('RepeatIndex');

    /* ------------------------------ Befund ---------------------------- */
    src then InitCaseIndex(src, index); // Reset caseIndex
    src then InitMaxIndexBefund(src, index); // Reset maxIndex

    src.operations as operations,
    // Execute as many times as there are Basisangaben
    operations where "crfid = %index.caseIndex.toString() + '-BA' and type = 'save'" -> 
    // Add a transaction bundle to the collection bundle
    tgt.entry as entry,
    entry.resource = create('Bundle') as bundleBefund,
    // Add a composition to the transaction bundle
    bundleBefund.entry as entryBefund, 
    entryBefund.resource = create('Composition') as compositionBefund then
    {
        // Create this let because we can't check on two parameters with the same name in FHIRPath
        let caseIndex = evaluate(index, '$this.caseIndex');
        let maxIndex = evaluate(index, '$this.maxIndex');

        /* ------------------------------ Bundle ---------------------------- */

        // Meta
        src -> bundleBefund.id = uuid();
        src -> bundleBefund.type = 'transaction';


        /* ------------------------------ Composition ---------------------------- */

        // Meta
        src -> compositionBefund.id = uuid();
        src -> compositionBefund.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/molpatho-befund-pseudonymisiert';
        src -> compositionBefund.type = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/compositions', 'molpatho-befund');

        // Category idat or psn depends on which type of patient/consent is in the bundle
        src -> compositionBefund.category = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/composition-category', 'psn');

        // Title
        src -> compositionBefund.title = 'Molpatho-befund pseudonymisiert';

        // Identifier i.e. Case ID
        src -> compositionBefund.identifier as identifier, identifier.value = evaluate(index, '$this.caseIndex.toString()');

        // Status
        src -> compositionBefund.status = cast('final', 'FHIR.code');

        // Subject
        src.operations as operations, operations where "crfid = 'SD'", operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_nngm_patient'" then
        {
            src.patid as patid, values.value as value -> compositionBefund.subject = create('Reference') as subject, subject.reference = value, subject.identifier as identifier, identifier.system = 'http://uk-koeln.de/fhir/NamingSystem/nNGM/patient-identifier', identifier.value = patid;
        };
        
        // Date
        operations.timestamp as timestamp -> compositionBefund.date = dateOp(timestamp, 'dateTime');

        // Author
        operations.editor as author -> compositionBefund.author = create('Reference') as subject, subject.reference = author;
            
        /* ------------------------------ Resources ---------------------------- */

        // Histologie
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-HL' + %index.formIndex.toString() and type = 'save'" then
        {
            // src then TransformBundleHistologie(operations, bundleBefund, compositionBefund);
            src then IncrementFormIndex(src, index);
        };

        // Immunhistochemie
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-IHC' + %index.formIndex.toString() and type = 'save'" then
        {
            src then TransformBundleImmunhistochemie(operations, bundleBefund, compositionBefund);
            src then IncrementFormIndex(src, index);
        };

        // NGS Lung Panel
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-LP' + %index.formIndex.toString() and type = 'save'" then
        {
            src then TransformBundleNGSLungPanel(operations, bundleBefund, compositionBefund, index);
            src then IncrementFormIndex(src, index);
        };

        // Molekularpathologie
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-MP' + %index.formIndex.toString() and type = 'save'" then
        {
            // src then TransformBundleMolekularpathologie(operations, bundleBefund, compositionBefund);
            src then IncrementFormIndex(src, index);
        };

        // Fusion NGS
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-FS' + %index.formIndex.toString() and type = 'save'" then
        {
            src then TransformBundleFusionNGS(operations, bundleBefund, compositionBefund, index);
            src then IncrementFormIndex(src, index);
        };

        // Fast Track
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-FT' + %index.formIndex.toString() and type = 'save'" then
        {
            src then TransformBundleFastTrack(operations, bundleBefund, compositionBefund);
            src then IncrementFormIndex(src, index);
        };
        
        // Sonstige Untersuchungen
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-SU' + %index.formIndex.toString() and type = 'save'" then
        {
            src then TransformBundleSonstigeUntersuchungen(operations, bundleBefund, compositionBefund, index);
            src then IncrementFormIndex(src, index);
        };

        src then InitFormIndex(src, index);
        src.operations as operations, operations where "%index.formIndex <= %maxIndex" then
        {
            src.operations as operations, operations where "crfid = %caseIndex.toString() + '-LB' + %index.formIndex.toString() and type = 'save'" then
            {
                src then TransformBundleLiquidBiopsy(operations, bundleBefund, compositionBefund, index);
            };                
            src then IncrementFormIndex(src, index);
        };
        
        // Beurteilung
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-BU' and type = 'save'" then
        {
            src then TransformBundleBeurteilung(operations, bundleBefund, compositionBefund, index);
        };

        /* ------------------------------ Increment index ---------------------------- */
        src then IncrementCaseIndex(src, index);
        src then InitMaxIndexBefund(src, index); // Reset maxIndex
        //src -> tgt.id = evaluate(index, '$this.formIndex');
    };
}

// TODO
group MapTherapies(source src: CTS_Transport, target tgt: Bundle)
{
    let index = create('RepeatIndex');

    /* ------------------------------ Therapien ---------------------------- */
    src then InitCaseIndex(src, index); // Reset index    
    src ->
    // Add a transaction bundle to the collection bundle
    tgt.entry as entry,
    entry.resource = create('Bundle') as bundleTherapie,
    // Add a composition to the transaction bundle
    bundleTherapie.entry as entryTherapie, 
    entryTherapie.resource = create('Composition') as compositionTherapie then
    {
        /* ------------------------------ Bundle ---------------------------- */

        // Meta
        src -> bundleTherapie.id = uuid();
        src -> bundleTherapie.type = 'transaction';


        /* ------------------------------ Composition ---------------------------- */

        // Meta
        src -> compositionTherapie.id = uuid();
        src -> compositionTherapie.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/Therapie-pseudonymisiert';
        src -> compositionTherapie.type = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/compositions', 'therapie');

        // Category idat or psn depends on which type of patient/consent is in the bundle
        src -> compositionTherapie.category = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/composition-category', 'psn');

        // Title
        src -> compositionTherapie.title = 'Therapie pseudonymisiert';

        // Identifier i.e. Case ID
        src -> compositionTherapie.identifier as identifier, identifier.value = 1;

        // Status
        src -> compositionTherapie.status = cast('final', 'FHIR.code');

        // Subject
        src.operations as operations, operations where "crfid = 'SD'", operations.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_nngm_patient'" then
        {
            src.patid as patid, values.value as value -> compositionTherapie.subject = create('Reference') as subject, subject.reference = value, subject.identifier as identifier, identifier.system = 'http://uk-koeln.de/fhir/NamingSystem/nNGM/patient-identifier', identifier.value = patid;
        };

        // TODO: which timestamp and author to use? the one of Stammdaten or the first Basisangaben?
        // Date
        // operations.timestamp as timestamp -> compositionTherapie.date = dateOp(timestamp, 'dateTime');

        // Author
        // operations.editor as author -> compositionTherapie.author = create('Reference') as subject, subject.reference = author;
        
        /* ------------------------------ Section ---------------------------- */

        src -> compositionTherapie.section = create('BackboneElement') as sectionTherapie, sectionTherapie.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'therapie') then
        {
            /* ------------------------------ Therapie ---------------------------- */
        
            // Operation
            src then InitFormIndex(src, index);
            src.operations as operations, operations where "crfid = 'OP' + %index.formIndex.toString() and type = 'save'" then
            {
                // src then TransformBundleOperationTherapie(operations, bundleTherapie, compositionTherapie, sectionTherapie);
                src then IncrementFormIndex(src, index);
            };

            // SystemischeTherapie
            src then InitFormIndex(src, index);
            src.operations as operations, operations where "crfid = 'SY' + %index.formIndex.toString() and type = 'save'" then
            {
                src then TransformBundleSystemischeTherapie(operations, bundleTherapie, compositionTherapie, sectionTherapie);
                src then IncrementFormIndex(src, index);
            };
        };  
    };
}


// Helper functions
group InitCaseIndex(source src: CTS_Transport, target index: RepeatIndex)
{
    src -> index.caseIndex = 1;
}

group IncrementCaseIndex(source src: CTS_Transport, target index: RepeatIndex)
{
    src -> index.caseIndex = evaluate(index, '$this.caseIndex + 1');
}

group InitMaxIndexAntrag(source src: CTS_Transport, target index: RepeatIndex)
{
    // Create this let because we can't check on two parameters with the same name in FHIRPath
    let caseIndex = evaluate(index, '$this.caseIndex');

    // init maxIndex, then find maxFormIndex
    src -> index.maxIndex = 1;

    // Anforderung
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-AF') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-AF\') + \'-AF\'.length()).toInteger() > %index.maxIndex" 
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-AF\') + \'-AF\'.length()).toInteger()');
    };

    // TNM
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-TNM') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-TNM\') + \'-TNM\'.length()).toInteger() > %index.maxIndex" 
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-TNM\') + \'-TNM\'.length()).toInteger()');
    };

    // Resistenztestung
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-RT') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-RT\') + \'-RT\'.length()).toInteger() > %index.maxIndex" 
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-RT\') + \'-RT\'.length()).toInteger()');
    };

    // Vorbefund
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-VB') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-VB\') + \'-VB\'.length()).toInteger() > %index.maxIndex" 
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-VB\') + \'-VB\'.length()).toInteger()');
    };
}

group InitMaxIndexBefund(source src: CTS_Transport, target index: RepeatIndex)
{
    // Create this let because we can't check on two parameters with the same name in FHIRPath
    let caseIndex = evaluate(index, '$this.caseIndex');

    // init maxIndex, then find maxFormIndex
    src -> index.maxIndex = 1;

    // Histologie
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-HL') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-HL\') + \'-HL\'.length()).toInteger() > %index.maxIndex" 
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-HL\') + \'-HL\'.length()).toInteger()');
    };

    // Immunhistochemie
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-IHC') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-IHC\') + \'-IHC\'.length()).toInteger() > %index.maxIndex" 
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-IHC\') + \'-IHC\'.length()).toInteger()');
    };
    
    // NGS Lung Panel
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-LP') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-LP\') + \'-LP\'.length()).toInteger() > %index.maxIndex" 
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-LP\') + \'-LP\'.length()).toInteger()');
    };

    // Molekularpathologie
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-MP') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-MP\') + \'-MP\'.length()).toInteger() > %index.maxIndex" 
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-MP\') + \'-MP\'.length()).toInteger()');
    };

    // Fusion NGS
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-FS') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-FS\') + \'-FS\'.length()).toInteger() > %index.maxIndex" 
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-FS\') + \'-FS\'.length()).toInteger()');
    };

    // Fast Track
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-FT') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-FT\') + \'-FT\'.length()).toInteger() > %index.maxIndex" 
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-FT\') + \'-FT\'.length()).toInteger()');
    };

    // Sonstige Untersuchungen
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-SU') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-SU\') + \'-SU\'.length()).toInteger() > %index.maxIndex" 
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-SU\') + \'-SU\'.length()).toInteger()');
    };

    // Liquid Biopsy
    src.operations as operations, operations where "crfid.contains(%caseIndex.toString() + '-LB') and type = 'save'" then
    {
        // isolate formIndex from crfid, if this formIndex is bigger than maxIndex: assign it to maxIndex
        operations where "crfid.substring($this.crfid.indexOf(\'-LB\') + \'-LB\'.length()).toInteger() > %index.maxIndex" 
            -> index.maxIndex = evaluate(operations, '$this.crfid.substring($this.crfid.indexOf(\'-LB\') + \'-LB\'.length()).toInteger()');
    };
}


group InitFormIndex(source src: CTS_Transport, target index: RepeatIndex)
{
    src -> index.formIndex = 1;
}

group IncrementFormIndex(source src: CTS_Transport, target index: RepeatIndex)
{
    src -> index.formIndex = evaluate(index, '$this.formIndex + 1');
}

group InitSectionIndex(source src: BackboneElement, target index: RepeatIndex)
{
    src -> index.sectionIndex = 0;
}

group IncrementSectionIndex(source src: BackboneElement, target index: RepeatIndex)
{
    src -> index.sectionIndex = evaluate(index, '$this.sectionIndex + 1');
}

group SetBooleanToFalse(source src: BackboneElement, target boolean: Boolean)
{
    src -> boolean.valueBoolean = false;
}

group SetBooleanToTrue(source src: BackboneElement, target boolean: Boolean)
{
    src -> boolean.valueBoolean = true;
}