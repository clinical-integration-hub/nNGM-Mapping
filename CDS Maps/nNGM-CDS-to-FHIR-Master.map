/// version = 0.1
/// title = "nNGM: nNGMv09c - FHIR to CTS"

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_CdsToFhir_Master" = nNGM_Mapping_CdsToFhir_Master

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_StammdatenFHIR"


// Antrag
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_BasisangabenFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_Anforderung"
/*
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_ResistenztestungFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_TNMFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_VorbefundFHIR"

// Befund
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_FastTrackFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_HistologieFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_ImmunhistochemieFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_NGSLungPanelFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_LiquidBiopsyFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_FusionNGSFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_MolekularphatologieFHIR"
*/
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SonstigeUntersuchungenFHIR"

/*
imports "http://uk-koeln.de/fhir/StructureMap/nnGM_Mapping_BeurteilungFHIR"

// Operation
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_StrahlentherapieFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SonstigeTherapieFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_OperationTherapieFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SystemischeTherapieFHIR"
*/

group MapCDS(source src: CTS_Transport, target tgt: Bundle)
{
    // 1. 1 Collection Bundle (Patid) von n Document (Übergangsweise Transaction) Bundles erzeugen -> Wie wird das aufgespaltet?
    //      A: Jedes entry aus jedem Bundle vom CDS als Transaction an den Vonk schicken
    //      A: Persist Option am Admin/transform endpoint integrieren, der alles abspeichert
    // 2. Document Bundle von Vonk ausführen lassen oder Document bundle in Transaction Bundle überführen
    // 3. Patid in Composition subject
    // TODO Case ID in Composition speichern

    let index = create('RepeatIndex');

    // Bundle metadata
    src -> tgt.id = uuid();
    src -> tgt.type = 'collection';

    src then InitCaseIndex(src, index);

    //src.operations as operations -> tgt.entry as entry, entry.resource = create('Bundle') as bundle, bundle.id = uuid();

    // TODO
    // Stammdaten (Only present once)
    //src then TransformBundleStammdaten(src, tgt);
    
    // TODO
    // Every top level TNM TODO
    //src then TransformBundleTNM(src, tgt);

    // What to we want here? 
    // We want 3 bundles of bundles with 3 different compositions with the caseid in the identifier in the antrag and befund compositions i.e. let the loop run 3 times both for 
    
    /* ------------------------------ Antrag ---------------------------- */
    src then InitCaseIndex(src, index); // Reset index
    src.operations as operations,
        // Execute as many times as there are Basisangaben
        operations where "crfid = %index.caseIndex.toString() + '-BA' and type = 'save'" ->
        // Add a transaction bundle to the collection bundle
        tgt.entry as entry,
        entry.resource = create('Bundle') as bundleAntrag,
        // Add a composition to the transaction bundle
        bundleAntrag.entry as entryAntrag, 
        entryAntrag.resource = create('Composition') as compositionAntrag then
    {
        // Create this let because we can't check on two parameters with the same name in FHIRPath
        let caseIndex = evaluate(index, '$this.caseIndex');

        /* ------------------------------ Bundle ---------------------------- */

        // Meta
        src -> bundleAntrag.id = uuid();
        src -> bundleAntrag.type = 'transaction';


        /* ------------------------------ Composition ---------------------------- */

        // Meta
        src -> compositionAntrag.title = 'Anmeldung';
        src -> compositionAntrag.id = uuid();
        src -> compositionAntrag.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/Anmeldung';
        src -> compositionAntrag.status = cast('final', 'FHIR.code');

        // Identifier i.e. Case ID
        src -> compositionAntrag.identifier as identifier, identifier.value = evaluate(index, '$this.caseIndex.toString()');

        // Type check for type of content
        src -> compositionAntrag.type = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/compositions', 'anmeldung');

        // Category idat or not idat
        src -> compositionAntrag.category = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/composition-category', 'idat');

        // Subject
        src.operations as ops, ops where "crfid = 'SD'", ops.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_nngm_patient'", values.value as value  -> compositionAntrag.subject = create('Reference') as subject, subject.reference = value;

        // Date
        operations.timestamp as timestamp -> compositionAntrag.date = dateOp(timestamp, 'dateTime');

        // Author
        operations.editor as author -> compositionAntrag.author = create('Reference') as subject, subject.reference = author;
            
        /* ------------------------------ Resources ---------------------------- */

        // Basisangaben
        // src.operations as operations, operations where "crfid = %caseIndex.toString() + '-BA' and type = 'save'" then
        // {
        //     src then TransformBundleBasisangaben(operations, bundleAntrag, compositionAntrag);
        // };

        // Anforderung
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-AF' + %index.formIndex.toString() and type = 'save'" then
        {
            src then TransformBundleAnforderung(operations, bundleAntrag, compositionAntrag);
            src then IncrementFormIndex(src, index);
        };

        // TNM
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-TNM' + %index.formIndex.toString() and type = 'save'" then
        {
            //src then TransformBundleAnforderung(operations, bundleAntrag, compositionAntrag, index);
            src then IncrementFormIndex(src, index);
        };

        // Resistenztestung
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-RT' + %index.formIndex.toString() and type = 'save'" then
        {
            //src then TransformBundleAnforderung(operations, bundleAntrag, compositionAntrag, index);
            src then IncrementFormIndex(src, index);
        };

        // Vorbefund
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-AF' + %index.formIndex.toString() and type = 'save'" then
        {
            //src then TransformBundleAnforderung(operations, bundleAntrag, compositionAntrag, index);
            src then IncrementFormIndex(src, index);
        };

        /* ------------------------------ Increment index ---------------------------- */
        src then IncrementCaseIndex(src, index);
        //src -> tgt.id = evaluate(index, '$this.formIndex');
    };
    

    /* ------------------------------ Befund ---------------------------- */
    src then InitCaseIndex(src, index); // Reset index
    src.operations as operations,
    // Execute as many times as there are Basisangaben
    operations where "crfid = %index.caseIndex.toString() + '-BA' and type = 'save'" -> 
    // Add a transaction bundle to the collection bundle
    tgt.entry as entry,
    entry.resource = create('Bundle') as bundleBefund,
    // Add a composition to the transaction bundle
    bundleBefund.entry as entryBefund, 
    entryBefund.resource = create('Composition') as compositionBefund then
    {
        // Create this let because we can't check on two parameters with the same name in FHIRPath
        let caseIndex = evaluate(index, '$this.caseIndex');

        /* ------------------------------ Bundle ---------------------------- */

        // Meta
        src -> bundleBefund.id = uuid();
        src -> bundleBefund.type = 'transaction';


        /* ------------------------------ Composition ---------------------------- */

        // Meta
        src -> compositionBefund.id = uuid();
        src -> compositionBefund.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/molpatho-befund-pseudonymisiert';
        src -> compositionBefund.type = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/compositions', 'molpatho-befund');

        // Category idat or psn depends on which type of patient/consent is in the bundle
        src -> compositionBefund.category = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/composition-category', 'psn');

        // Title
        src -> compositionBefund.title = 'Molpatho-befund pseudonymisiert';

        // Identifier i.e. Case ID
        src -> compositionBefund.identifier as identifier, identifier.value = evaluate(index, '$this.caseIndex.toString()');

        // Status
        src -> compositionBefund.status = cast('final', 'FHIR.code');

        // Subject
        src.operations as ops, ops where "crfid = 'SD'", ops.data as data, data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'uuid_nngm_patient'", values.value as value  -> compositionBefund.subject = create('Reference') as subject, subject.reference = value;

        // Date
        operations.timestamp as timestamp -> compositionBefund.date = dateOp(timestamp, 'dateTime');

        // Author
        operations.editor as author -> compositionBefund.author = create('Reference') as subject, subject.reference = author;
            
        /* ------------------------------ Resources ---------------------------- */

        // Histologie
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-AF' + %index.formIndex.toString() and type = 'save'" then
        {
            //src then TransformBundleAnforderung(operations, bundleBefund, compositionAntrag, index);
            src then IncrementFormIndex(src, index);
        };

        // Immunhistochemie
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-TNM' + %index.formIndex.toString() and type = 'save'" then
        {
            //src then TransformBundleAnforderung(operations, bundleBefund, compositionAntrag, index);
            src then IncrementFormIndex(src, index);
        };

        // NGS Lung Panel
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-RT' + %index.formIndex.toString() and type = 'save'" then
        {
            //src then TransformBundleAnforderung(operations, bundleBefund, compositionAntrag, index);
            src then IncrementFormIndex(src, index);
        };

        // Molekularpathologie
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-AF' + %index.formIndex.toString() and type = 'save'" then
        {
            //src then TransformBundleAnforderung(operations, bundleBefund, compositionAntrag, index);
            src then IncrementFormIndex(src, index);
        };

        // Fusion NGS
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-AF' + %index.formIndex.toString() and type = 'save'" then
        {
            //src then TransformBundleAnforderung(operations, bundleBefund, compositionAntrag, index);
            src then IncrementFormIndex(src, index);
        };

        // Fast Track
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-AF' + %index.formIndex.toString() and type = 'save'" then
        {
            //src then TransformBundleAnforderung(operations, bundleBefund, compositionAntrag, index);
            src then IncrementFormIndex(src, index);
        };
        
        // Sonstige Untersuchungen
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-AF' + %index.formIndex.toString() and type = 'save'" then
        {
            //src then TransformBundleAnforderung(operations, bundleBefund, compositionAntrag, index);
            src then IncrementFormIndex(src, index);
        };

        // Liquid Biopsy
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-AF' + %index.formIndex.toString() and type = 'save'" then
        {
            //src then TransformBundleAnforderung(operations, bundleBefund, compositionAntrag, index);
            src then IncrementFormIndex(src, index);
        };

        // Beurteilung
        src then InitFormIndex(src, index);
        src.operations as operations, operations where "crfid = %caseIndex.toString() + '-AF' + %index.formIndex.toString() and type = 'save'" then
        {
            //src then TransformBundleAnforderung(operations, bundleBefund, compositionAntrag, index);
            src then IncrementFormIndex(src, index);
        };

        /* ------------------------------ Increment index ---------------------------- */
        src then IncrementCaseIndex(src, index);
        //src -> tgt.id = evaluate(index, '$this.formIndex');
    };

    /* ------------------------------ Therapie ---------------------------- */
    /*
    src then TransformBundleStrahlentherapie(src, tgt);
    src then TransformBundleSonstigeTherapie(src, tgt);
    src then TransformBundleOperationTherapie(src, tgt);
    src then TransformBundleSystemischeTherapie(src, tgt);
    */
}

group InitCaseIndex(source src: CTS_Transport, target index: RepeatIndex)
{
    src -> index.caseIndex = 1;
}

group IncrementCaseIndex(source src: CTS_Transport, target index: RepeatIndex)
{
    src -> index.caseIndex = evaluate(index, '$this.caseIndex + 1');
}

group InitFormIndex(source src: CTS_Transport, target index: RepeatIndex)
{
    src -> index.formIndex = 1;
}

group IncrementFormIndex(source src: CTS_Transport, target index: RepeatIndex)
{
    src -> index.formIndex = evaluate(index, '$this.formIndex + 1');
}

group InitSectionIndex(source src: BackboneElement, target index: RepeatIndex)
{
    src -> index.sectionIndex = 0;
}

group IncrementSectionIndex(source src: BackboneElement, target index: RepeatIndex)
{
    src -> index.sectionIndex = evaluate(index, '$this.sectionIndex + 1');
}

group SetBooleanToFalse(source src: BackboneElement, target boolean: Boolean)
{
    src -> boolean.valueBoolean = false;
}

group SetBooleanToTrue(source src: BackboneElement, target boolean: Boolean)
{
    src -> boolean.valueBoolean = true;
}