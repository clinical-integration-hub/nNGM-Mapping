/// version = 0.1
/// title = "nNGM: nNGMv09c - FHIR to CTS"

map "http://uk-koeln.de/fhir/StructureMap/nNGM_FHIR_to_CDS" = nNGM_FHIR_to_CDS

uses "http://hl7.org/fhir/StructureDefinition/Bundle" as source
uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as target

// Stammdaten
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_StammdatenCDS"

// Antrag
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_BasisangabenCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_AnforderungCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_TNMCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_ResistenztestungCDS"
// imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_VorbefundCDS"

// Befund
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_BeurteilungCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_ImmunhistochemieCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_HistologieCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_MolekularpathologieCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_NGSLungPanelCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_FusionNGSCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_FastTrackCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SonstigeUntersuchungenCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_LiquidBiopsyCDS"

/*
// Operation
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_StrahlentherapieCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SonstigeTherapieCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_OperationTherapieCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SystemischeTherapieCTS"
*/

group MapCDS(source src: Bundle, target tgt: CTS_Transport)
{
    src -> tgt.sourcesystem = 'https:\/\/nngm-qat.staging.healex.systems\/';

    src then MapStammdaten(src, tgt);
    src then MapAntrag(src, tgt);
    src then MapBefund(src, tgt);
    src then MapTNM(src, tgt);

    /*
    // Operation
    src -> tgt.operations as operations then TransformStrahlentherapieCTS(src, operations);
    src -> tgt.operations as operations then TransformSonstigeTherapieCTS(src, operations);
    src -> tgt.operations as operations then TransformOperationTherapieCTS(src, operations);
    src -> tgt.operations as operations then TransformSystemischeTherapieCTS(src, operations);
    */
}

group MapStammdaten(source src: Bundle, target tgt: CTS_Transport)
{
    // Patient ID
    src.entry as entry, entry.resource as compositionStammdaten where "resource is Composition and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/Stammdaten-pseudonymisiert'" then
    {
        // Patid
        compositionStammdaten.subject as subject, subject.identifier as identifier, identifier.value as value -> tgt.patid = value;
        src -> tgt.operations as operations then TransformStammdatenCDS(src, operations);
    };
}

group MapAntrag(source src: Bundle, target tgt: CTS_Transport)
{
    src.entry as entry, entry.resource as compositionAntrag where "resource is Composition and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/Antrag-pseudonymisiert'", 
                                            compositionAntrag.identifier as identifier, identifier.value as fallNummer then
    {
        // Patid
        compositionAntrag.subject as subject, subject.identifier as subjectIdentifier, subjectIdentifier.value as value -> tgt.patid = value;

        
        // Basisangaben (Antrag.basisangaben)
        compositionAntrag.section as section, section where "code.coding.code = 'basisangaben'" -> tgt.operations as operations then
        {   
            section -> tgt.version = '1.0';
            section -> operations.type = 'save';
            section -> operations.crfid = evaluate(fallNummer, '$this + \'-BA\'');

            section.entry as sectionEntry, sectionEntry.reference as reference then
            {
                src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                {
                    section then TransformBasisangabenCDS(entry, operations);
                };
            };
        };
    
        // Biopsie(n) (Antrag.biopsie)
        compositionAntrag.section as biopsieSection, biopsieSection where "code.coding.code = 'biopsie'" -> tgt.operations as operations then
        {   
            let formNummer = evaluate(biopsieSection, '$this.entry.identifier.value');

            // Anforderung (Antrag.biopsie.anforderung)
            biopsieSection.section as nestedSection, nestedSection where "code.coding.code = 'anforderung'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-AF');

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    // we need to differentiate between Gewebe- and Blutdiagnostik which could only be done via the ServiceRequest
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last() and resource is ServiceRequest" then
                    {
                        // Gewebediagnostik
                        // Transform ServiceRequest itself, followed by its referenced resources (Observation, Specimen, Organization)
                        entry.resource as serviceRequest where "resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/ServiceRequest/nNGM/tumorblock'" then
                        {
                            let gewebeBlut = 'Gewebe';
                            nestedSection then TransformAnforderungCDS(entry, gewebeBlut, operations);
                            src.entry as entry, entry where "resource.id = %serviceRequest.reasonReference.reference.split(\'/\').last()" then TransformAnforderungCDS(entry, gewebeBlut, operations);
                            src.entry as entry, entry where "resource.id = %serviceRequest.specimen.reference.split(\'/\').last()" then TransformAnforderungCDS(entry, gewebeBlut, operations);
                            src.entry as entry, entry where "resource.id = %serviceRequest.requester.reference.split(\'/\').last()" then TransformAnforderungCDS(entry, gewebeBlut, operations);
                        };

                        // Blutdiagnostik (Liquid Biopsy)
                        // Transform ServiceRequest itself, followed by its referenced resources (Observation, Specimen)
                        entry.resource as serviceRequest where "resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/ServiceRequest/nNGM/testung'" then
                        {
                            let gewebeBlut = 'Blut';
                            nestedSection then TransformAnforderungCDS(entry, gewebeBlut, operations);
                            src.entry as entry, entry where "resource.id = %serviceRequest.reasonReference.reference.split(\'/\').last()" then TransformAnforderungCDS(entry, gewebeBlut, operations);
                            src.entry as entry, entry where "resource.id = %serviceRequest.specimen.reference.split(\'/\').last()" then TransformAnforderungCDS(entry, gewebeBlut, operations);
                        };
                    };
                };
            };

            // TNM (Antrag.biopsie.tnm)
            biopsieSection.section as nestedSection, nestedSection where "code.coding.code = 'tnm'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-TNM');

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformTNMCDS(entry, operations);
                    };
                };
            };
            
            // Resistenztestung (Antrag.biopsie.resistenztestung)
            biopsieSection.section as nestedSection, nestedSection where "code.coding.code = 'resistenztestung'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-RT');

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformResistenztestungCDS(entry, operations);
                    };
                };

                nestedSection then TransformCheckboxes(src, nestedSection, operations);
            };

            // // Vorbefund (Antrag.biopsie.vorbefund)
            // biopsieSection.section as nestedSection, nestedSection where "code.coding.code = 'vorbefund'" -> tgt.operations as operations then
            // {
            //     let crfidLeft = append(fallNummer, '-VB');
            //     let index = create('RepeatIndex'); // repeatindex needed for NGS Lung Panel and Fusion NGS
            //     src then InitSectionIndex(src, index); // used for NGS Lung Panel
            //     src then InitCaseIndex(src, index);  // used for Fusion NGS

            //     nestedSection -> tgt.version = '1.0';
            //     nestedSection -> operations.type = 'save';
            //     nestedSection -> operations.crfid = append(crfidLeft, formNummer);

            //     nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
            //     {
            //         src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
            //         {
            //             nestedSection then TransformVorbefundCDS(entry, operations, index);

            //             entry where "resource is Observation 
            //                         and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-panel'" then
            //                         IncrementSectionIndex(src, index);
            //             entry where "resource is Observation and resource.code.coding.code = 'Sonstiges'
            //                         and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression'" then
            //                         IncrementCaseIndex(src, index);
            //         };
            //     };

            //     nestedSection then TransformCheckboxesVorbefund(src, nestedSection, operations);
            // };
        };
    };
}

group MapBefund(source src: Bundle, target tgt: CTS_Transport)
{
    src.entry as entry, entry.resource as compositionBefund where "resource is Composition and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/molpatho-befund-pseudonymisiert'", 
                                            compositionBefund.identifier as identifier, identifier.value as fallNummer then
    {
        // Patid
        compositionBefund.subject as subject, subject.identifier as subjectIdentifier, subjectIdentifier.value as value -> tgt.patid = value;

        
        // Diagnostik(en) (Befund.diagnostik)
        compositionBefund.section as diagnosticSection, diagnosticSection where "code.coding.code = 'diagnostik'" -> tgt.operations as operations then
        {
            let formNummer = evaluate(diagnosticSection, '$this.entry.identifier.value');

            // Immunhistochemie (Befund.diagnostik.immunhistochemie)
            diagnosticSection.section as nestedSection, nestedSection where "code.coding.code = 'immunhistochemie'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-IHC');

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);              

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformImmunhistochemieCDS(entry, operations);
                    };
                };

                nestedSection then TransformCheckboxes(src, nestedSection, operations);
            };

            // Histologie (Befund.diagnostik.histologie)
            diagnosticSection.section as nestedSection, nestedSection where "code.coding.code = 'histologie'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-HL');

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformHistologieCDS(entry, operations);
                    };
                };
            };

            // Molekularpathologie (Befund.diagnostik.molekularpathologie)
            diagnosticSection.section as nestedSection, nestedSection where "code.coding.code = 'molekularpathologie'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-MP');

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformMolekularpathologieCDS(entry, operations);
                    };
                };

                nestedSection then TransformCheckboxes(src, nestedSection, operations);
            };

            // NGS Lung Panel (Befund.diagnostik.ngs-lung-panel)
            diagnosticSection.section as nestedSection, nestedSection where "code.coding.code = 'ngs-lung-panel'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-LP');
                let index = create('RepeatIndex'); // repeatindex needed for Observation
                src then InitSectionIndex(src, index); 

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformNGSLungPanelCDS(entry, operations, index);

                        entry where "resource is Observation and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-panel'
                                    and resource.code.coding.code = 'NGS Panel'" then
                                    IncrementSectionIndex(src, index);
                    };
                };
            };

            // Fusion NGS (Befund.diagnostik.ngs-fusion-expression)
            diagnosticSection.section as nestedSection, nestedSection where "code.coding.code = 'fusion-ngs'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-FS');
                let index = create('RepeatIndex'); // repeatindex needed for Observation
                src then InitSectionIndex(src, index); 

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformFusionNGSCDS(entry, operations, index);

                        entry where "resource is Observation and resource.code.coding.code = 'Sonstige Fusion NGS'
                                    and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression'" then
                                    IncrementSectionIndex(src, index);
                    };
                };

                nestedSection then TransformCheckboxes(src, nestedSection, operations);
            };

            // Fast Track (Befund.diagnostik.fast-track)
            diagnosticSection.section as nestedSection, nestedSection where "code.coding.code = 'fast-track'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-FT');

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformFastTrackCDS(entry, operations);
                    };
                };

                nestedSection then TransformCheckboxes(src, nestedSection, operations);
            };

            // Sonstige Untersuchungen (Befund.diagnostik.sonstige-untersuchungen)
            diagnosticSection.section as nestedSection, nestedSection where "code.coding.code = 'sonstige-untersuchungen'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-SU');
                let index = create('RepeatIndex'); // repeatindex needed for Observation
                src then InitSectionIndex(src, index);

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformSonstigeUntersuchungCDS(entry, operations, index);
                        entry where "resource is Observation" then IncrementSectionIndex(src, index);
                    };
                };
            };

            // Liquid Biopsy (Befund.diagnostik.liquid-biopsy)
            diagnosticSection.section as nestedSection, nestedSection where "code.coding.code = 'liquid-biopsy'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-LB');
                let index = create('RepeatIndex'); // repeatindex needed for Observation
                src then InitSectionIndex(src, index);

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformLiquidBiopsyCDS(entry, operations, index);
                        entry where "resource is Observation" then IncrementSectionIndex(src, index);
                    };
                };
            };
        };

        // Beurteilung (Befund.beurteilung) 
        compositionBefund.section as section, section where "code.coding.code = 'beurteilung'" -> tgt.operations as operations then
        {
            let index = create('RepeatIndex'); // repeatindex needed for DiagnosticReport
            src then InitSectionIndex(src, index); 

            section -> tgt.version = '1.0';
            section -> operations.type = 'save';
            section -> operations.crfid = evaluate(fallNummer, '$this + \'-BU\'');

            section.entry as sectionEntry, sectionEntry.reference as reference then
            {
                src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                {
                    section then TransformBeurteilungCDS(entry, operations, index);
                    entry.resource where "resource is DiagnosticReport" then IncrementSectionIndex(src, index);
                };
            };
        }; 
    };
}

group MapTNM(source src: Bundle, target tgt: CTS_Transport)
{
    src.entry as entry, entry.resource as compositionTNM where "resource is Composition and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/TNM-pseudonymisiert'" then
    {
        // Patid
        compositionTNM.subject as subject, subject.identifier as subjectIdentifier, subjectIdentifier.value as value -> tgt.patid = value;
    
        // Biopsie(n) (Antrag.biopsie)
        compositionTNM.section as tnmSection, tnmSection where "code.coding.code = 'tnm'" -> tgt.operations as operations then
        {   
            let formNummer = evaluate(tnmSection, '$this.entry.identifier.value');

            // TNM (Antrag.tnm)
            tnmSection -> tgt.version = '1.0';
            tnmSection -> operations.type = 'save';
            tnmSection -> operations.crfid = append('TNM', formNummer);

            tnmSection.entry as tnmSectionEntry, tnmSectionEntry.reference as reference then
            {
                src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                {
                    tnmSection then TransformTNMCDS(entry, operations);
                };
            };
        };
    };
}

// Helper functions
group InitSectionIndex(source src: Bundle, target index: RepeatIndex)
{
    src -> index.sectionIndex = 0;
}

group InitCaseIndex(source src: Bundle, target index: RepeatIndex)
{
    src -> index.caseIndex = 0;
}

group IncrementSectionIndex(source src: Bundle, target index: RepeatIndex)
{
    src -> index.sectionIndex = evaluate(index, '$this.sectionIndex + 1');
}

group IncrementCaseIndex(source src: Bundle, target index: RepeatIndex)
{
    src -> index.caseIndex = evaluate(index, '$this.caseIndex + 1');
}

// For each form with checkboxes: iterate over the FHIR resources to be listed once again, create 1 data BackboneElement (= checkbox) and add the values accordingly to it 
group TransformCheckboxes(source src: Bundle, source nestedSection: BackboneElement, target operations: BackboneElement)
{
    // Antrag
    // RT
    nestedSection where "code.coding.code = 'resistenztestung'" -> operations.data as data then
    {
        nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference,
        src.entry as entry, entry.resource as observation where "resource.id = %reference.split(\'/\').last() and resource is Observation 
                                                            and resource.meta.profile.contains('http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/tki-resistenz')" then
        {
            observation where "%data.where(itemid = 'id_1434').exists().not()" then
            {
                observation -> data.blockindex = 1;
                observation -> data.groupindex = 0;
                observation -> data.itemid = 'id_1434';
            };
            observation where "code.coding.code = 'C134501'" -> data.values as values, values.value = 'EGFR';  
            observation where "code.coding.code = 'C142114'" -> data.values as values, values.value = 'ALK';  
            observation where "code.coding.code = 'C131071'" -> data.values as values, values.value = 'ROS1';  
        };
    };

    // Befund
    // IHC
    nestedSection where "code.coding.code = 'immunhistochemie'" -> operations.data as data then
    {
        nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference, 
        src.entry as entry, entry.resource as observation where "resource.id = %reference.split(\'/\').last() and resource is Observation 
                                                            and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc'" then
        {
            observation where "%data.where(itemid = 'id_2508').exists().not()" then
            {
                observation -> data.blockindex = 3;
                observation -> data.groupindex = 0;
                observation -> data.itemid = 'id_2508';
            };
            observation -> data.values as values, values.value = evaluate(observation, '$this.code.coding.code'); 
        };
    };

    // MP - here we need to create 2 checkboxes (= 2 data BackboneElements) 
    // CISH
    nestedSection where "code.coding.code = 'molekularpathologie'" -> operations.data as data then
    {
        nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference, 
        src.entry as entry, entry.resource as observation where "resource.id = %reference.split(\'/\').last() and resource is Observation 
                                                            and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ish'" then
        {
            observation where "%data.where(itemid = 'id_2509').exists().not()" then
            {
                observation -> data.blockindex = 2;
                observation -> data.groupindex = 0;
                observation -> data.itemid = 'id_2509';
            };
            observation -> data.values as values, values.value = evaluate(observation, '$this.code.coding.code'); 
        };    
    };
    // FISH
    nestedSection where "code.coding.code = 'molekularpathologie'" -> operations.data as data then
    {
        nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference, 
        src.entry as entry, entry.resource as observation where "resource.id = %reference.split(\'/\').last() and resource is Observation 
                                                            and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fish'" then
        {
            observation where "%data.where(itemid = 'id_2510').exists().not()" then
            {
                observation -> data.blockindex = 2;
                observation -> data.groupindex = 0;
                observation -> data.itemid = 'id_2510';
            };
            observation -> data.values as values, values.value = evaluate(observation, '$this.code.coding.code'); 
        };    
    };

    // FS
    nestedSection where "code.coding.code ='fusion-ngs'" -> operations.data as data then
    {
        nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference, 
        src.entry as entry, entry.resource as observation where "resource.id = %reference.split(\'/\').last() and resource is Observation
                                                            and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression'" then
        {
            observation where "%data.where(itemid = 'id_2511').exists().not()" then
            {
                observation -> data.blockindex = 4;
                observation -> data.groupindex = 0;
                observation -> data.itemid = 'id_2511';
            };
            // ensure that "Sonstiges" is added only once (note: 'Sonstige Fusion NGS' in FHIR-Bundle corresponds to 'Sonstiges' in CDS-Export)
            observation where "%observation.code.coding.code = 'Sonstige Fusion NGS' and %data.where(values.where(value = 'Sonstiges')).exists().not()" then
            {
                observation -> data.values as values, values.value = 'Sonstiges'; 
            };
            observation where "%observation.code.coding.code != 'Sonstige Fusion NGS'" then
            {
                observation -> data.values as values, values.value = evaluate(observation, '$this.code.coding.code');  
            };
        };
    };

    // FT
    nestedSection where "code.coding.code = 'fast-track'" -> operations.data as data then
    {
        nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference,
        src.entry as entry, entry.resource as observation where "resource.id = %reference.split(\'/\').last() and resource is Observation 
                                                            and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fasttrack'" then
        {
            observation where "%data.where(itemid = 'id_2512').exists().not()" then
            {
                observation -> data.blockindex = 3;
                observation -> data.groupindex = 0;
                observation -> data.itemid = 'id_2512';
            };
            observation where "%observation.code.coding.code = 'BRAF Exon 15'" -> data.values as values, values.value = 'BRAF Exon 15';  
            observation where "%observation.code.coding.code = 'KRAS Exon 2'" -> data.values as values, values.value = 'KRAS Exon 2';
            // need to only check for EGFR Exon 19 since 19, 20 and 21 are selected/identified via this one value below
            observation where "%observation.code.coding.code = 'EGFR Exon 19'" -> data.values as values, values.value = 'EGFR Exon 19-21';  

        };
    };
}

group TransformCheckboxesVorbefund(source src: Bundle, source nestedSection: BackboneElement, target operations: BackboneElement)
{
    // IHC
    nestedSection where "code.coding.code = 'vorbefund'" -> operations.data as data then
    {
        nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference,
        src.entry as entry, entry.resource as observation where "resource.id = %reference.split(\'/\').last() and resource is Observation 
                                                            and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc'" then
        {
            observation where "%data.where(itemid = 'id_2508').exists().not()" then
            {
                observation -> data.blockindex = 2;
                observation -> data.groupindex = 0;
                observation -> data.itemid = 'id_2508';
            };
            observation -> data.values as values, values.value = evaluate(observation, '$this.code.coding.code'); 
        };
    };

    // MP - here we need to create 2 checkboxes (= 2 data BackboneElements) 
    // CISH
    nestedSection where "code.coding.code = 'vorbefund'" -> operations.data as data then
    {
        nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference, 
        src.entry as entry, entry.resource as observation where "resource.id = %reference.split(\'/\').last() and resource is Observation 
                                                            and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ish'" then
        {
            observation where "%data.where(itemid = 'id_2509').exists().not()" then
            {
                observation -> data.blockindex = 2;
                observation -> data.groupindex = 0;
                observation -> data.itemid = 'id_2509';
            };
            observation -> data.values as values, values.value = evaluate(observation, '$this.code.coding.code'); 
        };    
    };
    // FISH
    nestedSection where "code.coding.code = 'vorbefund'" -> operations.data as data then
    {
        nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference, 
        src.entry as entry, entry.resource as observation where "resource.id = %reference.split(\'/\').last() and resource is Observation 
                                                            and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fish'" then
        {
            observation where "%data.where(itemid = 'id_2510').exists().not()" then
            {
                observation -> data.blockindex = 2;
                observation -> data.groupindex = 0;
                observation -> data.itemid = 'id_2510';
            };
            observation -> data.values as values, values.value = evaluate(observation, '$this.code.coding.code'); 
        };    
    };
    
    // FS
    nestedSection where "code.coding.code ='vorbefund'" -> operations.data as data then
    {
        nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference, 
        src.entry as entry, entry.resource as observation where "resource.id = %reference.split(\'/\').last() and resource is Observation
                                                            and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression'" then
        {
            observation where "%data.where(itemid = 'id_2511').exists().not()" then
            {
                observation -> data.blockindex = 2;
                observation -> data.groupindex = 0;
                observation -> data.itemid = 'id_2511';
            };
            // ensure that "Sonstiges" is added only once (note: 'Sonstige Fusion NGS' in FHIR-Bundle corresponds to 'Sonstiges' in CDS-Export)
            observation where "%observation.code.coding.code = 'Sonstige Fusion NGS' and %data.where(values.where(value = 'Sonstiges')).exists().not()" then
            {
                observation -> data.values as values, values.value = 'Sonstiges'; 
            };
            observation where "%observation.code.coding.code != 'Sonstige Fusion NGS'" then
            {
                observation -> data.values as values, values.value = evaluate(observation, '$this.code.coding.code');  
            };
        };
    };

    // FT
    nestedSection where "code.coding.code = 'vorbefund'" -> operations.data as data then
    {
        nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference,
        src.entry as entry, entry.resource as observation where "resource.id = %reference.split(\'/\').last() and resource is Observation 
                                                            and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fasttrack'" then
        {
            observation where "%data.where(itemid = 'id_2512').exists().not()" then
            {
                observation -> data.blockindex = 2;
                observation -> data.groupindex = 0;
                observation -> data.itemid = 'id_2512';
            };
            observation where "%observation.code.coding.code = 'BRAF Exon 15'" -> data.values as values, values.value = 'BRAF Exon 15';  
            observation where "%observation.code.coding.code = 'KRAS Exon 2'" -> data.values as values, values.value = 'KRAS Exon 2';
            // need to only check for EGFR Exon 19 since 19, 20 and 21 are selected/identified via this one value below
            observation where "%observation.code.coding.code = 'EGFR Exon 19'" -> data.values as values, values.value = 'EGFR Exon 19-21'; 
        };
    };
}