/// version = 0.1
/// title = "nNGM: nNGMv09c - FHIR to CTS"

map "http://uk-koeln.de/fhir/StructureMap/nNGMv09c" = nNGMv09c

uses "http://hl7.org/fhir/StructureDefinition/Bundle" as source
uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as target

// Stammdaten
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_StammdatenCDS"

// Antrag
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_BasisangabenCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_AnforderungCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_ResistenztestungCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_TNMCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_VorbefundCTS"

// Befund
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_BeurteilungCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_ImmunhistochemieCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_HistologieCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_MolekularpathologieCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_NGSLungPanelCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_FusionNGSCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_FastTrackCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SonstigeUntersuchungenCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_LiquidBiopsyCDS"

/*
// Operation
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_StrahlentherapieCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SonstigeTherapieCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_OperationTherapieCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SystemischeTherapieCTS"
*/

group MapCDS(source src: Bundle, target tgt: CTS_Transport)
{
    src -> tgt.sourcesystem = 'https:\/\/nngm-qat.staging.healex.systems\/';

    // src then MapStammdaten(src, tgt);
    // src then MapAntrag(src, tgt);
    src then MapBefund(src, tgt);

    /*
    // Operation
    src -> tgt.operations as operations then TransformStrahlentherapieCTS(src, operations);
    src -> tgt.operations as operations then TransformSonstigeTherapieCTS(src, operations);
    src -> tgt.operations as operations then TransformOperationTherapieCTS(src, operations);
    src -> tgt.operations as operations then TransformSystemischeTherapieCTS(src, operations);
    */
}

group MapStammdaten(source src: Bundle, target tgt: CTS_Transport)
{
    // Patient ID
    src.entry as entry, entry.resource as composition where "resource is Composition and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/Stammdaten-pseudonymisiert'" then
    {
        // Patid
        composition.subject as subject, subject.identifier as identifier, identifier.value as value -> tgt.patid = value;
        src -> tgt.operations as operations then TransformStammdatenCDS(src, operations);
    };
    
}

group MapAntrag(source src: Bundle, target tgt: CTS_Transport)
{
    src.entry as entry, entry.resource as composition where "resource is Composition and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/Antrag-pseudonymisiert'", composition.identifier as identifier, identifier.value as fallNummer then
    {
        // Patid
        composition.subject as subject, subject.identifier as subjectIdentifier, subjectIdentifier.value as value -> tgt.patid = value;

        
        // Basisangaben
        composition.section as section, section where "code.coding.code = 'basisangaben'" -> tgt.operations as operations then
        {   
            section -> tgt.version = '1.0';
            section -> operations.type = 'save';
            section -> operations.crfid = evaluate(fallNummer, '$this + \'-BA\'');

            section.entry as sectionEntry, sectionEntry.reference as reference then
            {
                src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                {
                    section then TransformBasisangabenCDS(entry, operations);
                };
            };
        };
        

        //section.entry as biopsieSection, biopsieSection.identifier as biopsieIdentifier, biopsieIdentifier.value as fallNummer

        // Biopsie
        composition.section as section, section where "code.coding.code = 'biopsie'" -> tgt.operations as operations then
        {   
            let formNummer = evaluate(section, '$this.entry.identifier.value');

            // Anforderung
            section.section as nestedSection, nestedSection where "code.coding.code = 'anforderung'" -> tgt.operations as operations then
            {
                let crfidOne = append(fallNummer, '-AF');

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidOne, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformAnforderungCDS(entry, operations);
                    };
                };
            };
        };
    };


    
    // Antrag
    // src -> tgt.operations as operations then TransformAnforderungCTS(src, operations);
    // src -> tgt.operations as operations then TransformTNMCTS(src, operations);
    // src -> tgt.operations as operations then TransformResistenztestungCTS(src, operations);
    // src -> tgt.operations as operations then TransformVorbefundCTS(src, operations);
}

group MapBefund(source src: Bundle, target tgt: CTS_Transport)
{
    src.entry as entry, entry.resource as compositionBefund where "resource is Composition and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/molpatho-befund-pseudonymisiert'", 
                                            compositionBefund.identifier as identifier, identifier.value as fallNummer then
    {
        // Patid
        compositionBefund.subject as subject, subject.identifier as subjectIdentifier, subjectIdentifier.value as value -> tgt.patid = value;

        // Diagnostik(en) (Befund.diagnostik)
        compositionBefund.section as diagnosticSection, diagnosticSection where "code.coding.code = 'diagnostik'" -> tgt.operations as operations then
        {
            let formNummer = evaluate(diagnosticSection, '$this.entry.identifier.value');

            // TODO: in general when passing a single Fhir resource at a time into the CDS-maps, how to combine data from a group of resources?
            //       for example when transforming the checkboxes which list e.g. the types of every given observation in the MP under id_2509/10

            // Immunhistochemie (Befund.diagnostik.immunhistochemie)
            // TODO: somehow the ServiceRequest.status is also written at 3_0_id_2508 (despite the map saying otherwise)
            // diagnosticSection.section as nestedSection, nestedSection where "code.coding.code = 'immunhistochemie'" -> tgt.operations as operations then
            // {
            //     let crfidLeft = append(fallNummer, '-IHC');

            //     nestedSection -> tgt.version = '1.0';
            //     nestedSection -> operations.type = 'save';
            //     nestedSection -> operations.crfid = append(crfidLeft, formNummer);

            //     nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
            //     {
            //         src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
            //         {
            //             nestedSection then TransformImmunhistochemieCDS(entry, operations);
            //         };
            //     };
            // };

            // Histologie (Befund.diagnostik.histologie)
            // diagnosticSection.section as nestedSection, nestedSection where "code.coding.code = 'histologie'" -> tgt.operations as operations then
            // {
            //     let crfidLeft = append(fallNummer, '-HL');

            //     nestedSection -> tgt.version = '1.0';
            //     nestedSection -> operations.type = 'save';
            //     nestedSection -> operations.crfid = append(crfidLeft, formNummer);

            //     nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
            //     {
            //         src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
            //         {
            //             nestedSection then TransformHistologieCDS(entry, operations);
            //         };
            //     };
            // };

            // Molekularpathologie (Befund.diagnostik.molekularpathologie)
            diagnosticSection.section as nestedSection, nestedSection where "code.coding.code = 'molekularpathologie'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-MP');

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformMolekularpathologieCDS(entry, operations);
                    };
                };
            };

            // NGS Lung Panel (Befund.diagnostik.ngs-lung-panel)

            // Fusion NGS (Befund.diagnostik.ngs-fusion-expression)

            // Fast Track (Befund.diagnostik.fast-track)

            // Sonstige Untersuchungen (Befund.diagnostik.sonstige-untersuchungen)

            // Liquid Biopsy (Befund.diagnostik.liquid-biopsy)

        };

        // Beurteilung (Befund.beurteilung) 
        compositionBefund.section as section, section where "code.coding.code = 'beurteilung'" -> tgt.operations as operations then
        {
            let index = create('RepeatIndex'); // repeatindex needed for DiagnosticReport
            src then InitSectionIndex(src, index); 

            section -> tgt.version = '1.0';
            section -> operations.type = 'save';
            section -> operations.crfid = evaluate(fallNummer, '$this + \'-BU\'');

            section.entry as sectionEntry, sectionEntry.reference as reference then
            {
                src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                {
                    section then TransformBeurteilungCDS(entry, operations, index);
                    entry.resource where "resource is DiagnosticReport" then IncrementSectionIndex(src, index);
                };
            };
        }; 
    };
}

// Helper functions
group InitSectionIndex(source src: Bundle, target index: RepeatIndex)
{
    src -> index.sectionIndex = 0;
}

group IncrementSectionIndex(source src: Bundle, target index: RepeatIndex)
{
    src -> index.sectionIndex = evaluate(index, '$this.sectionIndex + 1');
}