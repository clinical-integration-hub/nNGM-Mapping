/// version = 0.1
/// title = "nNGM: nNGMv09c - FHIR to CTS"

map "http://uk-koeln.de/fhir/StructureMap/nNGMv09c" = nNGMv09c

uses "http://hl7.org/fhir/StructureDefinition/Bundle" as source
uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as target

// Stammdaten
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_StammdatenCDS"

// Antrag
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_BasisangabenCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_AnforderungCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_TNMCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_ResistenztestungCDS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_VorbefundCDS"

/*
// Befund
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_FastTrackCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_HistologieCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SonstigeUntersuchungenCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_ImmunhistochemieCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_BeurteilungCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_NGSLungPanelCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_LiquidBiopsyCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_FusionNGSCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_MolekularpathologieCTS"

// Operation
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_StrahlentherapieCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SonstigeTherapieCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_OperationTherapieCTS"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SystemischeTherapieCTS"
*/

group MapCDS(source src: Bundle, target tgt: CTS_Transport)
{
    src -> tgt.sourcesystem = 'https:\/\/nngm-qat.staging.healex.systems\/';

    //src then MapStammdaten(src, tgt);
    src then MapAntrag(src, tgt);

    /*
    // Befund
    src -> tgt.operations as operations then TransformFastTrackCTS(src, operations);
    src -> tgt.operations as operations then TransformHistologieCTS(src, operations);
    src -> tgt.operations as operations then TransformSonstigeUntersuchungCTS(src, operations);
    src -> tgt.operations as operations then TransformImmunhistochemieCTS(src, operations);
    src -> tgt.operations as operations then TransformBeurteilungCTS(src, operations);
    src -> tgt.operations as operations then TransformNGSLungPanelCTS(src, operations);
    src -> tgt.operations as operations then TransformLiquidBiopsyCTS(src, operations);
    src -> tgt.operations as operations then TransformFusionNGSCTS(src, operations);
    src -> tgt.operations as operations then TransformMolekularpathologieCTS(src, operations);

    // Operation
    src -> tgt.operations as operations then TransformStrahlentherapieCTS(src, operations);
    src -> tgt.operations as operations then TransformSonstigeTherapieCTS(src, operations);
    src -> tgt.operations as operations then TransformOperationTherapieCTS(src, operations);
    src -> tgt.operations as operations then TransformSystemischeTherapieCTS(src, operations);
    */
}

group MapStammdaten(source src: Bundle, target tgt: CTS_Transport)
{
    // Patient ID
    src.entry as entry, entry.resource as composition where "resource is Composition and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/Stammdaten-pseudonymisiert'" then
    {
        // Patid
        composition.subject as subject, subject.identifier as identifier, identifier.value as value -> tgt.patid = value;
        src -> tgt.operations as operations then TransformStammdatenCDS(src, operations);
    };
    
}

group MapAntrag(source src: Bundle, target tgt: CTS_Transport)
{
    src.entry as entry, entry.resource as composition where "resource is Composition and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Composition/nNGM/Antrag-pseudonymisiert'", composition.identifier as identifier, identifier.value as fallNummer then
    {
        // Patid
        composition.subject as subject, subject.identifier as subjectIdentifier, subjectIdentifier.value as value -> tgt.patid = value;

        
        // Basisangaben
        composition.section as section, section where "code.coding.code = 'basisangaben'" -> tgt.operations as operations then
        {   
            section -> tgt.version = '1.0';
            section -> operations.type = 'save';
            section -> operations.crfid = evaluate(fallNummer, '$this + \'-BA\'');

            section.entry as sectionEntry, sectionEntry.reference as reference then
            {
                src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                {
                    section then TransformBasisangabenCDS(entry, operations);
                };
            };
        };
        

        //section.entry as biopsieSection, biopsieSection.identifier as biopsieIdentifier, biopsieIdentifier.value as fallNummer

        // Biopsie(n)
        composition.section as section, section where "code.coding.code = 'biopsie'" -> tgt.operations as operations then
        {   
            let formNummer = evaluate(section, '$this.entry.identifier.value');

            // Anforderung
            section.section as nestedSection, nestedSection where "code.coding.code = 'anforderung'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-AF');

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformAnforderungCDS(entry, operations);
                    };
                };
            };

            // TNM
            section.section as nestedSection, nestedSection where "code.coding.code = 'tnm'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-TNM');

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformTNMCTS(entry, operations);
                    };
                };
            };
            
            // Resistenztestung
            section.section as nestedSection, nestedSection where "code.coding.code = 'resistenztestung'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-RT');

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformResistenztestungCTS(entry, operations);
                    };
                };
            };

            // Vorbefund 
            // TODO: repeatindex isn't working as expected; see "id_35" for example:
            // repeatindex becomes an array with 1 element instead of integer and 
            // where-loop for NGS Panel (and Fusion NGS) is executed only once instead of 2 or 3 times (with this test data)
            section.section as nestedSection, nestedSection where "code.coding.code = 'vorbefund'" -> tgt.operations as operations then
            {
                let crfidLeft = append(fallNummer, '-VB');
                let index = create('RepeatIndex'); // repeatindex needed for NGS Lung Panel and Fusion NGS

                nestedSection -> tgt.version = '1.0';
                nestedSection -> operations.type = 'save';
                nestedSection -> operations.crfid = append(crfidLeft, formNummer);

                nestedSection.entry as nestedSectionEntry, nestedSectionEntry.reference as reference then
                {
                    src.entry as entry, entry where "resource.id = %reference.split(\'/\').last()" then
                    {
                        nestedSection then TransformVorbefundCTS(entry, operations, index);
                    };
                };
            };
        };
    };
}

// Helper functions
group InitSectionIndex(source src: BackboneElement, target index: RepeatIndex)
{
    src -> index.sectionIndex = 0;
}

group IncrementSectionIndex(source src: BackboneElement, target index: RepeatIndex)
{
    src -> index.sectionIndex = evaluate(index, '$this.sectionIndex + 1');
}