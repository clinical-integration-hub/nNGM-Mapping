/* Map a Variant Call Format (VCF) file from FHIR resources based on the Clinical Genmoics Implementation Guide (http://hl7.org/fhir/uv/genomics-reporting/) to the CTS_Transport format */

/* TODO
* CSQ Selection -> Test single csq by TF selection -> Test multiple csq selection by TF? Does repeatindex still work
*/

/// version = 0.1

map "http://vonk.fire.ly/fhir/StructureMap/nNGM_NGS_LUNGPANEL_CDS" = "nNGM NGS LUNG PANEL CDS"

uses "http://vonk.fire.ly/fhir/StructureDefinition/VCF" as source
uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as target

group MapVCF(source src: VCF, target tgt: CTS_Transport)
{
    // create repeatindex 
    let index = create('RepeatIndex');

    src then InitSectionIndex(src, index);
    
    // generate CDS metadata
    src then MapCDSMeta(src, tgt);

    // Set iteration scope
    src.records as records then
    {   
        // iterate through constant header part
        records then MapVCFRequiredHeader(src, tgt, index),
        
        // iterate through repeated records of body part
        MapVCFRequiredBody(records, tgt, index),
        MapVCFOptionalBody(records, tgt, index),
        
        //Increment repeatindex
        IncrementSectionIndex(src, index);
    };
}

group InitSectionIndex(source src: VCF, target index: RepeatIndex)
{
    src -> index.sectionIndex = 0;
}

group IncrementSectionIndex(source src: VCF, target index: RepeatIndex)
{
    src -> index.sectionIndex = evaluate(index, '$this.sectionIndex + 1');
}

group MapCDSMeta(source src: VCF, target tgt : CTS_Transport)
{
    src -> tgt.version = '1.1';
    src -> tgt.sourcesystem = 'https:\/\/nngm-qat.staging.healex.systems\/';
    src -> tgt.operations as operations collate, operations.crfid = '*_LP1';
    src -> tgt.operations as operations collate, operations.type = 'save';
    
    src -> tgt.metaInformation as mI, mI.key = 'SourceSystem', mI.value = 'vcf';

    src.records as records, records.sample as sample, sample.sampleId as sampleId then 
    {
        //PathoPro ID
        sampleId where "%tgt.metaInformation.where(key='PathoPro_ID').exists().not()" then 
        {
            sampleId -> tgt.metaInformation as mI, mI.key = 'PathoPro_ID', mI.value = evaluate(records, '$this[0].sample[0].sampleId[0].split(\':\')[1].split(\'_\')[0]');
        };
        
        //UntersuchungsID
        sampleId where "%tgt.metaInformation.where(key='Untersuchungs_ID').exists().not()" then 
        {
            sampleId -> tgt.metaInformation as mI, mI.key = 'Untersuchungs_ID', mI.value = evaluate(records, '$this[0].sample[0].sampleId[0].split(\':\')[1].split(\'_\')[1].split(\'-\')[0]');
        };
    };
    
    src -> tgt.operations as operations collate then 
    {
        src -> operations.data as data then 
        {
            src -> data.blockindex = 5;
            src -> data.groupindex = 0;
            src -> data.itemid = 'id_2462';
            src -> data.values as values, values.value = 'vollstÃ¤ndig';
        };
    };
    
    src -> tgt.operations as operations collate then 
    {
        src -> operations.data as data then 
        {
            src -> data.blockindex = 5;
            src -> data.groupindex = 0;
            src -> data.itemid = 'id_2520';
            src -> data.values as values, values.value = 'abgeschlossen';
        };
    };
}

group MapVCFRequiredHeader(source src: VCF, target tgt : CTS_Transport, target index: RepeatIndex)
{
    // ##reference -> LP__4_0_0__id_41
    src.header as header, header.optional as optional, optional.value as reference where "$this.name = 'reference'" then 
    {
        reference -> tgt.operations as operations collate then 
        {
            reference -> operations.data as data then 
            {
                reference -> data.blockindex = 4;
                reference -> data.groupindex = 0;
                reference -> data.repeatindex = evaluate(index, '$this.sectionIndex');
                reference -> data.itemid = 'id_41';
                reference -> data.values as values, values.value = reference;
            };
        };
    };
}

group MapVCFRequiredBody(source src: BackboneElement, target tgt : CTS_Transport, target index: RepeatIndex)
{
    
    // #CHROM -> LP__4_0_0__id_42
    src as records, records.chrom as chrom ->  tgt.operations as operations collate then 
    {
        chrom -> operations.data as data then 
        {
            chrom -> data.blockindex = 4;
            chrom -> data.groupindex = 0;
            chrom -> data.repeatindex = evaluate(index, '$this.sectionIndex');
            chrom -> data.itemid = 'id_42';
            chrom -> data.values as values, values.value = chrom;
        };
    };

    // POS START -> LP__4_0_0__id_43
    src as records, records.pos as pos ->  tgt.operations as operations collate then 
    {
        pos -> operations.data as data then 
        {
            pos -> data.blockindex = 4;
            pos -> data.groupindex = 0;
            pos -> data.repeatindex = evaluate(index, '$this.sectionIndex');
            pos -> data.itemid = 'id_43';
            pos -> data.values as values, values.value = pos;
        };
    };

    // REF -> LP__4_0_0__id_45
    src as records, records.ref as ref -> tgt.operations as operations collate then 
    {
        ref -> operations.data as data then 
        {
            ref -> data.blockindex = 4;
            ref -> data.groupindex = 0;
            ref -> data.repeatindex = evaluate(index, '$this.sectionIndex');
            ref -> data.itemid = 'id_45';
            ref -> data.values as values, values.value = ref;
        };
    };

    // ALT -> LP__4_0_0__id_46
    src as records, records.alt as alt ->  tgt.operations as operations collate then 
    {
        alt -> operations.data as data then 
        {
            alt -> data.blockindex = 4;
            alt -> data.groupindex = 0;
            alt -> data.repeatindex = evaluate(index, '$this.sectionIndex');
            alt -> data.itemid = 'id_46';
            alt -> data.values as values, values.value = alt;
        };
    };
}

group MapVCFOptionalBody(source src: BackboneElement, target tgt : CTS_Transport, target index: RepeatIndex)
{
    src as records, records.info as ccd, ccd.value as value where "$this.name = 'CSQ'" -> tgt.operations as operations collate then
    {
        value where "$this.split(\'|\')[6] = 'NM_002529.3'
        or $this.split(\'|\')[6] = 'NM_006180.3'
        or $this.split(\'|\')[6] = 'NM_001012338.2'
        or $this.split(\'|\')[6] = 'NM_020975.6'
        or $this.split(\'|\')[6] = 'NM_005343.4'
        or $this.split(\'|\')[6] = 'NM_000455.4'
        or $this.split(\'|\')[6] = 'NM_203500.2'
        or $this.split(\'|\')[6] = 'NM_004304.4'
        or $this.split(\'|\')[6] = 'NM_004333.4'
        or $this.split(\'|\')[6] = 'NM_001904.3'
        or $this.split(\'|\')[6] = 'NM_005228.3'
        or $this.split(\'|\')[6] = 'NM_023110.2'
        or $this.split(\'|\')[6] = 'NM_000141.4'   
        or $this.split(\'|\')[6] = 'NM_022970.3'
        or $this.split(\'|\')[6] = 'NM_000142.4'
        or $this.split(\'|\')[6] = 'NM_213647.1'
        or $this.split(\'|\')[6] = 'NM_004448.2'
        or $this.split(\'|\')[6] = 'NM_033360.2'
        or $this.split(\'|\')[6] = 'NM_002755.3'
        or $this.split(\'|\')[6] = 'NM_001127500.2'
        or $this.split(\'|\')[6] = 'NM_002524.4'
        or $this.split(\'|\')[6] = 'NM_006218.2'
        or $this.split(\'|\')[6] = 'NM_000314.4'
        or $this.split(\'|\')[6] = 'NM_000546.5'
        or $this.split(\'|\')[6] = 'NM_002944.2'
        or $this.split(\'|\')[6] = 'NM_005896.2'
        or $this.split(\'|\')[6] = 'NM_002168.2'" 
        then 
        {
            // INFO.TN (Gen) / CSQ[6] -> LP__4_0_0__id_1159
            value -> operations.data as data then 
            {
                value -> data.blockindex = 4;
                value -> data.groupindex = 0;
                value -> data.repeatindex = evaluate(index, '$this.sectionIndex');
                value -> data.itemid = 'id_1159';
                value -> data.values as values, values.value = evaluate(value, '$this.split(\'|\')[3]');
            }; 
    
            // INFO.TN (Exon)/ CSQ[8] first char before / -> LP__4_0_0__id_35
            value -> operations.data as data then 
            {
                value -> data.blockindex = 4;
                value -> data.groupindex = 0;
                value -> data.repeatindex = evaluate(index, '$this.sectionIndex');
                value -> data.itemid = 'id_35';
                value -> data.values as values, values.value = evaluate(value, '$this.split(\'|\')[8].split(\'/\').first()');
            };

            // INFO.CcD / CSQ.9 char behind : -> LP__4_0_0__id_36  
            value -> operations.data as data then 
            {
                value -> data.blockindex = 4;
                value -> data.groupindex = 0;
                value -> data.repeatindex = evaluate(index, '$this.sectionIndex');
                value -> data.itemid = 'id_36';
                value -> data.values as values, values.value = evaluate(value, '$this.split(\'|\')[9].split(\':\').last()');
            };
    

            // INFO.CP / CSQ.10 -> LP__4_0_0__id_37  
            value -> operations.data as data then 
            {
                value -> data.blockindex = 4;
                value -> data.groupindex = 0;
                value -> data.repeatindex = evaluate(index, '$this.sectionIndex');
                value -> data.itemid = 'id_37';
                value -> data.values as values, values.value = evaluate(value, '$this.split(\'|\')[10].split(\':\').last()');
            };
    
            // POS STOP -> LP__4_0_0__id_44
            value -> operations.data as data then 
            {
                value -> data.blockindex = 4;
                value -> data.groupindex = 0;
                value -> data.repeatindex = evaluate(index, '$this.sectionIndex');
                value -> data.itemid = 'id_44';
                value -> data.values as values, values.value = evaluate(value, '$this.split(\'|\')[21].split(\'.\').last()'); 
            };


            // CSQ.6 -> LP1__4_0_0__ngs_panel_reftranscript
            value -> operations.data as data then 
            {
                value -> data.blockindex = 4;
                value -> data.groupindex = 0;
                value -> data.repeatindex = evaluate(index, '$this.sectionIndex');
                value -> data.itemid = 'ngs_panel_reftranscript';
                value -> data.values as values, values.value = evaluate(value, '$this.split(\'|\')[6]');
            };

            /*
            // Body.qual -> LP__4_0_0__ngs_panel_coverage
            qual -> operations.data as data then 
            {
                qual -> data.blockindex = 4;
                qual -> data.groupindex = 0;
                qual -> data.repeatindex = evaluate(index, '$this.sectionIndex');
                qual -> data.itemid = 'id_47';
                qual -> data.values as values, values.value = qual;
            };
            */
        };
    };

    // FORMAT.ID=AF -> LP__4_0_0__id_38
    src as records, records.sample as sample, sample.genotype as genotype, genotype.value as value where "$this.name = 'AF'" ->  tgt.operations as operations collate then 
    {
        value -> operations.data as data then 
        {
            value -> data.blockindex = 4;
            value -> data.groupindex = 0;
            value -> data.repeatindex = evaluate(index, '$this.sectionIndex');
            value -> data.itemid = 'id_38';
            value -> data.values as values, values.value = value, values.unit = 'percent';
        };
    };

    // FORMAT.ID=DP -> LP__4_0_0__ngs_panel_coverage
    src as records, records.sample as sample, sample.genotype as genotype, genotype.value as value where "$this.name = 'DP'" -> tgt.operations as operations collate then 
    {
        value -> operations.data as data then 
        {
            value -> data.blockindex = 4;
            value -> data.groupindex = 0;
            value -> data.repeatindex = evaluate(index, '$this.sectionIndex');
            value -> data.itemid = 'ngs_panel_coverage';
            value -> data.values as values, values.value = value;
        };
    };
}
