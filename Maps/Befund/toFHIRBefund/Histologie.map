/// version = 0.1
/// title = "nNGM: Mapping Histologie FHIR"

/*TODO

- statusabschluss status extension of extension 
- Wachstumsmuster stuff apperently not in form anymore

*/

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_HistologieFHIR" = nNGM_Mapping_HistologieFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target
uses "http://hl7.org/fhir/StructureDefinition/Specimen" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" as target


/* ------------------------------ Bundle ---------------------------- */
group TransformBundle(source src: CTS_Transport, target bundle: Bundle)
{
    // Structure: Source Content -> Target Transform then Dependent Rules
    // Source Content: Specifies one or more elements from the source that contribute to the mapping
    // Target Transform: Specifications of how to use the source content to create the target content
    // Dependent Rules: (Optional) Specifies a group or set of child rules to apply within the scope of the rule

    src -> bundle.id = uuid();
    src -> bundle.type = 'collection';

    src -> bundle.entry as entry then CreateSpecimenHistologie(src, entry);
    src -> bundle.entry as entry then CreateObservationHistologie(src, entry);
    src -> bundle.entry as entry then CreateEpisodeOfCareHistologie(src, entry);
    src -> bundle.entry as entry then CreateServiceRequestHistologie(src, entry);

}

/* ------------------------------ EpisodeOfCare ---------------------------- */

/*check if there is a EpisodeOfCare required*/
group CreateEpisodeOfCareHistologie(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            src -> tgt.resource = create('EpisodeOfCare') as episodeofcare then TransformEpisodeOfCareHistologie(src, episodeofcare);
        };
        
    };
}

group TransformEpisodeOfCareHistologie(source src: CTS_Transport, target tgt: EpisodeOfCare)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/EpisodeOfCare/nNGM';


    //subject
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    //status 
    src -> tgt.status = cast('active', 'FHIR.code');

    src.operations as operations, operations.data as data then
    {
        //Pathologie-Fall-ID
         data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            values.value as value -> tgt.identifier = create('Identifier') as untersuchungsid, untersuchungsid.system = cast('http://uk-koeln.de/fhir/NamingSystem/nNGM/fallnummer', 'FHIR.uri'), untersuchungsid.value = value;
        };

    };
}

/* ------------------------------ Specimen ---------------------------- */
group CreateSpecimenHistologie(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2515'" then
        {
            src -> tgt.resource = create('Specimen') as specimen then TransformSpecimen(src, specimen);
        };
    };
}

group TransformSpecimen(source src: CTS_Transport, target tgt: Specimen) 
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Specimen/nNGM';

    // Patient reference
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    src.operations as operations, operations.data as data then 
    {
        //Biopsy-ID
         data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1601'" then
        {
            values.value as value -> tgt.identifier = create('Identifier') as biopsieId, biopsieId.system = cast('http://uk-koeln.de/NamingSystem/nNGM/biopsienummer', 'FHIR.uri'), biopsieId.value = value;
        };

        //Eingang des Tumormaterials in der Pathologie
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2515'" then
        {
            values.value as value -> tgt.receivedTime = dateOp(value, 'dateTime');
        };

        //Eingangsnummer des Tumormaterials in der Pathologie
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2516'" then
        {
            values.value as value -> tgt.accessionIdentifier as identifier, identifier.value = value;
        };

        //Tumormaterial
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2517'" then
        {
           values.value as value -> tgt.type as type, type.text = value;
        };
    };

    //Type (1..1)
    src -> tgt.type as type, type.coding = create('Coding') as snomedGlobalPatientSet, snomedGlobalPatientSet.system = 'http://snomed.info/sct',
                                                                                        snomedGlobalPatientSet.version = 'http://snomed.info/sct/900000000000207008',
                                                    snomedGlobalPatientSet.code as code, code.extension as dataAbsentReason, dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
                                                    dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');
}



/* ------------------------------ Observation ---------------------------- */
group CreateObservationHistologie(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_1658'
                                    or blockindex = 2 and groupindex = 0 and itemid = 'id_2469'
                                    or blockindex = 2 and groupindex = 0 and itemid = 'id_2403'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_1286'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_1296'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_1294'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_1288'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_1292'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_2519'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservation(src, observation);
        };
    };
}

group TransformObservation(source src: CTS_Transport, target tgt: Observation)
{
    // Resource information
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/histologie';

    // Patient reference
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    //code
    src -> tgt.code = cc('http://ncit.nci.nih.gov', 'C18000');

    //status
    src -> tgt.status as code, 
            code.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    // Observation data 
    src.operations as operations, operations.data as data then 
    {

        //Klassifikation
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_1658'" then
        {
            values.value as value -> tgt.component = create('CodeableConcept') as klassifikation,
            klassifikation.code = cc('http://ncit.nci.nih.gov', 'C25161'),
            klassifikation.valueCodeableConcept as vcc,
            vcc.coding as coding,
            coding.system = 'http://uk-koeln.de/fhir/ValueSet/nngm/histologie-klassifikation', 
            coding.code = evaluate(value, '$this.split(\'\\t\').first()'),
            coding.display = evaluate(value, '$this.split(\'\\t\').last()');
        };

        //Lokalisation
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2469'" then
        {
            values.value as value -> tgt.bodySite = create('CodeableConcept') as cc, cc.coding as coding, 
            coding.system = 'http://uk-koeln.de/fhir/ValueSet/nngm/grading',
            coding.code = evaluate(value, '$this.split(\'\\t\').first()'),
            coding.display = evaluate(value, '$this.split(\'\\t\').last()');
        };

        //Grading
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2403'" then
        {
            values.value as value -> tgt.valueCodeableConcept = create('CodeableConcept') as cc, cc.coding as coding, 
            coding.system = 'http://uk-koeln.de/fhir/ValueSet/icd-o-3-bodysite',
            coding.code = evaluate(value, '$this.split(\'\\t\').first()'),
            coding.display = evaluate(value, '$this.split(\'\\t\').last()');
        };

        /*
        //Wachstumsmuster bei Adenokarzinom lepidisch
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1286'" then
        {
            values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8250/3');
            }; 
        };

        //Wachstumsmuster bei Adenokarzinom azinär
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1296'" then
        {
            values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8551/3');
            }; 
        };

        // 18: Wachstumsmuster bei Adenokarzinom papillär
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1294'" then
        {
            values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8260/3');
            }; 
        };
        
        //Wachstumsmuster bei Adenokarzinom mikropapillär
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1288'" then
        {
            values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8265/3');
            }; 
        };

        //Wachstumsmuster bei Adenokarzinom solide
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1292'" then
        {
            values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(wachstumsmuster, quantity);
                wachstumsmuster -> component.code = cc('urn:oid:2.16.840.1.113883.6.43.1', '8230/3');
            }; 
        };

        //Anteil an Siegelringzellkarzinomen   
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2519'" then
        {
             values.value as wachstumsmuster -> tgt.component = create('BackboneElement') as component then
            {
                wachstumsmuster -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(wachstumsmuster, quantity);
            }; 
        };

        */
    };
}

/*
group MapPercentageValue(source src: string, target tgt: Quantity)
{
    src -> tgt.value = src,
            tgt.system = 'http://unitsofmeasure.org',
            tgt.unit = 'percentage',
            tgt.code = '%';
}
*/

/* ------------------------------ ServiceRequest ---------------------------- */
group CreateServiceRequestHistologie(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2520'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2462'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2521'" then
        {
            src -> tgt.resource = create('ServiceRequest') as servicerequest then TransformServiceRequest(src, servicerequest);
        };
    };
}

group TransformServiceRequest(source src: CTS_Transport, target tgt: ServiceRequest)
{
    // Resource information
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/ServiceRequest/nNGM/testung';


    //intent
    src -> tgt.intent = 'proposal';

    //Category
    src -> tgt.category as category, 
            category.coding as coding,
            coding.code as code,
            code.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');
                
    //code
    src -> tgt.code as category, 
            category.coding as coding,
            coding.code as code,
            code.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    src -> tgt.code as category collate, 
            category.coding as coding,
            coding.system as code,
            code.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');


    // Subject
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    //authoredOn
    src -> tgt.authoredOn as code, 
            code.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');
    
    src.operations as operations, operations.data as data then 
    {

        //status
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2520'" then
        {
            values.value as value -> tgt.status = cast(value, 'FHIR.code');
        };

        
        //ext statusabschluss
        //Abwesenheit oder Vorhandensein von Metastasen
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2462'" then
        {
            values.value as value -> tgt.status as status, status.extension as ext collate,
            ext.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss' collate,
            ext.extension as statusabschluss collate,
                         statusabschluss.url = 'status',
                         statusabschluss.valueCodeableConcept as vcc, vcc.coding as coding, coding.code = value then
                         {
                            
                            src.operations as operations, operations.data as data then 
                            {
                                //abschluss datum
                                data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2521'" then
                                {
                                    values.value as value -> tgt.status as status, status.extension as ext collate,
                                    ext.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss' collate,
                                    ext.extension as statusabschluss collate,
                                                     statusabschluss.url = 'datum',
                                                      statusabschluss.valueDate = value;
                                };  
                            };
                         };
        };
    };
}
