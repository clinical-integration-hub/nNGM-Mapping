/// version = 0.1
/// title = "SonstigeUntersuchungenMap"
/*
    TODO
    OBSERVATION -> to create the observation resource the  "repeatindex = 0" to the condition where
    SERVICEREQUEST -> Abschluss: the status extension don't properly work, it doesn't appear although there is data in the
                    in the CTS structure (SAME ISSUE AS FAST TRACK MAPPING: DISCUSSED ON 20.08.2020 STAND UP MEETING)
*/
map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_SonstigeUntersuchungenMap" = nNGM_Mapping_SonstigeUntersuchungenMap

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source

uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" as target
uses "http://hl7.org/fhir/StructureDefinition/Organization" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" as target

group TransformBundle(source src: CTS_Transport, target bundle: Bundle)
{
    src -> bundle.id = uuid();
    src -> bundle.type = 'collection';

    //Check if any fields are filled in before creating the Speciment
    src -> bundle.entry as entry then CreateTransformSpecimen(src, entry);

    //Check if any fields are filled in before creating the DiagnosticReport
    src -> bundle.entry as entry then CreateTransformDiagnosticReport(src, entry);

    //Check if any fields are filled in before creating the Organization
    src -> bundle.entry as entry then CreateTransformOrganization(src, entry);

    //Check if any fields are filled in before creating the observation
    src -> bundle.entry as entry then CreateTransformObservation(src, entry);

    //Check if any fields are filled in before creating the ServiceRequest
    src -> bundle.entry as entry then CreateTransformServiceRequest(src, entry);
}

group CreateTransformSpecimen(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1601'" then
        {
            src -> tgt.resource = create('Specimen') as specimen then TransformSpecimen(src, specimen);
        };
    };
}

/* ------------------------------ Specimen ---------------------------- */
group TransformSpecimen(source src: CTS_Transport, target tgt: Specimen)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Specimen/nNGM';

    // Type
    src -> tgt.type as type, type.coding as snomedGlobalPatientSet, snomedGlobalPatientSet.system = 'http://snomed.info/sct',
                                                                    snomedGlobalPatientSet.version = 'http://snomed.info/sct/900000000000207008',
                                                                    snomedGlobalPatientSet.code = 'UNKNOWN';

    // Patient reference 
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    src.operations as operations, operations.data as data then
    {
        /* ------------------------------ Healex Referenzen ---------------------------- */
        // Biopsy-ID
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1601'" then
        {
            values.value as bid -> tgt.identifier = create('identifier') as biopsieID,
                                                            biopsieID.system= 'http://uk-koeln.de/NamingSystem/nNGM/biopsienummer',
                                                            biopsieID.value = bid;
        };

    };
}

group CreateTransformDiagnosticReport(source src: CTS_Transport, target tgt: BackboneElement)
{

    src.operations as operations, operations.data as data then
    {   
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            src -> tgt.resource = create('DiagnosticReport') as diagnosticReport then TransformDiagnosticReport(src, diagnosticReport);
        };
    };
}

group TransformDiagnosticReport(source src: CTS_Transport, target tgt: DiagnosticReport)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/DiagnosticReport/nNGM/befund';

    src ->  tgt.status as status, 
            status.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    src ->  tgt.code as code, 
            code.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    src.operations as operations, operations.data as data then
    {
        //Referenzen
        //Untersuchungs-ID
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            values.value as id -> tgt.identifier = create('Identifier') as befundNummer,
                                                          befundNummer.system = 'http://uk-koeln.de/NamingSystem/nNGM/befundnummer',
                                                          befundNummer.value = id;
        };
    };
}

/* ------------------------------ Organization ---------------------------- */
group CreateTransformOrganization(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            src -> tgt.resource = create('Organization') as organization then TransformOrganization(src, organization);
        };
    };
}

/* ------------------------------ Organization ---------------------------- */
group TransformOrganization(source src: CTS_Transport, target tgt: Organization)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://clinicalsite.org/fhir/StructureDefinition/organizationalunit';

    src.operations as operations, operations.data as data then
    {
        /* ------------------------------ Netzwerkzentrum ---------------------------- */
        // Standort
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as name -> tgt.name = name;
        };

    };
}

/* ------------------------------ Observation ---------------------------- */
group CreateTransformObservation(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid ='id_2618'
                                    or blockindex = 3 and groupindex = 0 and repeatindex = 0 and itemid ='id_2527'
                                    or blockindex = 3 and groupindex = 0 and repeatindex = 0 and itemid ='id_2026'
                                    or blockindex = 3 and groupindex = 0 and repeatindex = 0 and itemid ='id_2027'
                                    or blockindex = 3 and groupindex = 0 and repeatindex = 0 and itemid ='id_2028'
                                    or blockindex = 3 and groupindex = 0 and repeatindex = 0 and itemid ='id_2282'
                                    or blockindex = 3 and groupindex = 0 and repeatindex = 0 and itemid ='id_2283'
                                    or blockindex = 3 and groupindex = 0 and repeatindex = 0 and itemid ='id_2031'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservation(src, observation);
        };
    };
}

/* ------------------------------------ Observation ----------------------------------- */
group TransformObservation(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/weitere-untersuchung';
    
    src ->  tgt.status as status, 
            status.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    src -> tgt.method = cc('http://loinc.org','69548-6');

    src.operations as operations, operations.data as data then
    {
        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2618'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as componentSop then
            {
                sop -> componentSop.valueString = sop;
                sop -> componentSop.code = cc('http://ncit.nci.nih.gov', 'C48443');
            };
        };
        // Date of Assessment
        data.values as values where "blockindex = 3 and groupindex = 0 and repeatindex = 0 and itemid ='id_2527'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Bezeichnung
        data.values as values where "blockindex = 3 and groupindex = 0 and repeatindex = 0 and itemid ='id_2026'" then
        {
            values.value as value -> tgt.code = create('CodeableConcept') as code then
            {
                value -> code.coding as coding, 
                            coding.system = 'http://loinc.org',
                            coding.code = '69548-6';
                value -> code.text = value;
            };
        };
        // Assay
        data.values as values where "blockindex = 3 and groupindex = 0 and repeatindex = 0 and itemid ='id_2027'" then
        {
            values.value as assay -> tgt.component = create('BackboneElement') as componentAssay then
            {
                assay -> componentAssay.code = cc('http://ncit.nci.nih.gov', 'C60819');
                assay -> componentAssay.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ish-fish-kits', assay) ;
            };
        };

        // Hersteller
        data.values as values where "blockindex = 3 and groupindex = 0 and repeatindex = 0 and itemid ='id_2028'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hersteller-molpatho', hersteller);
            };
        };
        
        //Gen
        data.values as values where "blockindex = 3 and groupindex = 0 and repeatindex = 0 and itemid ='id_2282'" then
        {
            values.value as geneStudied -> tgt.component = create('BackboneElement') as componentGeneStudied then
            {
                geneStudied -> componentGeneStudied.code = cc('http://ncit.nci.nih.gov', '48018-6');
                geneStudied -> componentGeneStudied.valueCodeableConcept = cc('http://hl7.org/fhir/uv/genomics-reporting/ValueSet/hgnc', geneStudied);
            };
        };
        //Phaenotyp
        data.values as values where "blockindex = 3 and groupindex = 0 and repeatindex = 0 and itemid ='id_2283'" then
        {
            
            values.value as phaenotyp where "$this.value = 'Expression'" then 
            {
                phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp -> componentPhaenotyp.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/phenotypes', 'C80488');
                };
            };
            values.value as phaenotyp where "$this.value = 'Fusion Gene'" then 
            {
                phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp -> componentPhaenotyp.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/phenotypes', 'C28510');
                };
            };
            values.value as phaenotyp where "$this.value = 'Amplification'" then 
            {
                phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp -> componentPhaenotyp.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/phenotypes', 'C25418');
                };
            };
            values.value as phaenotyp where "$this.value != 'Amplification' and $this.value != 'Expression' and $this.value != 'Fusion Gene'" then 
            {
                phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
                {
                    phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
                    phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                };
            };
        };
        // Ergebnis
        data.values as values where "blockindex = 3 and groupindex = 0  and repeatindex = 0 and itemid = 'id_2031'" then
        {
            values.value as ergebnis where "$this.value = 'positiv'" then 
            {
                ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', 'aktivierende-Mutation');
            };
            values.value as ergebnis where "$this.value = 'negativ'" then 
            {
                ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', 'keine-aktivierende-Mutation');
            };
            values.value as ergebnis where "$this.value = 'nicht auswertbar'" then 
            {
                ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', 'nicht-auswertbar');
            };
        };
    };
}


/* -------------------------------------- Service Request -------------------------------------------- */
group CreateTransformServiceRequest(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2520'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2462'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2521'" then
        {
            src -> tgt.resource = create('ServiceRequest') as serviceRequest then TransformServiceRequest(src, serviceRequest);
        };
    };
}


group TransformServiceRequest(source src: CTS_Transport, target tgt: ServiceRequest)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/ServiceRequest/nNGM/testung';
    src -> tgt.intent = 'proposal';
    src.operations as operations, operations.data as data then
    {
        //Status der Untersuchungen
        //Durchfuehrung
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2520'" then
        {
            values.value as value where "$this.value = 'in Bearbeitung'" then 
            {
                value -> tgt.status = 'active';
            };
            values.value as value where "$this.value = 'abgeschlossen'" then 
            {
                value -> tgt.status = 'completed';
            };
            
        };
        //TODO
        //Abschluss
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2462'" then
        {
            values.value as value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.extension as statusExtension then
            {
                value -> statusExtension.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/NNGM/statusAbschluss', value);
                value -> statusExtension.url = 'status';
            };
        };
        //Datum des Abschlusses
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as value -> tgt.status as status, status.extension as statusAbschluss collate, statusAbschluss.extension as datumExtension then
            {
                value -> datumExtension.valueDate = dateOp(value, 'date');
                value -> datumExtension.url = 'datum';
            };

        };
    };
}