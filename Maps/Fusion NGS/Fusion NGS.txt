///version =0.1
///title = "Fusion NGS"

map "http://uk-koeln.de/fhir/StructureMap/FusionNGS" = FusionNGS

uses "http://hl7.org/fhir/StructureDefinition/CST_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/Specimen" as target
uses "http://hl7.org/fhir/StructureDefinition/EpisodeOfCare" as target
uses "http://hl7.org/fhir/StructureDefinition/Organization" as target 
uses "http://hl7.org/fhir/StructureDefinition/ServiceReqeust" as target

group TrnsformBundle(source src: CST_Transport, target bunle: Bundle)
{
    src -> bundle.id = uuid();
    src -> bundle.type = 'colletion';

    src -> bundle.entry as entry then CreatTranformSpecimen(src, entry);
    src -> bundle.entry as entry then CreatTranformEpisodeOfCare(src, entry);
    src -> bundle.entry as entry then CreatTranformOrganization(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationMethodik(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationALK(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationRET(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationROS1(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationNTRK1(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationNTRK2(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationNTRK3(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationFGFR1(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationFGFR2(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationFGFR3(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationSonstigeFusionNgs(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationNTRK1(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationNTRK2(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationNTRK3(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationFGFR1(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationFGFR2(src, entry);
    src -> bundle.entry as entry then CreatTranformObservationFGFR3(src, entry);
    src -> bundle.entry as entry then CreatTranformServiceReqeust(src, entry);
}
/*----------------------------Specimen----------------------*/
/*CodeableConcept*/

/*------------------------EpisodeOfCare---------------------*/
group CreatTranformEpisodeOfCare(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 1 and groupindex = 0 and item = 'assessment_id' " then
        {
            src -> tgt.resource= creat ('EpisodeOfCare') as episodeofCare then TranformEpisodeOfCare(src, episodeofCare);
        };
    };
}
group TransformEpisodeOfCare(source src: CTS_Transport, target tgt: EpisodeOfCare)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/EpisodeOfCare/nNGM';
    
    //src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    src.operations as operations, operations.data as data then
    {
        src -> tgt.status = cast('active', 'FHIR.code');
        src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');
        
        /* ------------------------------ Referenzen ---------------------------- */
        // Untersuchungs-ID
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            values.value as value ->    tgt.identifier as identifier,
                                        identifier.value = value;
        };
    };
}
/*------------------------Organization---------------------*/
group CreatTranformOrganization(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.value as value where "blockindex = 2 and groupindex = 0 and item = 'id_2435'  
        or blockindex = 2 and groupindex = 0 and item = 'id_2612 ' " then
        {
            src -> tgt.resource= creat ('Organization') as organization then TranformOrganization(src, organization);
        };
    };
}
/* ------------------------------ Organization ---------------------------- */
group TransformOrganization(source src: CTS_Transport, target tgt: Organization)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Organization/clinical-site';

    src.operations as operations, operations.data as data then
    {
        /* ------------------------------ Netzwerkzentrum ---------------------------- */
        // Standort
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as name -> tgt.name = name;
        };        
        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2612'" then
        {
            values.value as text -> tgt.type as type, type.text = text;
        };
    };
}
/* ------------------------------ Observation Methodik---------------------------- */
group CreateTransformObservationMethodik(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.value as value where "blockindex = 3 and groupindex = 0 and item = 'id_2538'
        or blockindex = 3 and groupindex = 0 and item = 'id_2539'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationMethodik(src, observation);
        };
    };
}
/* ------------------------------ Observation Methodik---------------------------- */
group CreateTransformObservationMethodik(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //Methodik code
        src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'Methodik');


    src.operations as operations, operations.data as data then
    {
         // Assay
        data.values as values where "blockindex = 3 and groupindex = 0 and item = 'id_2538'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentAssay then
            {
                values.value as Assay ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ngs-assays', assay, assay);
            };
        };

        // Hersteller
        data.values as values where "blockindex = 3 and groupindex = 0 and item = 'id_2539'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('hhttp://uk-koeln.de/fhir/ValueSet/hersteller-molpatho', hersteller);
            };
        };

        
    };
}
/* ------------------------------ Observation ALK--------------------------- */
group CreateTransformObservationALK(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and item = 'id_2098'
        or blockindex = 5 and groupindex = 0 and item = 'id_2099'
        or blockindex = 5 and groupindex = 0 and item = 'id_2027'
        or blockindex = 5 and groupindex = 0 and item = 'id_2128'
        or blockindex = 5 and groupindex = 0 and item = 'id_2129'
        or blockindex = 5 and groupindex = 0 and item = 'id_2130'
        or blockindex = 5 and groupindex = 0 and item = 'id_2131'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationALK(src, observation);
        };
    };
}
/* ------------------------------ Observation ALK--------------------------- */
group TransformObservationALK(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    //ALK code
        src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'ALK');

    //IHC category
    src then MapIHCCategory(src, tgt);


    src.operations as operations, operations.data as data then
    {

        // Date of Assessment
        data.values as values where "blockindex = 5 and groupindex = 0 and item = 'id_2183'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };
         data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phaenotyp
        data.values as values where "blockindex = 5 and groupindex = 0 and item = 'id_2184'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
            {
                phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };
         // Ergebnis
        data.values as values where "blockindex = 5 and groupindex = 0 and item = 'id_2227''" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
        // Fusionspartner
        data.values as values where "blockindex = 5 and groupindex = 0 and item = 'id_2228'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
               
                fusionspartner -> componentFusionspartner.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hgnc-codes', fusionspartner);
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
         // Anzahl der Fusionsreads
        data.values as values where "blockindex = 5 and groupindex = 0 and item = 'id_2229''" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentAnzahlderFusionsreads then
            {
                anzahlderfusionsreads-> componentanzahlderfusionsreads.valueInteger = create('Integer') as integer then MapValue(anzahlderfusionsreads, integer);
                anzahlderfusionsreads-> componentanzahlderfusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };
        // 5' Fusionspartner exon
        data.values as values where "blockindex = 5 and groupindex = 0 and item = 'id_2230''" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartnerExon then
            {
                fusionspartnerexon -> componentfusionspartnerexon.valueInteger = create('Integer') as integer then MapValue(fusionspartnerexon, integer);
                fusionspartnerexon -> componentfusionspartnerexon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };
         //ALK Exon
        data.values as values where "blockindex = 5 and groupindex = 0 and item = 'id_2231''" then
        {
            values.value as component-> tgt.component = create('BackboneElement') as componentExon then
            {
                exon -> componentexon.valueInteger= create('Integer') as integer then MapValue(exon, integer);
                exon -> componentexon.code = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };
    };
}
/* ------------------------------ Observation RET---------------------- */
group CreateTransformObservationRET(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and item = 'id_2183'
        or blockindex = 6 and groupindex = 0 and item = 'id_2184'
        or blockindex = 6 and groupindex = 0 and item = 'id_2206'
        or blockindex = 6 and groupindex = 0 and item = 'id_2207'
        or blockindex = 6 and groupindex = 0 and item = 'id_2208'
        or blockindex = 6 and groupindex = 0 and item = 'id_2209'
        or blockindex = 6 and groupindex = 0 and item = 'id_2210" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationRET(src, observation);
        };
    };
}
/* ------------------------------ Observation RET--------------------------- */
group TransformObservationRET(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    //RET code
        src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'RET');

    //IHC category
    src then MapIHCCategory(src, tgt);

    src.operations as operations, operations.data as data then
    {

        // Date of Assessment
        data.values as values where "blockindex = 6 and groupindex = 0 and item = 'id_2183'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };
         data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phaenotyp
        data.values as values where "blockindex = 6 and groupindex = 0 and item = 'id_2184'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
            {
                phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };
         // Ergebnis
        data.values as values where "blockindex = 6 and groupindex = 0 and item = 'id_2206'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
        // Fusionspartner
        data.values as values where "blockindex = 6 and groupindex = 0 and item = 'id_2207'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartner then
             {
               
                fusionspartner -> componentFusionspartner.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hgnc-codes', fusionspartner);
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
         // Anzahl der Fusionsreads
        data.values as values where "blockindex = 6 and groupindex = 0 and item = 'id_2208''" then
        {
            values.value as component  -> tgt.component = create('BackboneElement') as componentAnzahlderFusionsreads then
            {
                anzahlderfusionsreads-> componentanzahlderfusionsreads.valueInteger = create('Integer') as integer then MapValue(anzahlderfusionsreads, integer);
                anzahlderfusionsreads-> componentanzahlderfusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };
        // 5' Fusionspartner exon
        data.values as values where "blockindex = 6 and groupindex = 0 and item = 'id_2209''" then
        {
            values.value as component  -> tgt.component = create('BackboneElement') as componentFusionspartnerExon then
            {
                fusionspartnerexon -> componentfusionspartnerexon.valueInteger = create('Integer') as integer then MapValue(fusionspartnerexon, integer);
                fusionspartnerexon -> componentfusionspartnerexon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };
         //RET Exon
        data.values as values where "blockindex = 6 and groupindex = 0 and item = 'id_2210''" then
        {
             values.value as component  -> tgt.component = create('BackboneElement') as componentExon then
            {
                exon -> componentexon.valueInteger= create('Integer') as integer then MapValue(exon, integer);
                exon -> componentexon.code = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };
    };
}
/* ------------------------------ Observation ROS1-------------------------- */
group CreateTransformObservationALK(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and item = 'id_2211'
        or blockindex = 7 and groupindex = 0 and item = 'id_2212'
        or blockindex = 7 and groupindex = 0 and item = 'id_2241'
        or blockindex = 7 and groupindex = 0 and item = 'id_2242'
        or blockindex = 7 and groupindex = 0 and item = 'id_2243'
        or blockindex = 7 and groupindex = 0 and item = 'id_2244'
        or blockindex = 7 and groupindex = 0 and item = 'id_2245'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationROS1(src, observation);
        };
    };
}
/* ------------------------------ Observation ROS1---------------------------- */
group TransformObservationROS1(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    //ROS1 code
        src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'RET');

    //IHC category
    src then MapIHCCategory(src, tgt);


    src.operations as operations, operations.data as data then
    {

        // Date of Assessment
        data.values as values where "blockindex = 6 and groupindex = 0 and item = 'id_2211'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };
         data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phaenotyp
        data.values as values where "blockindex = 7 and groupindex = 0 and item = 'id_2212'" then
         {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
            {
                phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };
         // Ergebnis
        data.values as values where "blockindex = 7 and groupindex = 0 and item = 'id_2241'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
        // Fusionspartner
        data.values as values where "blockindex = 7 and groupindex = 0 and item = 'id_2242'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
               
                fusionspartner -> componentFusionspartner.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hgnc-codes', fusionspartner);
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
         // Anzahl der Fusionsreads
        data.values as values where "blockindex = 7 and groupindex = 0 and item = 'id_2243'" then
          {
            values.value as component  -> tgt.component = create('BackboneElement') as componentAnzahlderFusionsreads then
            {
                anzahlderfusionsreads-> componentanzahlderfusionsreads.valueInteger = create('Integer') as integer then MapValue(anzahlderfusionsreads, integer);
                anzahlderfusionsreads-> componentanzahlderfusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };
        // 5' Fusionspartner exon
        data.values as values where "blockindex = 7 and groupindex = 0 and item = 'id_2244'" then
         {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartnerExon then
            {
                fusionspartnerexon -> componentfusionspartnerexon.valueInteger = create('Integer') as integer then MapValue(fusionspartnerexon, integer);
                fusionspartnerexon -> componentfusionspartnerexon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };
         //ROS1 Exon
        data.values as values where "blockindex = 7 and groupindex = 0 and item = 'id_2245'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentExon then
            {
                exon -> componentexon.valueInteger= create('Integer') as integer then MapValue(exon, integer);
                exon -> componentexon.code = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };
    };
}
/* ------------------------------ Observation NTRK1-------------------------- */
group CreateTransformObservationNTRK1(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 8 and groupindex = 0 and item = 'id_2540'
        or blockindex = 8 and groupindex = 0 and item = 'id_2547'
        or blockindex = 8 and groupindex = 0 and item = 'id_2548'
        or blockindex = 8 and groupindex = 0 and item = 'id_2549'
        or blockindex = 8 and groupindex = 0 and item = 'id_2550'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationNTRK1(src, observation);
        };
    };
}
/* ------------------------------ Observation NTRK1---------------------------- */
group TransformObservationNTRK1(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //NTRK1 code
        src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'NTRK1');


    src.operations as operations, operations.data as data then
    {

        // Date of Assessment valueDT
        data.values as values where "blockindex = 8 and groupindex = 0 and item = 'id_2540'" then
        {
            values.value as dateofassessment -> tgt.effectiveDateTime= dateOp(dateofassessment, 'datetime');
        };
         
         // Ergebnis
        data.values as values where "blockindex = 8 and groupindex = 0 and item = 'id_2547'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
        // Fusionspartner
        data.values as values where "blockindex = 8 and groupindex = 0 and item = 'id_2548'" then
         {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
               
                fusionspartner -> componentFusionspartner.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hgnc-codes', fusionspartner);
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
         // Anzahl der Fusionsreads
        data.values as values where "blockindex = 8 and groupindex = 0 and item = 'id_2549'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentAnzahlderFusionsreads then
            {
                anzahlderfusionsreads-> componentanzahlderfusionsreads.valueInteger = create('Integer') as integer then MapValue(anzahlderfusionsreads, integer);
                anzahlderfusionsreads-> componentanzahlderfusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };
        // 5' Fusionspartner exon
        data.values as values where "blockindex = 8 and groupindex = 0 and item = 'id_2550'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartnerExon then
            {
                fusionspartnerexon -> componentfusionspartnerexon.valueInteger = create('Integer') as integer then MapValue(fusionspartnerexon, integer);
                fusionspartnerexon -> componentfusionspartnerexon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };
    };
}

/* ------------------------------ Observation NTRK2-------------------------- */
group CreateTransformObservationNTRK2(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 9 and groupindex = 0 and item = 'id_2592'
        or blockindex = 9 and groupindex = 0 and item = 'id_2596'
        or blockindex = 9 and groupindex = 0 and item = 'id_2597'
        or blockindex = 9 and groupindex = 0 and item = 'id_2598'
        or blockindex = 9 and groupindex = 0 and item = 'id_2599" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationNTRK2(src, observation);
        };
    };
}
/* ------------------------------ Observation NTRK2---------------------------- */
group TransformObservationNTRK2(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //NTRK2 code
        src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'NTRK2');


    src.operations as operations, operations.data as data then
    {

        // Date of Assessment ValueDT
        data.values as values where "blockindex = 9 and groupindex = 0 and item = 'id_2592'" then
        {
            values.value as dateofassessment -> tgt.effectiveDateTime= dateOp(dateofassessment, 'datetime');
        };
    

         // Ergebnis
        data.values as values where "blockindex = 9 and groupindex = 0 and item = 'id_2596'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
        // Fusionspartner
        data.values as values where "blockindex = 9 and groupindex = 0 and item = 'id_2597'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
               
                fusionspartner -> componentFusionspartner.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hgnc-codes', fusionspartner);
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
         // Anzahl der Fusionsreads
        data.values as values where "blockindex = 9 and groupindex = 0 and item = 'id_2598'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentAnzahlderFusionsreads then
            {
                anzahlderfusionsreads-> componentanzahlderfusionsreads.valueInteger = create('Integer') as integer then MapValue(anzahlderfusionsreads, integer);
                anzahlderfusionsreads-> componentanzahlderfusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };
        // 5' Fusionspartner exon
        data.values as values where "blockindex = 9 and groupindex = 0 and item = 'id_2599'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartnerExon then
            {
                fusionspartnerexon -> componentfusionspartnerexon.valueInteger = create('Integer') as integer then MapValue(fusionspartnerexon, integer);
                fusionspartnerexon -> componentfusionspartnerexon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };       
    };
}
/* ------------------------------ Observation NTRK3-------------------------- */
group CreateTransformObservationNTRK3(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 10 and groupindex = 0 and item = 'id_2584'
        or blockindex = 10 and groupindex = 0 and item = 'id_2588'
        or blockindex = 10 and groupindex = 0 and item = 'id_2589'
        or blockindex = 10 and groupindex = 0 and item = 'id_2590'
        or blockindex = 10 and groupindex = 0 and item = 'id_2591" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationNTRK2(src, observation);
        };
    };
}
/* ------------------------------ Observation NTRK3---------------------------- */
group TransformObservationNTRK3(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //NTRK3 code
        src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'NTRK3');


    src.operations as operations, operations.data as data then
    {

        // Date of Assessment VALUEDT
        data.values as values where "blockindex = 10 and groupindex = 0 and item = 'id_2584'" then
        {
            values.value as dateofassessment -> tgt.effectiveDateTime= dateOp(dateofassessment, 'datetime');
        };
         
         // Ergebnis
        data.values as values where "blockindex = 10 and groupindex = 0 and item = 'id_2588'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
        // Fusionspartner
        data.values as values where "blockindex = 10 and groupindex = 0 and item = 'id_2589'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
               
                fusionspartner -> componentFusionspartner.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hgnc-codes', fusionspartner);
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
         // Anzahl der Fusionsreads
        data.values as values where "blockindex = 10 and groupindex = 0 and item = 'id_2590'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentAnzahlderFusionsreads then
            {
                anzahlderfusionsreads-> componentanzahlderfusionsreads.valueInteger = create('Integer') as integer then MapValue(anzahlderfusionsreads, integer);
                anzahlderfusionsreads-> componentanzahlderfusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };
        // 5' Fusionspartner exon
        data.values as values where "blockindex = 10 and groupindex = 0 and item = 'id_2591'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartnerExon then
            {
                fusionspartnerexon -> componentfusionspartnerexon.valueInteger = create('Integer') as integer then MapValue(fusionspartnerexon, integer);
                fusionspartnerexon -> componentfusionspartnerexon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };      
    };
}
/* ------------------------------ Observation FGFR1-------------------------- */
group CreateTransformObservationFGFR1(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 10 and groupindex = 0 and item = 'id_2576'
        or blockindex = 10 and groupindex = 0 and item = 'id_2580'
        or blockindex = 11 and groupindex = 0 and item = 'id_2581'
        or blockindex = 11 and groupindex = 0 and item = 'id_2582'
        or blockindex = 11 and groupindex = 0 and item = 'id_2583'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationFGFR1(src, observation);
        };
    };
}
/* ------------------------------ Observation FGFR1---------------------------- */
group TransformObservationFGFR1(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //FGFR1 code
        src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'FGFR1');


    src.operations as operations, operations.data as data then
    {

        // Date of Assessment VALUEDT
        data.values as values where "blockindex = 10 and groupindex = 0 and item = 'id_2576'" then
        {
            values.value as dateofassessment -> tgt.effectiveDateTime= dateOp(dateofassessment, 'datetime');
        };       

        // Ergebnis
        data.values as values where "blockindex = 10 and groupindex = 0 and item = 'id_2580'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
        // Fusionspartner
        data.values as values where "blockindex = 11 and groupindex = 0 and item = 'id_2581'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
               
                fusionspartner -> componentFusionspartner.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hgnc-codes', fusionspartner);
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
         // Anzahl der Fusionsreads
        data.values as values where "blockindex = 11 and groupindex = 0 and item = 'id_2582'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentAnzahlderFusionsreads then
            {
                anzahlderfusionsreads-> componentanzahlderfusionsreads.valueInteger = create('Integer') as integer then MapValue(anzahlderfusionsreads, integer);
                anzahlderfusionsreads-> componentanzahlderfusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };
        // 5' Fusionspartner exon
        data.values as values where "blockindex = 11 and groupindex = 0 and item = 'id_2583'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartnerExon then
            {
                fusionspartnerexon -> componentfusionspartnerexon.valueInteger = create('Integer') as integer then MapValue(fusionspartnerexon, integer);
                fusionspartnerexon -> componentfusionspartnerexon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };       
    };
}
/* ------------------------------ Observation FGFR2-------------------------- */
group CreateTransformObservationFGFR2(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 12 and groupindex = 0 and item = 'id_2568'
        or blockindex = 12 and groupindex = 0 and item = 'id_2572'
        or blockindex = 12 and groupindex = 0 and item = 'id_2573'
        or blockindex = 12 and groupindex = 0 and item = 'id_2574'
        or blockindex = 12 and groupindex = 0 and item = 'id_2575'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationFGFR2(src, observation);
        };
    };
}
/* ------------------------------ Observation FGFR2---------------------------- */
group TransformObservationFGFR2(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //FGFR1 code
        src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'FGFR2');


    src.operations as operations, operations.data as data then
    {

        // Date of Assessment VALUEDT
        data.values as values where "blockindex = 12 and groupindex = 0 and item = 'id_2568'" then
        {
            values.value as dateofassessment -> tgt.effectiveDateTime= dateOp(dateofassessment, 'datetime');
        };      

        // Ergebnis
        data.values as values where "blockindex = 12 and groupindex = 0 and item = 'id_2572'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
        // Fusionspartner
        data.values as values where "blockindex = 12 and groupindex = 0 and item = 'id_2573'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
               
                fusionspartner -> componentFusionspartner.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hgnc-codes', fusionspartner);
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
         // Anzahl der Fusionsreads
        data.values as values where "blockindex = 12 and groupindex = 0 and item = 'id_2574'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentAnzahlderFusionsreads then
            {
                anzahlderfusionsreads-> componentanzahlderfusionsreads.valueInteger = create('Integer') as integer then MapValue(anzahlderfusionsreads, integer);
                anzahlderfusionsreads-> componentanzahlderfusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };
        // 5' Fusionspartner exon
        data.values as values where "blockindex = 12 and groupindex = 0 and item = 'id_2575'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartnerExon then
            {
                fusionspartnerexon -> componentfusionspartnerexon.valueInteger = create('Integer') as integer then MapValue(fusionspartnerexon, integer);
                fusionspartnerexon -> componentfusionspartnerexon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };        
    };
}
/* ------------------------------ Observation FGFR3-------------------------- */
group CreateTransformObservationFGFR3(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 13 and groupindex = 0 and item = 'id_2560'
        or blockindex = 13 and groupindex = 0 and item = 'id_2564'
        or blockindex = 13 and groupindex = 0 and item = 'id_2565'
        or blockindex = 13 and groupindex = 0 and item = 'id_2566'
        or blockindex = 13 and groupindex = 0 and item = 'id_2567'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationFGFR3(src, observation);
        };
    };
}
/* ------------------------------ Observation FGFR3-------------------------- */
group TransformObservationFGFR3(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //FGFR3 code
        src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'FGFR3');


    src.operations as operations, operations.data as data then
    {

        // Date of Assessment VALUEDT
        data.values as values where "blockindex = 13 and groupindex = 0 and item = 'id_2560'" then
        {
            values.value as dateofassessment -> tgt.effectiveDateTime= dateOp(dateofassessment, 'datetime');
        }; 
         // Ergebnis
        data.values as values where "blockindex = 13 and groupindex = 0 and item = 'id_2564''" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
        // Fusionspartner
        data.values as values where "blockindex = 13 and groupindex = 0 and item = 'id_2565'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartner then
            {
               
                fusionspartner -> componentFusionspartner.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hgnc-codes', fusionspartner);
                fusionspartner -> componentFusionspartner.code = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
         // Anzahl der Fusionsreads
        data.values as values where "blockindex = 13 and groupindex = 0 and item = 'id_2566'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentAnzahlderFusionsreads then
            {
                anzahlderfusionsreads-> componentanzahlderfusionsreads.valueInteger = create('Integer') as integer then MapValue(anzahlderfusionsreads, integer);
                anzahlderfusionsreads-> componentanzahlderfusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };
        // 5' Fusionspartner exon
        data.values as values where "blockindex = 13 and groupindex = 0 and item = 'id_2567'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentFusionspartnerExon then
            {
                fusionspartnerexon -> componentfusionspartnerexon.valueInteger = create('Integer') as integer then MapValue(fusionspartnerexon, integer);
                fusionspartnerexon -> componentfusionspartnerexon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };      
    };
}
/* ------------------------------ Observation Sonstige Fusion NGS-------------------------- */
group CreateTransformObservationSonstigeFusionNGS(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 13 and groupindex = 0 and item = 'id_2246'
        or blockindex = 13 and groupindex = 0 and item = 'id_2254'
        or blockindex = 13 and groupindex = 0 and item = 'id_2255'
        or blockindex = 13 and groupindex = 0 and item = 'id_2256'
        or blockindex = 13 and groupindex = 0 and item = 'id_2257'
        or blockindex = 13 and groupindex = 0 and item = 'id_2258'
        or blockindex = 13 and groupindex = 0 and item = 'id_2259'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationSonstigeFusionNGS(src, observation);
        };
    };
}
/* ------------------------------ Observation Sonstige Fusion NGS-------------------------- */
group TransformObservationSonstigeFusionNGS(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';

    //SonstigeFusionNGS code
        src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'SonstigeFusionNGS');


    src.operations as operations, operations.data as data then
    {

        // Date of Assessment VALUEDT
        data.values as values where "blockindex = 14 and groupindex = 0 and item = 'id_2246" then
        {
            values.value as dateofassessment -> tgt.effectiveDateTime= dateOp(dateofassessment, 'datetime');
        }; 
         // Ergebnis
        data.values as values where "blockindex = 14 and groupindex = 0 and item = 'id_2254'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
        // erster Fusionspartner
        data.values as values where "blockindex = 14 and groupindex = 0 and item = 'id_2255'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentersterfusionspartner then
            {
                esterfusionspartner -> componentersterfusionspartner.valueInteger = create('Integer') as integer then MapValue(esterfusionspartner, integer);
                esterfusionspartner -> componentersterfusionspartner.code = cc('http://loinc.org', '48018-6');
            };
        };
        // zweiter Fusionspartner
        data.values as values where "blockindex = 14 and groupindex = 0 and item = 'id_2256'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as ersterfusionspartner then
            {
                esterfusionspartner -> componentersterfusionspartner.valueInteger = create('Integer') as integer then MapValue(esterfusionspartner, integer);
                esterfusionspartner -> componentersterfusionspartner.code = cc('http://loinc.org', '48018-6');
            };
        };
         // Anzahl der Fusionsreads
        data.values as values where "blockindex = 14 and groupindex = 0 and item = 'id_2257'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentAnzahlderFusionsreads then
            {
                anzahlderfusionsreads-> componentanzahlderfusionsreads.valueInteger = create('Integer') as integer then MapValue(anzahlderfusionsreads, integer);
                anzahlderfusionsreads-> componentanzahlderfusionsreads.code = cc('http://loinc.org', '82121-5');
            };
        };
        // Exon erster Fusionspartner
        data.values as values where "blockindex = 13 and groupindex = 0 and item = 'id_2258'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as ersterfusionspartnerexon then
            {
                esterfusionspartner -> componentersterfusionspartnerexon.valueInteger = create('Integer') as integer then MapValue(esterfusionspartner, integer);
                esterfusionspartner -> componentersterfusionspartnerexon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'erster-fusionspartner-exon');
            };
        }; 
        // Exon zweiter Fusionspartner
        data.values as values where "blockindex = 13 and groupindex = 0 and item = 'id_2259'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as ersterfusionspartnerexon then
            {
                esterfusionspartner -> componentersterfusionspartnerexon.valueInteger = create('Integer') as integer then MapValue(esterfusionspartner, integer);
                esterfusionspartner -> componentersterfusionspartnerexon.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'erster-fusionspartner-exon');
            };
        };      
    };
}


