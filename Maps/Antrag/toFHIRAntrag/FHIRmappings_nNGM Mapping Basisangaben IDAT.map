/*
TODO
 - Coverage identifier based on Typ
 - Cast observation values to decimal
 - ID values of CTS to coding text field 
 - How to repeat Consent, n->1 Mapping
 - Change Consent CTS Metadata to policy.uri (Alex will provide the uris)
 - Gender translation does not work
 - check double TransformOrganizationReferenzen group (one has to be removed)
 - clarify the patient data cts part with the greyed out fields(Steffen will do that)
 - Remove patient IDAT, coverage IDAT, map to anonymised patient and coverage
*/

/// version = 0.1
/// title = "nNGM: Mapping Basisangaben FHIR"

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_BasisangabenFHIR" = nNGM_Mapping_BasisangabenFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/Organization" as target
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" as target
uses "http://hl7.org/fhir/StructureDefinition/Patient" as target
uses "http://hl7.org/fhir/StructureDefinition/Coverage" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target
uses "http://hl7.org/fhir/StructureDefinition/Consent" as target
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" as target
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group TransformBundle(source src: CTS_Transport, target bundle: Bundle)
{   
    //metadata
    src -> bundle.id = uuid();
    src -> bundle.type = 'collection';

    //resources
     src -> bundle.entry as entry then CreateOrganizationReferenzen(src, entry);
     src -> bundle.entry as entry, entry.resource = create('Organization') as organization then TransformOrganizationNetzwerkzentrum(src, organization);
     src -> bundle.entry as entry, entry.resource = create('ServiceRequest') as servicerequest then TransformServiceRequestTumorboard(src, servicerequest);
     src -> bundle.entry as entry, entry.resource = create('Patient') as patient then TransformPatient(src, patient);
     src -> bundle.entry as entry, entry.resource = create('Coverage') as coverage then TransformCoverage(src, coverage);
     
     src -> bundle.entry as entry then CreateObservationHeight(src, entry);
     src -> bundle.entry as entry then CreateObservationWeight(src, entry);
     src -> bundle.entry as entry then CreateObservationECOG(src, entry);
     src -> bundle.entry as entry then CreateObservationSmoking(src, entry);

     src -> bundle.entry as entry then CreatePractitioner(src, entry);
     
     src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentEinwilligung(src, consent);
     src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentTeilnahme(src, consent);
     src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentDatenschutz(src, consent);



}

/* ------------------------------ Organization ---------------------------- */

/*check if there is a OrganizationReferenzen required*/
group CreateOrganizationReferenzen(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_ba_siteid'
                                        or blockindex = 0 and groupindex = 0 and itemid = 'id_2326'
                                        or blockindex = 0 and groupindex = 0 and itemid = 'id_2485'" then
        {
            src -> tgt.resource = create('Organization') as organization then TransformOrganizationReferenzen(src, organization);
        };
    };
}

group TransformOrganizationReferenzen(source src: CTS_Transport, target tgt: Organization)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://fhir.de/StructureDefinition/organization-de-basis/0.2';

    src.operations as operations, operations.data as data then
    {
        //Netzwerkzentrum-id
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_ba_siteid'" then
        {
            values.value as netzwerkzentrumid -> tgt.identifier = id('http://healex.systems/fhir/netzwerkzentrumid', netzwerkzentrumid);
        };
    
        //Netzwerkpartnernummer
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2326'" then
        {
            values.value as netzwerkpartnernr -> tgt.identifier = id('http://fhir.de/NamingSystem/kbv/bsnr', netzwerkpartnernr);
        };

        //Kontakt
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2485'" then
        {
            values.value as kontakt -> tgt.address = create('Address') as address, address.line = kontakt;
        };
    };
}

group TransformOrganizationNetzwerkzentrum(source src: CTS_Transport, target tgt: Organization)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://fhir.de/StructureDefinition/organization-de-basis/0.2';

    src.operations as operations, operations.data as data then
    {
        //Netzwerkzentrum-id
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_ba_siteid'" then
        {
            values.value as netzwerkzentrumid -> tgt.identifier = id('http://healex.systems/fhir/netzwerkzentrumid', netzwerkzentrumid);
        };
    
        //Netzwerkpartnernummer
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2326'" then
        {
            values.value as netzwerkpartnernr -> tgt.identifier = create('Identifier') as identifier, identifier.system = 'http://fhir.de/NamingSystem/kbv/bsnr', identifier.value = netzwerkpartnernr;
        };

        //Kontakt
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2485'" then
        {
            values.value as kontakt -> tgt.address = create('Address') as address, address.text = kontakt;
        };
    };
}

group TransformOrganizationReferenzen(source src: CTS_Transport, target tgt: Organization)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Organization/clinical-site';

    src.operations as operations, operations.data as data then
    {
        //Standort
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as standort -> tgt.identifier = create('Identifier') as identifier, identifier.system = 'http://fhir.de/NamingSystem/asv/teamnummer', identifier.value = standort;
        };

        //Kontakt
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2485'" then
        {
            values.value as kontakt -> tgt.address = create('Address') as address, address.text = kontakt;
        };
    };
}

/* ------------------------------ Patient ---------------------------- */

group TransformPatient(source src: CTS_Transport, target tgt: Patient)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Patient/nNGM';

    src.operations as operations, operations.data as data then
    {
        //Geschlecht
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1131'" then
        {
            values.value as originalGender -> tgt.gender = translate(originalGender, 'http://uk-koeln.de/fhir/ConceptMap/nngm/Geschlecht', 'code') as translateGender then 
            {
                translateGender where "$this = 'other'" then
                {
                    translateGender -> translateGender.extension as otherAmtlich,
                    otherAmtlich.url = 'http://fhir.de/StructureDefinition/gender-amtlich-de',
                    otherAmtlich.valueCoding = c('http://fhir.de/CodeSystem/gender-amtlich-de', 'D', 'divers');
                };
            };
        };

        //Nachname 
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1125'" then
        {
            values.value as family -> tgt.name as tgtName collate, tgtName.family = family;
        };
        //Vorname
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1124'" then
        {
            values.value as given -> tgt.name as tgtName collate, tgtName.given = given;
        };
        //Geburtsdatum
         data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1126'" then 
        {
            values.value as birthDate -> tgt.birthDate = dateOp(birthDate, 'dateTime');
        };
        //StraÃŸe
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1127'" then
        {
            values.value as line -> tgt.address as tgtAddress collate, tgtAddress.line = line;
        };
        //PLZ
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1128'" then
        {
            values.value as postalCode -> tgt.address as tgtAddress collate, tgtAddress.postalCode = postalCode;
        };
        //Wohnort
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1129'" then
        {
            values.value as city -> tgt.address as tgtAddress collate, tgtAddress.city = city;
        };

        //Land
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1280'" then
        {
            values.value as country -> tgt.address as tgtAddress collate, tgtAddress.country = country;
        };
    };
}

/* ------------------------------ ServiceRequest ---------------------------- */
group TransformServiceRequestTumorboard(source src: CTS_Transport, target tgt: ServiceRequest)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/ServiceRequest/nNGM/testung';

    //status
    src -> tgt.status = cast('active', 'FHIR.code'); 
    
    //intent
    src -> tgt.intent = 'proposal';

    //code required, not in form
    src -> tgt.code as code, 
            code.coding as coding, 
            coding.system as system, 
            system.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');
    
    src -> tgt.code as code1, 
            code1.coding as coding, 
            coding.code as code, 
            code.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');
    
    //subject required
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    //requester not available
    src -> tgt.requester as requester, 
           requester.reference as reference, 
           reference.extension as dataAbsentReason, 
           dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
           dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    src.operations as operations, operations.data as data then
    {
        //anforderungsdatum -> authoredOn
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1571'" then
        {
            values.value as datum -> tgt.authoredOn = dateOp(datum, 'dateTime');
        };
    
        //zeitpunkt anforderung -> aufenthaltsart extension
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1576'" then
        {
            values.value as za -> tgt.extension as aufenthaltsart, 
                                  aufenthaltsart.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/aufenthaltsart', 
                                  aufenthaltsart.valueCodeableConcept = translate(za, 'http://uk-koeln.de/fhir/ConceptMap/nNGM/Aufenthaltsart', 'code');
        };
    };
}

/* ------------------------------ Coverage ---------------------------- */
group TransformCoverage(source src: CTS_Transport, target tgt: Coverage)
{ 

    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Coverage/nNGM';

    //status = active
    src -> tgt.status = cast('active', 'FHIR.code'); 
    
    //beneficiary, beneficiary.reference
    src -> tgt.beneficiary as beneficiary,
           beneficiary.reference as reference, 
           reference.extension as dataAbsentReason,
           dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason',
           dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code'); 
    
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2459'" then
        {
            //Typ -> type.text
            values.value as typ -> tgt.type as type, type.text = typ;
        };

        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1269'" then
        {
            //Typ GKV/PKV -> type.code
            values.value as typ2 -> tgt.type = cc('http://fhir.de/ValueSet/versicherungsart-de-basis', typ2);
            
            /*
            //Versichertennummer -> identifier.value
            values.value where "$this.value = 'PKV'" then
            {
                src.operations as operations2, operations2.data as data2 then
                {
                    data2.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1268'" then 
                    {
                        values.value as versichertennummer -> tgt.identifier = create('Identifier') as identifier, 
                                                                                                        identifier.system = 'http://www.acme.com/identifiers/patient', 
                                                                                                        identfier.value = versichertennummer, 
                                                                                                        identifier.type = cc('http://fhir.de/CodeSystem/identifier-type-de-basis', 'PKV');
                    };
                };
            };
            
            //Versichertennummer -> identifier.value
            values.value where "$this.value = 'GKV'" then
            {
                src.operations as operations2, operations2.data as data2 then
                {
                    data2.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1268'" then 
                    {
                        values.value as versichertennummer -> tgt.identifier = create('Identifier') as identifier, 
                                                                                                        identifier.system = 'http://fhir.de/NamingSystem/gkv/kvid-10', 
                                                                                                        identfier.value = versichertennummer, 
                                                                                                        identifier.type = cc('http://fhir.de/CodeSystem/identifier-type-de-basis', 'GKV');
                    };
                };
            };
            */
        };

        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2460'" then
        {
            //Kooperationsvereinbarung -> extension.valueBoolean, if yes 1, if no 0
            values.value as kooperationsvereinbarung where "$this.value = 'yes'" then
            {
                values.value as kooperationsvereinbarung -> tgt.extension as kooperationsvereinbarung, 
                                                        kooperationsvereinbarung.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/kooperationsvereinbarung',
                                                        kooperationsvereinbarung.valueBoolean = true;
            };

            values.value as kooperationsvereinbarung where "$this.value = 'no'" then
            {
                values.value as kooperationsvereinbarung -> tgt.extension as kooperationsvereinbarung, 
                                                        kooperationsvereinbarung.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/kooperationsvereinbarung',
                                                        kooperationsvereinbarung.valueBoolean = false;
            };
        };

        //pkv tariffform
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1270'" then
        {
            values.value as pkv -> tgt.gender = translate(pkv, 'http://uk-koeln.de/fhir/ConceptMap/nngm/pkv-tarifform', 'code');
        };
       
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1333'" then
        {
            //Abrechnungsinformationen -> payor.extension.valueCodeableConcept
            values.value as Abrechnungsinformationen -> tgt.payor = create('Reference') as payor,
                                                        payor.extension as abrechnungsinformationen,
                                                        abrechnungsinformationen.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/abrechnungsinformation',
                                                        abrechnungsinformationen.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/abrechnungsinformation', Abrechnungsinformationen);
        };
    };
}

/* ------------------------------ Observation ---------------------------- */

/*check if there is a ObservationHeight required*/
group CreateObservationHeight(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1133'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationHeight(src, observation);
        };
    };
}

group TransformObservationHeight(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/koerpergroesse';

    //status 
    src -> tgt.status = cast('final', 'FHIR.code');

    //category
    src -> tgt.category = cc('http://hl7.org/fhir/observation-category', 'vital-signs');

    //code
    src -> tgt.code = cc('http://loinc.org', '8302-2');

    //subject
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    //encounter
    src -> tgt.encounter as encounter, 
           encounter.reference as reference, 
           reference.extension as dataAbsentReason, 
           dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
           dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    //Kopergroesse -> valueQuantity
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1133'" then
        {
            values.value as kp -> tgt.valueQuantity = create('BackboneElement') as Quantity,
            Quantity.system = 'http://unitsofmeasure.org',
            Quantity.unit = 'centimeter',
            Quantity.code = cast('cm', 'FHIR.code') ,
            Quantity.value = kp;
        };
    };
}

/*check if there is a ObservationWeight required*/
group CreateObservationWeight(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1132'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationWeight(src, observation);
        };
    };
}

group TransformObservationWeight(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/koerpergewicht';

    //status 
    src -> tgt.status = cast('final', 'FHIR.code');

    //category
    src -> tgt.category = cc('http://hl7.org/fhir/observation-category', 'vital-signs');

    //code
    src -> tgt.code = cc('http://loinc.org', '29463-7');

    //subject
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    //encounter
    src -> tgt.encounter as encounter, 
           encounter.reference as reference, 
           reference.extension as dataAbsentReason, 
           dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
           dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    //gewicht -> valueQuantity
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1132'" then
        {
            values.value as kg -> tgt.valueQuantity = create('BackboneElement') as Quantity,
            Quantity.system = 'http://unitsofmeasure.org',
            Quantity.unit = 'kilogram',
            Quantity.code = cast('kg', 'FHIR.code') ,
            Quantity.value = kg;
        };
    };
}

/*check if there is a ObservationECOG required*/
group CreateObservationECOG(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2290'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationECOG(src, observation);
        };
    };
}

group TransformObservationECOG(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/ecog';

    //status 
    src -> tgt.status = cast('final', 'FHIR.code');

    //category
    src -> tgt.category = cc('http://hl7.org/fhir/observation-category', 'survey');

    //code
    src -> tgt.code = cc('http://loinc.org', '89247-1');

    //subject
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    //encounter
    src -> tgt.encounter as encounter, 
           encounter.reference as reference, 
           reference.extension as dataAbsentReason, 
           dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
           dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    //ecog -> valueQuantity
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2290'" then
        {
            values.value as ecog -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ecog', ecog);
        };
    };
}

/*check if there is a ObservationSmoking required*/
group CreateObservationSmoking(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2292'
                                        or blockindex = 7 and groupindex = 0 and itemid = 'id_2293'
                                        or blockindex = 7 and groupindex = 0 and itemid = 'id_2294'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationSmoking(src, observation);
        };
    };
}

group TransformObservationSmoking(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/raucherstatus';

    //status 
    src -> tgt.status = cast('final', 'FHIR.code');

    //category
    src -> tgt.category = cc('http://hl7.org/fhir/observation-category', 'social-history');

    //code
    src -> tgt.code = cc('http://loinc.org', '72166-2');

    //subject
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    //encounter
    src -> tgt.encounter as encounter, 
           encounter.reference as reference, 
           reference.extension as dataAbsentReason, 
           dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
           dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    //smoking -> valueQuantity
    src.operations as operations, operations.data as data then
    {
        //typ -> valueCodeableConcept
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2292'" then
        {
            values.value as typ -> tgt.valueCodeableConcept as vcc, 
                                    vcc.coding as co,  
                                    co.system = 'http://uk-koeln.de/fhir/ValueSet/nngm/raucherstatus', 
                                    co.code = translate(typ, 'http://uk-koeln.de/fhir/ConceptMap/nngm/raucherstatus', 'code');
        };

        //Pack years -> component.packungenProJahr
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2294'" then
        {
            values.value as packyears -> tgt.component = create('BackboneElement') as packung, 
                                                            packung.code as code, 
                                                            code.text = 'Packungen Pro Jahr',
                                                            code.coding = c('http://loinc.org', '8664-5'),
                                                            packung.valueQuantity = create('Quantity') as qty, 
                                                            qty.unit = 'PackYears',
                                                            qty.system = 'http://unitsofmeasure.org',
                                                            qty.code = cast('{PackYears}','FHIR.code'),
                                                            qty.value = packyears;
        };                                  

        //nichtraucher seit -> component.nichtraucher
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2293'" then
        {
            values.value as nichtraucher -> tgt.component = create('BackboneElement') as nr,
                                                            nr.code as code,
                                                            code.text = 'Nichtraucher Seit',
                                                            code.coding = c('http://loinc.org', '63630-8'), 
                                                            nr.valueDateTime = dateOp(nichtraucher, 'date');
        };

    };
}

/* ------------------------------ Practitioner ---------------------------- */

/*check if there is a Practitioner required*/
group CreatePractitioner(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2298'" then
        {
            src -> tgt.resource = create('Practitioner') as pracitioner then TransformPractitioner(src, pracitioner);
        };
    };
}

group TransformPractitioner(source src: CTS_Transport, target tgt: Practitioner)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Practitioner/nNGM';

    //identifier
    src -> tgt.identifier as identifier, 
            identifier.system as system, 
            system.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');
    
    src -> tgt.identifier as identifier1, 
            identifier1.value as value, 
            value.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');


    //name
    src -> tgt.name as name, 
            name.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');



    src.operations as operations, operations.data as data then
    {
        //Anforderer email address -> telecom:email.system, telecom:email.value
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2298'" then
        {
            values.value as mail -> tgt.telecom = create('ContactPoint') as cp, cp.system = 'email', cp.value = mail;
        };
    };
}

/* ------------------------------ Consent ---------------------------- */
group TransformConsentEinwilligung(source src: CTS_Transport, target tgt: Consent)
{

    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';
    
    //category
    src -> tgt.category = cc('http://uk-koeln.de/fhir/ValueSet/nngm/einwilligungserklaerung', 'nngm-einwilligung');

    //patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    //policy
    src -> tgt.policy = create('BackboneElement') as policy, policy.authority = 'nationales Netzwerk Genomische Medizin', policy.uri = 'https://ngm-cancer.com/';

    src.operations as operations, operations.data as data then
    {
        //1a unterschrieben -> provision.type
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2440'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision, 
                                             provision.type = cast('permit', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2440';
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision, 
                                             provision.type = cast('deny', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2440';
            };
        };

        //1a datum -> provision.type.period.standort
         data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2441'" then
         {
            values.value as datum -> tgt.provision = create('BackboneElement') as provision collate,
                                     provision.period = create('BackboneElement') as period, 
                                     period.start = dateOp(datum, 'dateTime'),
                                     provision.data = create('BackboneElement') as data, 
                                     data.meaning = 'id_2441';
         };

       /*
        //1b unterschrieben -> provision.type
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2446'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2446';
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2446';
            };
        };

        //1b datum -> provision.type.period.standort
         data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2447'" then
         {
            values.value as datum -> tgt.provision = create('BackboneElement') as provision2 collate,
                                     provision2.period = create('BackboneElement') as period, 
                                     period.start = dateOp(datum, 'dateTime'),
                                     provision2.data = create('BackboneElement') as data, 
                                     data.meaning = 'id_2447';
         };

         //2 unterschrieben -> provision.type
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2449'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2449';
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2449';
            };
        };

        //2 datum -> provision.type.period.standort
         data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2450'" then
         {
            values.value as datum -> tgt.provision = create('BackboneElement') as provision2 collate,
                                     provision2.period = create('BackboneElement') as period, 
                                     period.start = dateOp(datum, 'dateTime'),
                                     provision2.data = create('BackboneElement') as data, 
                                     data.meaning = 'id_2450';
         };
        
        //molpatho diagnostik unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2351'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2351';
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2351';
            };
        };

         data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2352'" then
         {
            values.value as datum -> tgt.provision = create('BackboneElement') as provision2 collate,
                                     provision2.period = create('BackboneElement') as period, 
                                     period.start = dateOp(datum, 'dateTime'),
                                     provision2.data = create('BackboneElement') as data, 
                                     data.meaning = 'id_2352';
         };

        //uberregionale beratung unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2357'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2357';
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2357';
            };
        };

        //uberregionale beratung diagnostik -> provision.type.period.standort
         data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2358'" then
         {
            values.value as datum -> tgt.provision = create('BackboneElement') as provision2 collate,
                                     provision2.period = create('BackboneElement') as period, 
                                     period.start = dateOp(datum, 'dateTime'),
                                     provision2.data = create('BackboneElement') as data, 
                                     data.meaning = 'id_2358';
         };

         //Weitergabe pseudonymisierter krankheitsbezogener Daten (MDAT) innerhalb des nNGM und an kooperierende Partner unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2361'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2361';
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2361';
            };
        };

        //Weitergabe pseudonymisierter krankheitsbezogener Daten (MDAT) innerhalb des nNGM und an kooperierende Partner datum -> provision.type.period.standort
         data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2362'" then
         {
            values.value as datum -> tgt.provision = create('BackboneElement') as provision2 collate,
                                     provision2.period = create('BackboneElement') as period, 
                                     period.start = dateOp(datum, 'dateTime'),
                                     provision2.data = create('BackboneElement') as data, 
                                     data.meaning = 'id_2362';
         };

         //Weitergabe von MDAT und Resttumorproben innerhalb des nNGM und an kooperierende Partner unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2364'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2364';
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2364';
            };
        };

        //Weitergabe von MDAT und Resttumorproben innerhalb des nNGM und an kooperierende Partner datum -> provision.type.period.standort
         data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2364'" then
         {
            values.value as datum -> tgt.provision = create('BackboneElement') as provision2 collate,
                                     provision2.period = create('BackboneElement') as period, 
                                     period.start = dateOp(datum, 'dateTime'),
                                     provision2.data = create('BackboneElement') as data, 
                                     data.meaning = 'id_2364';
         };

         //Weitergabe von MDAT und Resttumorproben in ein Drittland unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2370'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2370';
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2370';
            };
        };

        //Weitergabe von MDAT und Resttumorproben in ein Drittland datum -> provision.type.period.standort
         data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2371'" then
         {
            values.value as datum -> tgt.provision = create('BackboneElement') as provision2 collate,
                                     provision2.period = create('BackboneElement') as period, 
                                     period.start = dateOp(datum, 'dateTime'),
                                     provision2.data = create('BackboneElement') as data, 
                                     data.meaning = 'id_2352';
         };

         //Weitergabe pseudonnymisierter krankheitsbezogener Daten (MDAT) zur kommerziellen Nutzung unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2373'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2373';
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2373';
            };
        };

        //Weitergabe pseudonnymisierter krankheitsbezogener Daten (MDAT) zur kommerziellen Nutzung datum-> provision.type.period.standort
         data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2374'" then
         {
            values.value as datum -> tgt.provision = create('BackboneElement') as provision2 collate,
                                     provision2.period = create('BackboneElement') as period, 
                                     period.start = dateOp(datum, 'dateTime'),
                                     provision2.data = create('BackboneElement') as data, 
                                     data.meaning = 'id_2374';
         };

        //weitergabe MDAT drittland unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2376'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2376';
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2376';
            };
        };

        //weitergabe MDAT drittland datum -> provision.type.period.standort
         data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2377'" then
         {
            values.value as datum -> tgt.provision = create('BackboneElement') as provision2 collate,
                                     provision2.period = create('BackboneElement') as period, 
                                     period.start = dateOp(datum, 'dateTime'),
                                     provision2.data = create('BackboneElement') as data, 
                                     data.meaning = 'id_2377';
         };

        //kontaktaufnahme weitere info unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2382'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2382';
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2382';
            };
        };

        //kontaktaufnahme weitere info -> provision.type.period.standort
         data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2383'" then
         {
            values.value as datum -> tgt.provision = create('BackboneElement') as provision2 collate,
                                     provision2.period = create('BackboneElement') as period, 
                                     period.start = dateOp(datum, 'dateTime'),
                                     provision2.data = create('BackboneElement') as data, 
                                     data.meaning = 'id_2383';
         };

        //kontaktaufnahme neue studie unterschrieben -> provision.type
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2379'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('permit', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2379';
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision2, 
                                             provision2.type = cast('deny', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2379';
            };
        };

        //kontaktaufnahme neue studie datum -> provision.type.period.standort
         data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2380'" then
         {
            values.value as datum -> tgt.provision = create('BackboneElement') as provision2 collate,
                                     provision2.period = create('BackboneElement') as period, 
                                     period.start = dateOp(datum, 'dateTime'),
                                     provision2.data = create('BackboneElement') as data, 
                                     data.meaning = 'id_2380';
         };
        */
    }; 
}

group TransformConsentTeilnahme(source src: CTS_Transport, target tgt: Consent)
{

    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';

    //category
    src -> tgt.category = cc('http://uk-koeln.de/fhir/ValueSet/nngm/einwilligungserklaerung', 'nngm-teilnahme');

    //patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    //policy
    src -> tgt.policy = create('BackboneElement') as policy, policy.authority = 'nationales Netzwerk Genomische Medizin', policy.uri = 'https://ngm-cancer.com/';

    src.operations as operations, operations.data as data then
    {
        //teilnahme unterschrieben -> provision.type
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2392'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision, 
                                             provision.type = cast('permit', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2392';
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision, 
                                             provision.type = cast('deny', 'FHIR.code'),
                                             provision.data = create('BackboneElement') as data, 
                                             data.meaning = 'id_2392';
            };
        };

        //teilnahme datum -> provision.type.period.standort
         data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2393'" then
         {
            values.value as datum -> tgt.provision = create('BackboneElement') as provision collate,
                                     provision.period = create('BackboneElement') as period, 
                                     period.start = dateOp(datum, 'dateTime'),
                                     provision.data = create('BackboneElement') as data, 
                                     data.meaning = 'id_2393';
         };
    }; 
}

group TransformConsentDatenschutz(source src: CTS_Transport, target tgt: Consent)
{

    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Consent/nNGM';
    
    //category
    src -> tgt.category = cc('http://uk-koeln.de/fhir/ValueSet/nngm/einwilligungserklaerung', 'nngm-datenschutz');

    //patient
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    //policy
    src -> tgt.policy = create('BackboneElement') as policy, policy.authority = 'nationales Netzwerk Genomische Medizin', policy.uri = 'https://ngm-cancer.com/';

    src.operations as operations, operations.data as data then
    {
        //datenschutz unterschrieben -> provision.type
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2389'" then
        {
            values.value as signature where "$this.value = 'yes'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision, 
                                             provision.type = cast('permit', 'FHIR.code');
            };

            values.value as signature where "$this.value = 'no'" then
            {
                values.value as signature -> tgt.provision = create('BackboneElement') as provision, 
                                             provision.type = cast('deny', 'FHIR.code');
            };
        };

        //datenschutz datum -> provision.type.period.standort
         data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2490'" then
         {
            values.value as datum -> tgt.provision = create('BackboneElement') as provision collate,
                                     provision.period = create('BackboneElement') as period, 
                                     period.start = dateOp(datum, 'dateTime'),
                                     provision.data = create('BackboneElement') as data, 
                                     data.meaning = 'id_2440';
         };
    }; 
}