///version = 0.1
///title = "FHIRMappingAntrag
///status = draft

/*
TNM Biopsy-id field (Specimen resource creation) fails
*/

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_AntragFHIR" = nNGM_Mapping_AntragFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/Organization" as target
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" as target
uses "http://hl7.org/fhir/StructureDefinition/Patient" as target
uses "http://hl7.org/fhir/StructureDefinition/Coverage" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target
uses "http://hl7.org/fhir/StructureDefinition/Consent" as target
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" as target
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_StammdatenFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_BasisangabenFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/AnforderungFHIR"
imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_TNMMap"
//Resistenztestung



group MapAntrag(source src:CTS_Transport, target bundle: Bundle)
{
    src -> bundle.id = uuid();
    src -> bundle.type = 'collection';


    //Stammdaten
    src -> bundle.entry as entry, entry.resource = create('Patient') as patient then TransformPatientStammdaten(src, patient);
    src -> bundle.entry as entry, entry.resource = create('Coverage') as coverage then TransformCoverageStammdaten(src, coverage);
    src -> bundle.entry as entry then CreateEpisodeOfCareStammdaten(src, entry);

    //Basisangaben
    src -> bundle.entry as entry then CreateOrganizationReferenzen(src, entry);
    src -> bundle.entry as entry, entry.resource = create('Organization') as organization then TransformOrganizationNetzwerkzentrum(src, organization);
    src -> bundle.entry as entry, entry.resource = create('ServiceRequest') as servicerequest then TransformServiceRequestTumorboard(src, servicerequest);
    src -> bundle.entry as entry, entry.resource = create('Patient') as patient then TransformPatient(src, patient);
    src -> bundle.entry as entry, entry.resource = create('Coverage') as coverage then TransformCoverage(src, coverage);
    src -> bundle.entry as entry then CreateObservationHeight(src, entry);
    src -> bundle.entry as entry then CreateObservationWeight(src, entry);
    src -> bundle.entry as entry then CreateObservationECOG(src, entry);
    src -> bundle.entry as entry then CreateObservationSmoking(src, entry);
    src -> bundle.entry as entry then CreatePractitioner(src, entry);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentTeilnahme(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentDatenschutz(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentEinwilligungTumorboard1(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentEinwilligungTumorboard2(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentEinwilligung1a(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentEinwilligung1b(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentEinwilligung2(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentVersorgung1(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentVersorgung2(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentForschung1(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentForschung2(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentForschung3(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentForschung4(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentForschung5(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentForschung6(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentForschung7(src, consent);
    src -> bundle.entry as entry, entry.resource = create('Consent') as consent then TransformConsentForschung8(src, consent);

    //Antrag
    src -> bundle.entry as entry then CreateTransformSpecimenAnforderung(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationAnforderung(src, entry);
    src -> bundle.entry as entry then CreateTransformServiceRequestAnforderung(src, entry);
    src -> bundle.entry as entry then CreateTransformServiceRequestTumorboardAnforderung(src, entry);
    src -> bundle.entry as entry then CreateTransformOrganizationAnforderung(src, entry);

    //TNM
    src -> bundle.entry as entry then CreateTransformObservationTNM(src, entry);
    src -> bundle.entry as entry, entry.resource = create('Specimen') as specimen then TransformSpecimenTNM(src, specimen);

    //Resistenztestung

    //Composition
    MapCompositionAnmeldung(src, tgt);
     
}

//Supposed to take the relevant references from the generated resources above and add it to the bundle
group MapCompositionAnmeldung(source src:Bundle, target bundle: Bundle)
{

    
    map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_CompositionFHIR" = nNGM_Mapping_AntragFHIR

    uses "http://hl7.org/fhir/StructureDefinition/Bundle" as source
    uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target
    uses "http://hl7.org/fhir/StructureDefinition/Composition" as target


    imports "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_AntragFHIR"
    
    src -> tgt.status = cast('final', 'FHIR.code');
    src -> tgt.type = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/compositions', 'anmeldung');
    src -> tgt.category = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/composition-category', 'idat');
    src -> tgt.title =  'Anmeldung';

    //crf date? -> date


    //Patient-id -> subject
    entry.resource as servicerequest where "resource is ServiceRequest and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/ServiceRequest/nNGM/tumorboard'" then
        {   
            //Patient ID -> cts.patid
            servicerequest -> tgt.data as data then
            {
                servicerequest.subject as subject then
                {   
                    subject.reference as patient then
                    {
                        patient -> tgt.patid = evaluate(patient, '$this.split(\'\/\').last()');
                    };
                };
            };
        };
       
    //netzwerkzentrm -> author 
    entry.resource as organization where "resource is Organization and resource.meta.profile = 'http://clinicalsite.org/fhir/StructureDefinition/organizationalunit'" then 
        {
            //Netzwerkzentrum Standort
            organization -> tgt.data as data then 
            {
                organization.identifier as name then
                {
                    organization -> data.blockindex = 2;
                    organization -> data.groupindex = 0;
                    organization -> data.itemid = 'id_2435';
                    name.value as value -> data.values as values, values.value = value;
                };
            };
        };

    src.entry as entry, 
    entry.resource as observation where "resource is Observation and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/tumorstadium'" then
    {
        observation -> tgt.data as data then
        {
            src -> tgt.section as section, 
            section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'tnm'),
            section.entry as entry,
            entry.reference =  evaluate('observation.id', 'observation.resourceType + / + id');
        }     
    };

    src.entry as entry, 
    entry.resource as observation where "resource is Observation and resource.meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/tumorstadium'" then
    {
        observation -> tgt.data as data then
        {
            src -> tgt.section as section, 
            section.code = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/sections', 'tnm'),
            section.entry as entry,
            entry.reference =  evaluate('observation.id', 'observation.resourceType + / + id');
        }     
    };
}    


