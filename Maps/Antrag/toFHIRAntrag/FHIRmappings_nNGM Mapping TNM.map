/*
TODO
 - TNM slices map by code.coding.code fill unique code
 - TNM specimen
*/

/// version = 0.1
/// title = "TNMMap"

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_TNMMap" = nNGM_Mapping_TNMMap

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target
//uses "http://hl7.org/fhir/StructureDefinition/Specimen" as target



group TransformBundle(source src: CTS_Transport, target bundle: Bundle)
{
    src -> bundle.id = uuid();
    src -> bundle.type = 'collection';


    //Check if any fields are filled in before creating the observation
    src -> bundle.entry as entry then CreateTransformObservationTNM(src, entry);
    src -> bundle.entry as entry, entry.resource = create('Specimen') as specimen then TransformSpecimenTNM(src, specimen);
}

group TransformSpecimenTNM(source src: CTS_Transport, target tgt: Specimen)
{

    src -> tgt.type as type, 
                        type.coding as coding, 
                        coding.code as code,
                        code.extension as dataAbsentReason, 
                        dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
                        dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');


    src.operations as operations, operations.data as data then
    {
        //Biopsy-ID -> extension angaben
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_1601'" then
        {
                values.value as bid -> tgt.identifier = create('Identifier') as biopsieID,
                                                          biopsieID.system = 'http://uk-koeln.de/NamingSystem/nNGM/biopsieID',
                                                          biopsieID.value = bid;
        };
    };
}


/*checks if there is a need for a Condition resource*/
group CreateTransformObservationTNM(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1573'
        or blockindex = 0 and groupindex = 0 and itemid = 'id_1300'
        or blockindex = 0 and groupindex = 0 and itemid = 'id_1385'
        or blockindex = 1 and groupindex = 0 and itemid = 'id_2492'
        or blockindex = 1 and groupindex = 0 and itemid = 'id_1378'
        or blockindex = 1 and groupindex = 0 and itemid = 'id_1379'
        or blockindex = 1 and groupindex = 0 and itemid = 'id_1380'
        or blockindex = 1 and groupindex = 0 and itemid = 'id_2493'
        or blockindex = 1 and groupindex = 0 and itemid = 'id_2495'
        or blockindex = 1 and groupindex = 0 and itemid = 'id_1381'
        or blockindex = 1 and groupindex = 0 and itemid = 'id_2497'
        or blockindex = 1 and groupindex = 0 and itemid = 'id_1382'
        or blockindex = 1 and groupindex = 0 and itemid = 'id_2498'
        or blockindex = 1 and groupindex = 0 and itemid = 'id_1383'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationTNM(src, observation);
        };
    };
}

group TransformObservationTNM(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nNGM/tumorstadium';
    src -> tgt.status = 'final';
    src -> tgt.category = cc('http://hl7.org/fhir/observation-category', 'survey');
    
    //data absent because not delivered from form but mandatory in profile
    src -> tgt.code as code, code.coding as coding, coding.version as version, version.extension as dataAbsentReason, dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');


    //Works for patient because patient id is always present in cts data for every form
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    src.operations as operations, operations.data as data then
    {
        //Erstdiagnose -> extension tnmerstdiagnose
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1300'" then
        {
            values.value as erstdiagnose where "$this.value = 'yes'" then
            {
                values.value as value -> tgt.extension as angaben, 
                angaben.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/TNMErstdiagnose',
                angaben.valueBoolean = cast(true, 'FHIR.boolean');
            };

            values.value as erstdiagnose where "$this.value = 'no'" then
            {
                values.value as value -> tgt.extension as angaben, 
                angaben.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/TNMErstdiagnose',
                angaben.valueBoolean = cast(false, 'FHIR.boolean');
            };
        };

        //Kurativ-operabel -> extension kurativoperabel
         data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1385'" then
        {
            values.value as erstdiagnose where "$this.value = 'yes'" then
            {
                values.value as value -> tgt.extension as angaben, 
                angaben.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/kurativoperabel',
                angaben.valueBoolean = cast(true, 'FHIR.boolean');
            };

            values.value as erstdiagnose where "$this.value = 'no'" then
            {
                values.value as value -> tgt.extension as angaben, 
                angaben.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/kurativoperabel',
                angaben.valueBoolean = cast(false, 'FHIR.boolean');
            };
        };
        
        //TNM-Klassifikation -> note
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2492'" then
        {
           values.value as value -> tgt.note = create('Annotation') as annotation, annotation.text = value;
        };
        
        //date of assessment -> effectiveDateTime
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1378'" then
        {
           values.value as value -> tgt.effectiveDateTime = dateOp(value, 'date');
        };

        //Prafix
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1379'" then
        {
            values.value as value where "value = 'r - Rezidiv'" then
            {
              value -> tgt.component = create('BackboneElement') as r,
              r.code =  cc('http://loinc.org', '59479-6');
            };
            values.value as value where "value ='y - Zustand nach Therapie'" then
            {
              value -> tgt.component = create('BackboneElement') as y,
              y.code =  cc('http://loinc.org', '21983-2');
            };
        };
        
         //Tumor (T)
        //Größe und Ausdehnung des Tumors
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1380'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as T then
            {
                src -> T.code =  cc('http://loinc.org', '21905-5'),
                       T.valueCodeableConcept as vcc,
                                                vcc.text = 'T slice',
                                                vcc.coding = c('http://uk-koeln.de/fhir/ValueSet/tnm-t-nngm', value);
                    
                src.operations as operations, operations.data as data then
                {
                    data.values as valuesprafix where "blockindex = 1 and groupindex = 0 and itemid = 'id_2493'" then
                    {   
                        valuesprafix.value as value then{
                            src -> T.extension as praefixcpu,
                            praefixcpu.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/cancer-base/tnm-praefix-cpu',
                            
                            //Create the coding so you can add slice info in text field
                            praefixcpu.valueCodeableConcept as vcc,
                            vcc.text = 'T-praefix slice',
                            vcc.coding = c('http://uk-koeln.de/fhir/ValueSet/tnm-praefix-cpu',value);
                        };
                    };
                };
                
                src.operations as operations, operations.data as data then
                {
                    data.values as valuessuffix where "blockindex = 1 and groupindex = 0 and itemid = 'id_2495'" then
                    {   
                        valuessuffix.value as value then{
                            src -> T.extension as suffixmiscy,
                            suffixmiscy.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/cancer-base/tnm-suffix-miscy',
                            suffixmiscy.valueCodeableConcept as vcc,
                            vcc.text = 'T-suffix slice',
                            vcc.coding = c('http://uk-koeln.de/fhir/ValueSet/tnm-suffix-miscy',value);
                        };
                    };
                };
            };  
        };

        //Lymphknoten (N)
        //Größe und Ausdehnung des Tumors 
         data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1381'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as N then
            {
                src -> N.code =  cc('http://loinc.org', '21906-3');

                //add value valueCodeableConcept   
                value as Nclass -> N.valueCodeableConcept as vcc,
                                    vcc.text = 'N slice',
                                    vcc.coding = c('http://uk-koeln.de/fhir/ValueSet/tnm-n-nngm', Nclass);
                
                src.operations as operations, operations.data as data then
                {
                    data.values as valuesprafix where "blockindex = 1 and groupindex = 0 and itemid = 'id_2497'" then
                    {   
                        valuesprafix.value as value then
                        {
                            src -> N.extension as praefixcpu,
                            praefixcpu.url = 'http://uk-koeln.de/fhir/Extension/tnm-praefix-cpu',

                            //Create the coding so you can add slice info in text field
                            praefixcpu.valueCodeableConcept as vcc,
                            vcc.coding = c('http://uk-koeln.de/fhir/ValueSet/tnm-praefix-cpu' , value),
                            vcc.text = 'N-praefix slice';
                        };
                    };
                };
            };
        };

        //Metastasen(M)
        //Abwesenheit oder Vorhandensein von Metastasen
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1382'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as M then
            {
                src -> M.code =  cc('http://loinc.org', '21907-1');

                //add value valueCodeableConcept   
                value as Mclass -> M.valueCodeableConcept as vcc,
                                    vcc.text = 'M slice',
                                    vcc.coding = c('http://uk-koeln.de/fhir/ValueSet/tnm-m-nngm', Mclass);
                
                src.operations as operations, operations.data as data then
                {
                    data.values as valuesprafix where "blockindex = 1 and groupindex = 0 and itemid = 'id_2498'" then
                    {   
                        valuesprafix.value as value then
                        {
                            src -> M.extension as praefixcpu,
                            praefixcpu.url = 'http://uk-koeln.de/fhir/Extension/tnm-praefix-cpu',

                            //Create the coding so you can add slice info in text field
                            praefixcpu.valueCodeableConcept as vcc,
                            vcc.coding = c('http://uk-koeln.de/fhir/ValueSet/tnm-praefix-cpu' , value),
                            vcc.text = 'M-praefix slice';
                        };
                    };
                };
            };
        };
        
        //UICC-Stadium
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_1383'" then
        {
             values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/uicc-lunge',value);
        };
    };
}