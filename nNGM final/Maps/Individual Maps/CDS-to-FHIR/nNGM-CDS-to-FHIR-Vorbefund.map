/// version = 0.1
/// title = "nNGM_Mapping_VorbefundFHIR"
/*
    TODO 
    - Once the repeatindex has been implemented, this map needs to be adjusted as the Vorbefund 
      section can have multiple instances. 

    [Observation] resource BRAF, CK7, MIB1, Napsin A, P40, Synaptophysin, TTF1, ALK, MET
    - Date of Assessment: Item in SeaTable specifies that this item must be mapped in 
      effectiveDateTime item resource. Logic was based as ImmunohistochemieFHIR mapping,
      where the value is mapped on effectivePeriod item.
    * In this case this is wrong because we dont have a section of 'Status der untersuchungen' in Vorbefund where a possible effectivePeriod.end could be stated.

*/

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_VorbefundFHIR" = nNGM_Mapping_VorbefundFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/Specimen" as target
uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target
uses "http://hl7.org/fhir/StructureDefinition/Device" as target


group TransformBundleVorbefundFHIR(source src: CTS_Transport, target bundle: Bundle)
{
    //Check if any fields are filled in before creating the Specimen
    src -> bundle.entry as entry then CreateTransformSpecimenVorbefund(src, entry);
    //Check if any fields are filled in before creating the DiagnosticReport
    src -> bundle.entry as entry then CreateTransformDiagnosticReportVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation Histologie
    src -> bundle.entry as entry then CreateTransformObservationHistologieVorbefund(src, entry);
    /*------------------------------------------------------------------------------
                                 Immunhistochemie (IHC)                                   
    ------------------------------------------------------------------------------*/
    //Check if any fields are filled in before creating the Observation BRAF IHC
    src -> bundle.entry as entry then CreateTransformObservationBRAFIHCVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation CK7 IHC
    src -> bundle.entry as entry then CreateTransformObservationCK7IHCVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation MIB1 IHC
    src -> bundle.entry as entry then CreateTransformObservationMIB1IHCVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation NapsinA IHC
    src -> bundle.entry as entry then CreateTransformObservationNapsinAIHCVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation P40 IHC
    src -> bundle.entry as entry then CreateTransformObservationP40IHCVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation Synaptophysin IHC
    src -> bundle.entry as entry then CreateTransformObservationSynaptophysinIHCVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation TTF1 IHC
    src -> bundle.entry as entry then CreateTransformObservationTTF1IHCVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation ALK IHC
    src -> bundle.entry as entry then CreateTransformObservationALKIHCVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation MET IHC
    src -> bundle.entry as entry then CreateTransformObservationMETIHCVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation PDL1 IHC
    src -> bundle.entry as entry then CreateTransformObservationPDL1IHCVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation ROS1 IHC
    src -> bundle.entry as entry then CreateTransformObservationROS1IHCVorbefund(src, entry);
    /*------------------------------------------------------------------------------
                        Chromogenic in-situ-Hybridisierung (CISH)                                   
    ------------------------------------------------------------------------------*/
    //Check if any fields are filled in before creating the Observation ALK CISH
    src -> bundle.entry as entry then CreateTransformObservationALKCISHVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation MET CISH
    src -> bundle.entry as entry then CreateTransformObservationMETCISHVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation RET CISH
    src -> bundle.entry as entry then CreateTransformObservationRETCISHVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation ROS1 CISH
    src -> bundle.entry as entry then CreateTransformObservationROS1CISHVorbefund(src, entry);
    /*------------------------------------------------------------------------------
                        Fluoreszenz-in-situ-Hybridisierung (FISH)                                   
    ------------------------------------------------------------------------------*/
    //Check if any fields are filled in before creating the Observation ALK FISH
    src -> bundle.entry as entry then CreateTransformObservationALKFISHVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation MET FISH
    src -> bundle.entry as entry then CreateTransformObservationMETFISHVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation RET FISH
    src -> bundle.entry as entry then CreateTransformObservationRETFISHVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation ROS1 FISH
    src -> bundle.entry as entry then CreateTransformObservationROS1FISHVorbefund(src, entry);
    /*------------------------------------------------------------------------------
                                    Fusion NGS                                  
    ------------------------------------------------------------------------------*/
    //Check if any fields are filled in before creating the Observation ALK FusionNGS
    src -> bundle.entry as entry then CreateTransformObservationALKFusionNGSVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation RET FusionNGS
    src -> bundle.entry as entry then CreateTransformObservationRETFusionNGSVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation ROS1 FusionNGS
    src -> bundle.entry as entry then CreateTransformObservationROS1FusionNGSVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation NTRK1 FusionNGS
    src -> bundle.entry as entry then CreateTransformObservationNTRK1FusionNGSVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation NTRK2 FusionNGS
    src -> bundle.entry as entry then CreateTransformObservationNTRK2FusionNGSVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation NTRK3 FusionNGS
    src -> bundle.entry as entry then CreateTransformObservationNTRK3FusionNGSVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation FGFR1 FusionNGS
    src -> bundle.entry as entry then CreateTransformObservationFGFR1FusionNGSVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation FGFR2 FusionNGS
    src -> bundle.entry as entry then CreateTransformObservationFGFR2FusionNGSVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation FGFR3 FusionNGS
    src -> bundle.entry as entry then CreateTransformObservationFGFR3FusionNGSVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation Sonstiges FusionNGS
    src -> bundle.entry as entry then CreateTransformObservationSonstigesFusionNGSVorbefund(src, entry);
    /*------------------------------------------------------------------------------
                                    Fast Track                                  
    ------------------------------------------------------------------------------*/
    //Check if any fields are filled in before creating the Observation BRAF Exon 15 Fast Track
    src -> bundle.entry as entry then CreateTransformObservationBRAFExon15Vorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation BRAF Exon 19 Fast Track
    src -> bundle.entry as entry then CreateTransformObservationBRAFExon19Vorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation BRAF Exon 20 Fast Track
    src -> bundle.entry as entry then CreateTransformObservationBRAFExon20Vorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation BRAF Exon 21 Fast Track
    src -> bundle.entry as entry then CreateTransformObservationBRAFExon21Vorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation KRAS Exon 2 Fast Track
    src -> bundle.entry as entry then CreateTransformObservationKRASExon2Vorbefund(src, entry);
    /*------------------------------------------------------------------------------
                                    Fusion NGS                                  
    ------------------------------------------------------------------------------*/
    //Check if any fields are filled in before creating the Device NGS Panel
    src -> bundle.entry as entry then CreateTransformDeviceNGSPanelVorbefund(src, entry);
    //Check if any fields are filled in before creating the Observation NGS Panel
    src -> bundle.entry as entry then CreateTransformObservationNGSPanelVorbefund(src, entry);
}

/* ------------------------------ Specimen ---------------------------- */
group CreateTransformSpecimenVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 27 and groupindex = 0 and itemid = 'id_1601'
                                     or blockindex = 0 and groupindex = 0 and itemid = 'id_2471'" then
        {
            src -> tgt.resource = create('Specimen') as specimen then TransformSpecimenVorbefund(src, specimen);
        };          
    };
}
/* ------------------------------ Specimen ---------------------------- */
group TransformSpecimenVorbefund(source src: CTS_Transport, target tgt: Specimen)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Specimen/nNGM';

    // Type : Item required on simplifier
    src -> tgt.type as type, type.coding as snomedGlobalPatientSet, snomedGlobalPatientSet.system  = 'http://snomed.info/sct',
                                                                    snomedGlobalPatientSet.version = 'http://snomed.info/sct/900000000000207008',
                                                                    snomedGlobalPatientSet.code    = 'UNKNOWN';

    // Patient 
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');
    
    src.operations as operations, operations.data as data then
    {
        /* ------------------------------ BIOPSIE REFERENZEN ---------------------------- */
        //Biopsy-ID
        data.values as values where "blockindex = 27 and groupindex = 0 and itemid = 'id_1601'" then
        {
            values.value as value ->  tgt.identifier   = create('Identifier') as biopsieId, 
                                      biopsieId.system = cast('http://uk-koeln.de/NamingSystem/nNGM/biopsienummer', 'FHIR.uri'),
                                      biopsieId.value  = value;
        };

        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2471'" then
        {
            values.value as value -> tgt.receivedTime = dateOp(value, 'dateTime');
        };


    };
}
/* ------------------------- DiagnosticReport ------------------------- */
group CreateTransformDiagnosticReportVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{

    src.operations as operations, operations.data as data then
    {   
        data.values as values where   "blockindex = 0 and groupindex = 0 and itemid = 'id_1653'
                                    or blockindex = 0 and groupindex = 0 and itemid = 'id_1654'" then
        {
            src -> tgt.resource = create('DiagnosticReport') as diagnosticReport then TransformDiagnosticReportVorbefund(src, diagnosticReport);
        };
    };
}
/* ------------------------- DiagnosticReport ------------------------- */
group TransformDiagnosticReportVorbefund(source src: CTS_Transport, target tgt: DiagnosticReport)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/DiagnosticReport/nNGM/befund';

    //status: Item required on simplifier
    src ->  tgt.status as status, 
            status.extension as dataAbsentReason, 
            dataAbsentReason.url       = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    //code: Item required on simplifier
    src ->  tgt.code as code, 
            code.extension as dataAbsentReason, 
            dataAbsentReason.url       = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    src.operations as operations, operations.data as data then
    {
        /* ------------------------- EXTERNES TUMORMATERIAL ----------------------------- */
        //Befunddatum
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1653'" then
        {
            values.value as value -> tgt.issued =  dateOp(value, 'date');
        };
        //Befundnummer 
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1654'" then
        {
            values.value as id -> tgt.identifier = create('Identifier') as befundNummer,
                                                          befundNummer.system = 'http://uk-koeln.de/NamingSystem/nNGM/befundnummer',
                                                          befundNummer.value  = id;
        };
    };
}
/* ---------------------- ObservationHistologie ----------------------- */
group CreateTransformObservationHistologieVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 1 and groupindex = 0 and itemid = 'id_1658'
                                    or blockindex = 1 and groupindex = 0 and itemid = 'id_2469'
                                    or blockindex = 1 and groupindex = 0 and itemid = 'id_2403'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationHistologieVorbefund(src, observation);
        };          
    };
}
/* ---------------------- ObservationHistologie ----------------------- */
group TransformObservationHistologieVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/nngm/histologie';
    
    //status: Item required on simplifier
    src ->  tgt.status as status, 
            status.extension as dataAbsentReason, 
            dataAbsentReason.url       = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    //code: Item required on simplifier
    src -> tgt.code = cc('http://ncit.nci.nih.gov','C18000');

    src.operations as operations, operations.data as data then
    {
        /* -------------------------------- HISTOLOGIE ---------------------------------- */
        //Klassifikation -> klassifikation component
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_1658'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nngm/histologie-klassifikation',value);
                value -> component.code                 = cc('http://ncit.nci.nih.gov', 'C25161');
            };
        };
        //Lokalisation 
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2469'" then
        {
            values.value as value -> tgt.bodySite = create('CodeableConcept') as cc, cc.coding as coding, 
                                                        coding.system  = 'http://uk-koeln.de/fhir/ValueSet/icd-o-3-bodysite',
                                                        coding.code    = evaluate(value, '$this.split(\'\\t\').first()'),
                                                        coding.display = evaluate(value, '$this.split(\'\\t\').last()');
        };
        // Grading
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'id_2403'" then
        {
            values.value as value -> tgt.valueCodeableConcept = create('CodeableConcept') as cc, cc.coding as coding, 
                                                                    coding.system  = 'http://uk-koeln.de/fhir/ValueSet/nngm/grading',
                                                                    coding.code    = evaluate(value, '$this.split(\'\\t\').first()'),
                                                                    coding.display = evaluate(value, '$this.split(\'\\t\').last()');
        };
    };
}
/*------------------------------------------------------------------------------
                         Immunhistochemie (IHC)                                   
------------------------------------------------------------------------------*/
/* ---------------------- Observation BRAF IHC ------------------------ */
group CreateTransformObservationBRAFIHCVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_group'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_phaenotype'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_result'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationBRAFIHCVorbefund(src, observation);
        };          
    };
}
/* ---------------------- Observation BRAF IHC ------------------------ */
group TransformObservationBRAFIHCVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapIHCStatusCategoryMethod(src, tgt);
    
    //Code -> BRAF: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'BRAF');

    src.operations as operations, operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_group'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_phaenotype'" then
        {
            values.value as value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as value ->tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueString = value;
                    value -> component.code        = cc('http://ncit.nci.nih.gov', 'C16977');
                };
            };
        };
        //Ergebnis 
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_result'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
    };
}
/* ---------------------- Observation CK7 IHC ------------------------ */
group CreateTransformObservationCK7IHCVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 5 and groupindex = 0 and itemid = 'id_2037'
                                    or blockindex = 5 and groupindex = 0 and itemid = 'id_2038'
                                    or blockindex = 5 and groupindex = 0 and itemid = 'id_2045'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationCK7IHCVorbefund(src, observation);
        };          
    };
}
/* ---------------------- Observation CK7 IHC ------------------------ */
group TransformObservationCK7IHCVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    
    src then MapIHCStatusCategoryMethod(src, tgt);

    //Code -> CK7: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'CK7');

    src.operations as operations, operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2037'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2038'" then
        {
            values.value as value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as value ->tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueString = value;
                    value -> component.code        = cc('http://ncit.nci.nih.gov', 'C16977');
                };
            };
        };
        //Ergebnis 
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2045'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
    };
}
/* ---------------------- Observation MIB1 IHC ------------------------ */
group CreateTransformObservationMIB1IHCVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 7 and groupindex = 0 and itemid = 'id_2055'
                                    or blockindex = 7 and groupindex = 0 and itemid = 'id_2056'
                                    or blockindex = 7 and groupindex = 0 and itemid = 'id_2063'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationMIB1IHCVorbefund(src, observation);
        };          
    };
}
/* ---------------------- Observation MIB1 IHC ------------------------ */
group TransformObservationMIB1IHCVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapIHCStatusCategoryMethod(src, tgt);

    //Code -> MIB1: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'MIB1');

    src.operations as operations, operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2055'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2056'" then
        {
            values.value as value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as value ->tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueString = value;
                    value -> component.code        = cc('http://ncit.nci.nih.gov', 'C16977');
                };
            };
        };
        //Ergebnis 
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2063'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
    };
}
/* --------------------- Observation NapsinA IHC ---------------------- */
group CreateTransformObservationNapsinAIHCVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 14 and groupindex = 0 and itemid = 'id_2064'
                                    or blockindex = 14 and groupindex = 0 and itemid = 'id_2065'
                                    or blockindex = 14 and groupindex = 0 and itemid = 'id_2072'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationNapsinAIHCVorbefund(src, observation);
        };          
    };
}
/* --------------------- Observation NapsinA IHC ---------------------- */
group TransformObservationNapsinAIHCVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapIHCStatusCategoryMethod(src, tgt);

    //Code -> Napsin A: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'Napsin A');

    src.operations as operations, operations.data as data then
    {
        
        //Date of Assessment
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2064'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2065'" then
        {
            values.value as value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as value ->tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueString = value;
                    value -> component.code        = cc('http://ncit.nci.nih.gov', 'C16977');
                };
            };
        };
        //Ergebnis 
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2072'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
    };
}
/* ---------------------- Observation P40 IHC ------------------------- */
group CreateTransformObservationP40IHCVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 15 and groupindex = 0 and itemid = 'id_2073'
                                    or blockindex = 15 and groupindex = 0 and itemid = 'id_2074'
                                    or blockindex = 15 and groupindex = 0 and itemid = 'id_2079'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationP40IHCVorbefund(src, observation);
        };          
    };
}
/* ---------------------- Observation P40 IHC ------------------------- */
group TransformObservationP40IHCVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapIHCStatusCategoryMethod(src, tgt);

    //Code -> P40: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'P40');

    src.operations as operations, operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2073'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2074'" then
        {
            values.value as value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as value ->tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueString = value;
                    value -> component.code        = cc('http://ncit.nci.nih.gov', 'C16977');
                };
            };
        };
        //Ergebnis 
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2079'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
    };
}
/* ----------------- Observation Synaptophysin IHC -------------------- */
group CreateTransformObservationSynaptophysinIHCVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 18 and groupindex = 0 and itemid = 'id_2080'
                                    or blockindex = 18 and groupindex = 0 and itemid = 'id_2081'
                                    or blockindex = 18 and groupindex = 0 and itemid = 'id_2088'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationSynaptophysinIHCVorbefund(src, observation);
        };          
    };
}
/* ----------------- Observation Synaptophysin IHC -------------------- */
group TransformObservationSynaptophysinIHCVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapIHCStatusCategoryMethod(src, tgt);

    //Code -> Synaptophysin: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'Synaptophysin');

    src.operations as operations, operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 18 and groupindex = 0 and itemid = 'id_2080'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 18 and groupindex = 0 and itemid = 'id_2081'" then
        {
            values.value as value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as value ->tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueString = value;
                    value -> component.code        = cc('http://ncit.nci.nih.gov', 'C16977');
                };
            };
        };
        //Ergebnis 
        data.values as values where "blockindex = 18 and groupindex = 0 and itemid = 'id_2088'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
    };
}
/* --------------------- Observation TTF1 IHC ------------------------- */
group CreateTransformObservationTTF1IHCVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 19 and groupindex = 0 and itemid = 'id_2089'
                                    or blockindex = 19 and groupindex = 0 and itemid = 'id_2090'
                                    or blockindex = 19 and groupindex = 0 and itemid = 'id_2097'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationTTF1IHCVorbefund(src, observation);
        };          
    };
}
/* --------------------- Observation TTF1 IHC ------------------------- */
group TransformObservationTTF1IHCVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    
    src then MapIHCStatusCategoryMethod(src, tgt);

    //Code -> TTF1: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'TTF1');

    src.operations as operations, operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 19 and groupindex = 0 and itemid = 'id_2089'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 19 and groupindex = 0 and itemid = 'id_2090'" then
        {
            values.value as value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as value ->tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueString = value;
                    value -> component.code        = cc('http://ncit.nci.nih.gov', 'C16977');
                };
            };
        };
        //Ergebnis 
        data.values as values where "blockindex = 19 and groupindex = 0 and itemid = 'id_2097'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
    };
}
/* --------------------- Observation ALK IHC --------------------------- */
group CreateTransformObservationALKIHCVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 3 and groupindex = 0 and itemid = 'id_2106'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationALKIHCVorbefund(src, observation);
        };          
    };
}
/* --------------------- Observation ALK IHC --------------------------- */
group TransformObservationALKIHCVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapIHCStatusCategoryMethod(src, tgt);

    //Code -> ALK: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'ALK');


    //Date of Assessment -> 3, 0,id_2098
    //Phaenotyp -> 3, 0, id_2099 
    //these two items shown before were mapped in the following group
    src then MapObservationALKDatePhaenotyp(src, tgt);

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- IHC ---------------------------------- */
        //Ergebnis 
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2106'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'fraglich'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA11884-6', 'Indeterminate');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
    };
}
/* --------------------- Observation MET IHC --------------------------- */
group CreateTransformObservationMETIHCVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 6 and groupindex = 0 and itemid = 'id_2139'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2140'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2141'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationMETIHCVorbefund(src, observation);
        };          
    };
}
/* --------------------- Observation MET IHC --------------------------- */
group TransformObservationMETIHCVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapIHCStatusCategoryMethod(src, tgt);

    //Code -> MET: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'MET');

    //Date of Assessment -> 6, 0,id_2132
    //Phaenotyp -> 6, 0, id_2133
    //these two items shown before were mapped in the following group
    src then MapObservationMETDatePhaenotyp(src, tgt);

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- IHC ---------------------------------- */
        //Ergebnis 
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2139'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'fraglich'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA11884-6', 'Indeterminate');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //Klassifikation -> Klassifikation component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2140'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueCodeableConcept	 = cc('http://uk-koeln.de/fhir/ValueSet/0-3+-klassifikation',value,value);
                value -> component.code                  = cc('http://ncit.nci.nih.gov', 'C25161');
            };
        };
        //Expression high-level
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2141'" then
        {
            values.value as value where "value = 'yes'" then
            {
                value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueBoolean	 = cast(true, 'FHIR.boolean');
                    value -> component.code          = cc('http://ncit.nci.nih.gov', 'C129474');
                };
            };
            values.value as value where "value = 'no'" then
            {
                value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueBoolean	 = cast(false, 'FHIR.boolean');
                    value -> component.code          = cc('http://ncit.nci.nih.gov', 'C129474');
                };
            };
        };
    };
}
/* --------------------- Observation PD-L1 IHC ------------------------- */
group CreateTransformObservationPDL1IHCVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 16 and groupindex = 0 and itemid = 'id_2172'
                                    or blockindex = 16 and groupindex = 0 and itemid = 'id_2173'
                                    or blockindex = 16 and groupindex = 0 and itemid = 'id_2180'
                                    or blockindex = 16 and groupindex = 0 and itemid = 'id_2181'
                                    or blockindex = 16 and groupindex = 0 and itemid = 'id_2182'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationPDL1IHCVorbefund(src, observation);
        };          
    };
}
/* --------------------- Observation PD-L1 IHC ------------------------- */
group TransformObservationPDL1IHCVorbefund(source src: CTS_Transport, target tgt: Observation)
{ 
    src -> tgt.id = uuid();
    
    src then MapIHCStatusCategoryMethod(src, tgt);

    //Code -> PD-L1: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'PD-L1');

    src.operations as operations, operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 16 and groupindex = 0 and itemid = 'id_2172'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 16 and groupindex = 0 and itemid = 'id_2173'" then
        {
            values.value as value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as value ->tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueString = value;
                    value -> component.code        = cc('http://ncit.nci.nih.gov', 'C16977');
                };
            };
        };
        //Ergebnis 
        data.values as values where "blockindex = 16 and groupindex = 0 and itemid = 'id_2180'" then
        {
            values.value as value where "value = 'auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //Menge der Tumorzellen (% positive Tumorzellen TPS) -> menge-tumorzellen component
        data.values as values where "blockindex = 16 and groupindex = 0 and itemid = 'id_2181'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C127771');
            };
        };
        //Fläche positiver Immunzellen / Gesamttumorfläche -> ratio-pos-flaeche component
        data.values as values where "blockindex = 16 and groupindex = 0 and itemid = 'id_2182'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'tcell-surface-ratio');
            };
        };
    };
}
/* --------------------- Observation ROS1 IHC -------------------------- */
group CreateTransformObservationROS1IHCVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 17 and groupindex = 0 and itemid = 'id_2219'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationROS1IHCVorbefund(src, observation);
        };          
    };
}
/* --------------------- Observation ROS1 IHC -------------------------- */
group TransformObservationROS1IHCVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapIHCStatusCategoryMethod(src, tgt);

    //Code -> ROS1: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'ROS1');

    //TODO
    //Date of Assessment -> 17, 0,id_2211
    //Phaenotyp -> 17, 0, id_2212
    //these two items shown before were mapped in the following group
    src then MapObservationROS1DatePhaenotyp(src, tgt);

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- IHC ---------------------------------- */
        //Ergebnis 
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2219'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'fraglich'" then 
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA11884-6', 'Indeterminate');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
    };
}
/*------------------------------------------------------------------------------
                        Chromogenic in-situ-Hybridisierung (CISH)                                   
------------------------------------------------------------------------------*/
/* --------------------- Observation ALK CISH -------------------------- */
group CreateTransformObservationALKCISHVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 3 and groupindex = 0 and itemid = 'id_2112'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_2113'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationALKCISHVorbefund(src, observation);
        };          
    };
}
/* --------------------- Observation ALK CISH -------------------------- */
group TransformObservationALKCISHVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapCISHStatusCategoryMethod(src, tgt);

    //Code -> ALK: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'ALK');

    //TODO
    //Date of Assessment -> 3, 0,id_2098
    //Phaenotyp -> 3, 0, id_2099
    //these two items shown before were mapped in the following group
    src then MapObservationALKDatePhaenotyp(src, tgt);

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- CISH --------------------------------- */
        //Ergebnis 
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2112'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //Positive Tumorzellen -> pos-tumor-zellen component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2113'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };
    };
}
/* --------------------- Observation MET CISH -------------------------- */
group CreateTransformObservationMETCISHVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 6 and groupindex = 0 and itemid = 'id_2147'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2148'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationMETCISHVorbefund(src, observation);
        };          
    };
}
/* --------------------- Observation MET CISH -------------------------- */
group TransformObservationMETCISHVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapCISHStatusCategoryMethod(src, tgt);

    //Code -> MET: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'MET');

    //TODO
    //Date of Assessment -> 6, 0,id_2132
    //Phaenotyp -> 6, 0, id_2133
    //these two items shown before were mapped in the following group
    src then MapObservationMETDatePhaenotyp(src, tgt);

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- CISH --------------------------------- */
        //Ergebnis 
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2147'" then
        {
            values.value as value where "value = 'positiv (high-level amplification)'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'positiv (moderate-level amplification)'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA11884-6', 'Indeterminate');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        
        //Amplifikation -> amplification-level component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2148'" then
        {
            values.value as value where "value = 'Amplifikation high-level'" then 
            {
               value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://uk-koeln.de/fhir/ValueSet/high-medium-low', 'LA6576-8', 'Positive');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
            values.value as value where "value = 'Amplifikation moderate-level'" then 
            {
               value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://uk-koeln.de/fhir/ValueSet/high-medium-low', 'LA11884-6', 'Indeterminate');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
            values.value as value where "value = 'keine Amplifikation'" then 
            {
               value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://uk-koeln.de/fhir/ValueSet/high-medium-low', 'LA32-8', 'No');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
        };
    };
}
/* --------------------- Observation RET CISH -------------------------- */
group CreateTransformObservationRETCISHVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 20 and groupindex = 0 and itemid = 'id_2191'
                                    or blockindex = 20 and groupindex = 0 and itemid = 'id_2192'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationRETCISHVorbefund(src, observation);
        };          
    };
}
/* --------------------- Observation RET CISH -------------------------- */
group TransformObservationRETCISHVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapCISHStatusCategoryMethod(src, tgt);

    //Code -> RET: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'RET');

    //Date of Assessment -> 20, 0,id_2183
    //Phaenotyp -> 20, 0, id_2184
    //these two items shown before were mapped in the following group
    src then MapObservationRETDatePhaenotyp(src, tgt);

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- CISH --------------------------------- */
        //Ergebnis 
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2191'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //TODO
        //Positive Tumorzellen -> pos-tumor-zellen component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2192'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };
    };
}
/* --------------------- Observation ROS1 CISH ------------------------- */
group CreateTransformObservationROS1CISHVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 17 and groupindex = 0 and itemid = 'id_2225'
                                    or blockindex = 17 and groupindex = 0 and itemid = 'id_2226'
                                    or blockindex = 17 and groupindex = 0 and itemid = 'id_2227'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationROS1CISHVorbefund(src, observation);
        };          
    };
}
/* --------------------- Observation ROS1 CISH ------------------------- */
group TransformObservationROS1CISHVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapCISHStatusCategoryMethod(src, tgt);

    //Code -> ROS1: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'ROS1');

    //Date of Assessment -> 17, 0,id_2211
    //Phaenotyp -> 17, 0, id_2212
    //these two items shown before were mapped in the following group
    src then MapObservationROS1DatePhaenotyp(src, tgt);

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- CISH --------------------------------- */
        //Ergebnis 
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2225'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //Positive Tumorzellen -> pos-tumor-zellen component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2226'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };
        //Polysomie -> polysomie component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2227'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };
    };
}
/*------------------------------------------------------------------------------
                Fluoreszenz-in-situ-Hybridisierung (FISH)                       
------------------------------------------------------------------------------*/
/* --------------------- Observation ALK FISH -------------------------- */
group CreateTransformObservationALKFISHVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 3 and groupindex = 0 and itemid = 'id_2119'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_2120'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_2121'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationALKFISHVorbefund(src, observation);
        };          
    };
}
/* --------------------- Observation ALK FISH -------------------------- */
group TransformObservationALKFISHVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapFISHStatusCategoryMethod(src, tgt);

    //Code -> ALK: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'ALK');

    //TODO
    //Date of Assessment -> 3, 0,id_2098
    //Phaenotyp -> 3, 0, id_2099
    //these two items shown before were mapped in the following group
    src then MapObservationALKDatePhaenotyp(src, tgt);

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- FISH --------------------------------- */
        //Ergebnis 
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2119'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //Positive Tumorzellen -> pos-tumor-zellen component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2120'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };
        //Polysomie -> polysomie component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2121'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };
    };
}
/* --------------------- Observation MET FISH -------------------------- */
group CreateTransformObservationMETFISHVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 6 and groupindex = 0 and itemid = 'id_2154'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2155'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2156'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2157'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2158'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2159'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2160'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2161'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2162'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2163'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2164'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationMETFISHVorbefund(src, observation);
        };          
    };
}
/* --------------------- Observation MET FISH -------------------------- */
group TransformObservationMETFISHVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapFISHStatusCategoryMethod(src, tgt);

    //Code -> MET: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'MET');

    //TODO
    //Date of Assessment -> 6, 0,id_2132
    //Phaenotyp -> 6, 0, id_2133
    //these two items shown before were mapped in the following group
    src then MapObservationMETDatePhaenotyp(src, tgt);

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- FISH --------------------------------- */
        //Ergebnis 
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2154'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };

        //Amplifikation -> amplification-level component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2155'" then
        {
            values.value as value where "value = 'Amplifikation high-level'" then 
            {
               value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://uk-koeln.de/fhir/ValueSet/high-medium-low', 'LA6576-8', 'Positive');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
            values.value as value where "value = 'Amplifikation intermediate-level'" then 
            {
               value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://uk-koeln.de/fhir/ValueSet/high-medium-low', 'LA11884-6', 'Indeterminate');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
            //TODO:Please verify the value code to change to right  value
            values.value as value where "value = 'Amplifikation low-level'" then 
            {
               value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://uk-koeln.de/fhir/ValueSet/high-medium-low', 'LA32-8', 'No');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
            values.value as value where "value = 'negativ'" then 
            {
                value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
            values.value as value where "value = 'nicht auswertbar'" then 
            {
               value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueCodeableConcept    = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
                    value -> component.code                    = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
                };
            };
        };
        //Prozentzahl an Zellen mit mehr als 15 MET-Signalen pro Zelle (Positiv ≥ 10 %) bei einer high-level Amplifikation
        //15-met-ratio component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2156'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', '15-met-ratio');
            };
        };
        //Prozentzahl an Zellen mit mehr als 5 MET-Signalen pro Zelle (Positiv ≥ 50 %) bei einer intermediate-level Amplifikation
        //5-met-ratio component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2157'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', '5-met-ratio');
            };
        };
        //Prozentzahl an Zellen mit mehr als 4 MET-Signalen pro Zelle (Positiv ≥ 40 %) bei einer low-level Amplifikation
        //4-met-ratio component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2158'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', '4-met-ratio');
            };
        };
        //Gezählte Tumorzellen
        //gezaehlteTumorzellen component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2159'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C0007584');
            };
        };
        //MET Signale
        //met-signale component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2160'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'met-signal-count');
            };
        };
        //CEN Signale
        //CEN-signale component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2161'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'cen-signal-count');
            };
        };
        //Quotient MET/CEN7 Signale
        //quot-met-cen-signal component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2162'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'met-cen-signal-ratio');
            };
        };
        //Durchschnitt MET-Genkopiezahl/Zelle (Positiv ≥ 6)
        //met-copy-pro-zell component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2163'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'met-copy-per-cell');
            };
        };
        //Polysomie
        //polysomie component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2164'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };
    };
}
/* --------------------- Observation RET FISH -------------------------- */
group CreateTransformObservationRETFISHVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 20 and groupindex = 0 and itemid = 'id_2198'
                                    or blockindex = 20 and groupindex = 0 and itemid = 'id_2199'
                                    or blockindex = 20 and groupindex = 0 and itemid = 'id_2200'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationRETFISHVorbefund(src, observation);
        };          
    };
}
/* --------------------- Observation RET FISH -------------------------- */
group TransformObservationRETFISHVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapFISHStatusCategoryMethod(src, tgt);

    //Code -> RET: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'RET');

    //Date of Assessment -> 20, 0,id_2183
    //Phaenotyp -> 20, 0, id_2184
    //these two items shown before were mapped in the following group
    src then MapObservationRETDatePhaenotyp(src, tgt);

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- FISH --------------------------------- */
        //Ergebnis 
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2198'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //TODO
        //Positive Tumorzellen -> pos-tumor-zellen component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2199'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };
        //Polysomie
        //polysomie component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2200'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };
    };
}
/* --------------------- Observation ROS1 FISH ------------------------- */
group CreateTransformObservationROS1FISHVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 17 and groupindex = 0 and itemid = 'id_2233'
                                    or blockindex = 17 and groupindex = 0 and itemid = 'id_2234'
                                    or blockindex = 17 and groupindex = 0 and itemid = 'id_2235'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationROS1FISHVorbefund(src, observation);
        };          
    };
}
/* --------------------- Observation ROS1 FISH ------------------------- */
group TransformObservationROS1FISHVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapFISHStatusCategoryMethod(src, tgt);

    //Code -> ROS1: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'ROS1');

    //Date of Assessment -> 17, 0,id_2211
    //Phaenotyp -> 17, 0, id_2212
    //these two items shown before were mapped in the following group
    src then MapObservationROS1DatePhaenotyp(src, tgt);

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- FISH --------------------------------- */
        //Ergebnis 
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2233'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //Positive Tumorzellen -> pos-tumor-zellen component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2234'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };
        //Polysomie -> polysomie component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2235'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueQuantity = create('Quantity') as quantity then MapPercentageValue(value, quantity);
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };
    };
}
/*------------------------------------------------------------------------------
                                    Fusion NGS                                  
------------------------------------------------------------------------------*/
/* --------------------- Observation ALK FusionNGS -------------------------- */
group CreateTransformObservationALKFusionNGSVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 3 and groupindex = 0 and itemid = 'id_2127'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_2128'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_2129'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_2130'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_2131'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationALKFusionNGSVorbefund(src, observation);
        };          
    };
}
/* ------------------ Observation ALK FusionNGS ------------------------ */
group TransformObservationALKFusionNGSVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapFusionNGSStatusCategoryMethod(src, tgt);

    //Code -> ALK: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'ALK');

    //TODO
    //Date of Assessment -> 3, 0,id_2098
    //Phaenotyp -> 3, 0, id_2099
    //these two items shown before were mapped in the following group
    src then MapObservationALKDatePhaenotyp(src, tgt);

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- FusionNGS --------------------------------- */
        //Ergebnis 
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2127'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2128'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2129'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };
        //5' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2130'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };
        //ALK Exon -> exon component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2131'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };
    };
}
/* ------------------ Observation RET FusionNGS ------------------------ */
group CreateTransformObservationRETFusionNGSVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 20 and groupindex = 0 and itemid = 'id_2206'
                                    or blockindex = 20 and groupindex = 0 and itemid = 'id_2207'
                                    or blockindex = 20 and groupindex = 0 and itemid = 'id_2208'
                                    or blockindex = 20 and groupindex = 0 and itemid = 'id_2209'
                                    or blockindex = 20 and groupindex = 0 and itemid = 'id_2210'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationRETFusionNGSVorbefund(src, observation);
        };          
    };
}
/* ------------------ Observation RET FusionNGS ------------------------ */
group TransformObservationRETFusionNGSVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapFusionNGSStatusCategoryMethod(src, tgt);

    //Code -> RET: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'RET');

    //Date of Assessment -> 20, 0,id_2183
    //Phaenotyp -> 20, 0, id_2184
    //these two items shown before were mapped in the following group
    src then MapObservationRETDatePhaenotyp(src, tgt);

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- FusionNGS --------------------------------- */
        //Ergebnis 
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2206'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2207'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2208'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };
        //5' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2209'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };
        //RET Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2210'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };
    };
}
/* ---------------- Observation ROS1 FusionNGS ------------------------- */
group CreateTransformObservationROS1FusionNGSVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 17 and groupindex = 0 and itemid = 'id_2241'
                                    or blockindex = 17 and groupindex = 0 and itemid = 'id_2242'
                                    or blockindex = 17 and groupindex = 0 and itemid = 'id_2243'
                                    or blockindex = 17 and groupindex = 0 and itemid = 'id_2244'
                                    or blockindex = 17 and groupindex = 0 and itemid = 'id_2245'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationROS1FusionNGSVorbefund(src, observation);
        };          
    };
}
/* ---------------- Observation ROS1 FusionNGS ------------------------- */
group TransformObservationROS1FusionNGSVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapFusionNGSStatusCategoryMethod(src, tgt);

    //Code -> ROS1: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'ROS1');

    //Date of Assessment -> 17, 0,id_2211
    //Phaenotyp -> 17, 0, id_2212
    //these two items shown before were mapped in the following group
    src then MapObservationROS1DatePhaenotyp(src, tgt);

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- FusionNGS --------------------------------- */
        //Ergebnis 
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2241'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2242'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2243'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };
        //5' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2244'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };
        //ROS1 Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2245'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };
    };
} 
/* ----------------- Observation NTRK1 FusionNGS ----------------------- */
group CreateTransformObservationNTRK1FusionNGSVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 8 and groupindex = 0 and itemid = 'id_2540'
                                    or blockindex = 8 and groupindex = 0 and itemid = 'id_2547'
                                    or blockindex = 8 and groupindex = 0 and itemid = 'id_2548'
                                    or blockindex = 8 and groupindex = 0 and itemid = 'id_2549'
                                    or blockindex = 8 and groupindex = 0 and itemid = 'id_2550'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationNTRK1FusionNGSVorbefund(src, observation);
        };          
    };
}
/* ----------------- Observation NTRK1 FusionNGS ----------------------- */
group TransformObservationNTRK1FusionNGSVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapFusionNGSStatusCategoryMethod(src, tgt);

    //Code -> NTRK1: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'NTRK1');

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- FusionNGS --------------------------------- */
        //Date of Assessment
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2540'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Ergebnis 
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2547'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2548'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2549'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };
        //5' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2550'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };
    };
}
/* ------------------ Observation NTRK2 FusionNGS ---------------------- */
group CreateTransformObservationNTRK2FusionNGSVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 9 and groupindex = 0 and itemid = 'id_2592'
                                    or blockindex = 9 and groupindex = 0 and itemid = 'id_2596'
                                    or blockindex = 9 and groupindex = 0 and itemid = 'id_2597'
                                    or blockindex = 9 and groupindex = 0 and itemid = 'id_2598'
                                    or blockindex = 9 and groupindex = 0 and itemid = 'id_2599'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationNTRK2FusionNGSVorbefund(src, observation);
        };          
    };
}
/* ---------------- Observation NTRK2 FusionNGS ------------------------ */
group TransformObservationNTRK2FusionNGSVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapFusionNGSStatusCategoryMethod(src, tgt);

    //Code -> NTRK2: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'NTRK2');

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- FusionNGS --------------------------------- */
        //Date of Assessment
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2592'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Ergebnis 
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2596'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2597'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2598'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };
        //5' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2599'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };
    };
}
/* ----------------- Observation NTRK3 FusionNGS ----------------------- */
group CreateTransformObservationNTRK3FusionNGSVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 10 and groupindex = 0 and itemid = 'id_2584'
                                    or blockindex = 10 and groupindex = 0 and itemid = 'id_2588'
                                    or blockindex = 10 and groupindex = 0 and itemid = 'id_2589'
                                    or blockindex = 10 and groupindex = 0 and itemid = 'id_2590'
                                    or blockindex = 10 and groupindex = 0 and itemid = 'id_2591'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationNTRK3FusionNGSVorbefund(src, observation);
        };          
    };
}
/* ----------------- Observation NTRK3 FusionNGS ----------------------- */
group TransformObservationNTRK3FusionNGSVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapFusionNGSStatusCategoryMethod(src, tgt);

    //Code -> NTRK3: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'NTRK3');

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- FusionNGS --------------------------------- */
        //Date of Assessment
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2584'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Ergebnis 
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2588'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2589'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2590'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };
        //5' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2591'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };
    };
}
/* ---------------- Observation FGFR1 FusionNGS ------------------------ */
group CreateTransformObservationFGFR1FusionNGSVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 11 and groupindex = 0 and itemid = 'id_2576'
                                    or blockindex = 11 and groupindex = 0 and itemid = 'id_2580'
                                    or blockindex = 11 and groupindex = 0 and itemid = 'id_2581'
                                    or blockindex = 11 and groupindex = 0 and itemid = 'id_2582'
                                    or blockindex = 11 and groupindex = 0 and itemid = 'id_2583'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationFGFR1FusionNGSVorbefund(src, observation);
        };          
    };
}
/* ---------------- Observation FGFR1 FusionNGS ------------------------ */
group TransformObservationFGFR1FusionNGSVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapFusionNGSStatusCategoryMethod(src, tgt);

    //Code -> FGFR1: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'FGFR1');

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- FusionNGS --------------------------------- */
        //Date of Assessment
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2576'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Ergebnis 
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2580'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2581'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2582'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };
        //5' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2583'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };
    };
}
/* ---------------- Observation FGFR2 FusionNGS ------------------------ */
group CreateTransformObservationFGFR2FusionNGSVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 12 and groupindex = 0 and itemid = 'id_2568'
                                    or blockindex = 12 and groupindex = 0 and itemid = 'id_2572'
                                    or blockindex = 12 and groupindex = 0 and itemid = 'id_2573'
                                    or blockindex = 12 and groupindex = 0 and itemid = 'id_2574'
                                    or blockindex = 12 and groupindex = 0 and itemid = 'id_2575'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationFGFR2FusionNGSVorbefund(src, observation);
        };          
    };
}

/* ----------------- Observation FGFR2 FusionNGS ----------------------- */
group TransformObservationFGFR2FusionNGSVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapFusionNGSStatusCategoryMethod(src, tgt);

    //Code -> FGFR2: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'FGFR2');

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- FusionNGS --------------------------------- */
        //Date of Assessment
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2568'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Ergebnis 
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2572'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2573'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2574'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };
        //3' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2575'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };
    };
}
/* ----------------- Observation FGFR3 FusionNGS ----------------------- */
group CreateTransformObservationFGFR3FusionNGSVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 13 and groupindex = 0 and itemid = 'id_2560'
                                    or blockindex = 13 and groupindex = 0 and itemid = 'id_2564'
                                    or blockindex = 13 and groupindex = 0 and itemid = 'id_2565'
                                    or blockindex = 13 and groupindex = 0 and itemid = 'id_2566'
                                    or blockindex = 13 and groupindex = 0 and itemid = 'id_2567'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationFGFR3FusionNGSVorbefund(src, observation);
        };          
    };
}
/* ----------------- Observation FGFR3 FusionNGS ----------------------- */
group TransformObservationFGFR3FusionNGSVorbefund(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();

    src then MapFusionNGSStatusCategoryMethod(src, tgt);

    //Code -> FGFR3: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'FGFR3');

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- FusionNGS --------------------------------- */
        //Date of Assessment
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2560'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Ergebnis 
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2564'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        //Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2565'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2566'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };
        //3' Fusionspartner Exon -> fusionspartner-exon component
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2567'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'fusionspartner-exon');
            };
        };
    };
}
/* ---------------- Observation Sonstiges FusionNGS -------------------- */
group CreateTransformObservationSonstigesFusionNGSVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 21 and groupindex = 0 and repeatindex = 0 and itemid = 'id_2246'
                                    or blockindex = 21 and groupindex = 0 and repeatindex = 0 and itemid = 'id_2254'
                                    or blockindex = 21 and groupindex = 0 and repeatindex = 0 and itemid = 'id_2255'
                                    or blockindex = 21 and groupindex = 0 and repeatindex = 0 and itemid = 'id_2256'
                                    or blockindex = 21 and groupindex = 0 and repeatindex = 0 and itemid = 'id_2257'
                                    or blockindex = 21 and groupindex = 0 and repeatindex = 0 and itemid = 'id_2258'
                                    or blockindex = 21 and groupindex = 0 and repeatindex = 0 and itemid = 'id_2259'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationSonstigesFusionNGSVorbefund(src, observation);
        };          
    };
}
/* ---------------- Observation Sonstiges FusionNGS -------------------- */
group TransformObservationSonstigesFusionNGSVorbefund(source src: CTS_Transport, target tgt: Observation)
{ 
    src -> tgt.id = uuid();

    src then MapFusionNGSStatusCategoryMethod(src, tgt);

    //Code -> Sonstiges: Item required in Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/molpatho-obs-codes', 'Sonstiges');

    src.operations as operations, operations.data as data then
    {
        /* ---------------------------- FusionNGS --------------------------------- */
        
        //Date of Assessment
        data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = 0 and itemid = 'id_2246'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Ergebnis 
        data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = 0 and itemid = 'id_2254'" then
        {
            values.value as value where "value = 'positiv'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6576-8', 'Positive');
            };

            values.value as value where "value = 'negativ'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA6577-6', 'Negative');
            };

            values.value as value where "value = 'nicht auswertbar'" then 
            {
                value ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/nNGM/ergebnis-posNegIndNoCall', 'LA18198-4', 'No call');
            };
        };
        
        //Erster Fusionspartner -> erster-fusionspartner component
        data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = 0 and itemid = 'id_2255'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hgnc-codes',value);
                value -> component.code                 = cc('http://loinc.org', '48018-6');
            };
        };
        //Zweiter Fusionspartner -> fusionspartner component
        data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = 0 and itemid = 'id_2256'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C28510');
            };
        };
        //Anzahl der Fusionsreads -> anzahl-der-fusionsreads component
        data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = 0 and itemid = 'id_2257'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://loinc.org', '82121-5');
            };
        };

        /*
        //Exon erster Fusionspartner
        data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = 0 and itemid = 'id_2258'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'erster-fusionspartner-exon');
            };
        };
        
        //Exon zweiter Fusionspartner
        data.values as values where "blockindex = 21 and groupindex = 0 and repeatindex = 0 and itemid = 'id_2259'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueInteger  = cast(value, 'FHIR.integer');
                value -> component.code          = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'zweiter-fusionspartner-exon');
            };
        };
        
        */
    
    };
}
/*------------------------------------------------------------------------------
                                    Fast Track                                  
------------------------------------------------------------------------------*/
/* ------------ Observation BRAF Exon 15 Fast Track -------------------- */
group CreateTransformObservationBRAFExon15Vorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 22 and groupindex = 0 and itemid = 'id_1945'
                                    or blockindex = 22 and groupindex = 0 and itemid = 'id_1946'
                                    or blockindex = 22 and groupindex = 0 and itemid = 'id_1947'
                                    or blockindex = 22 and groupindex = 0 and itemid = 'id_1948'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationBRAFExon15Vorbefund(src, observation);
        };          
    }; 
}
/* ------------ Observation BRAF Exon 15 Fast Track -------------------- */
group TransformObservationBRAFExon15Vorbefund(source src: CTS_Transport, target tgt: Observation)
{ 
    src -> tgt.id = uuid();
    
    src then MapFastTrackStatusCategoryMethod(src, tgt);

    //Code: Item required on Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-obs-codes', 'C158854', 'BRAF Exon 15 Mutation');

    src.operations as operations, operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 22 and groupindex = 0 and itemid = 'id_1945'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        // Ergebnis
        data.values as values where "blockindex = 22 and groupindex = 0 and itemid = 'id_1946'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', value);
        };
        //Change DNA -> dna-chg component
        data.values as values where "blockindex = 22 and groupindex = 0 and itemid = 'id_1947'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48004-6');
                value -> component.valueString = value;
            };
        };
        //Change Protein -> amino-acid-chg component
        data.values as values where "blockindex = 22 and groupindex = 0 and itemid = 'id_1948'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48005-3');
                value -> component.valueString = value;
            };
        };
    };

}
/* ------------ Observation BRAF Exon 19 Fast Track -------------------- */
group CreateTransformObservationBRAFExon19Vorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 23 and groupindex = 0 and itemid = 'id_1950'
                                    or blockindex = 23 and groupindex = 0 and itemid = 'id_1951'
                                    or blockindex = 23 and groupindex = 0 and itemid = 'id_1952'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationBRAFExon19Vorbefund(src, observation);
        };          
    }; 
}
/* ------------ Observation BRAF Exon 19 Fast Track -------------------- */
group TransformObservationBRAFExon19Vorbefund(source src: CTS_Transport, target tgt: Observation)
{ 
    src -> tgt.id = uuid();
    
    src then MapFastTrackStatusCategoryMethod(src, tgt);

    //Code: Item required on Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-obs-codes', 'C128662','EGFR Exon 19 Mutation');

    //Date of Assessment  -> 23, 0, ft_grp_egfr_19-21
    // Assay -> assay component -> 23, 0, id_2608
    // Hersteller -> hersteller -> 23, 0, id_2609
    //these three items shown before were mapped in the following group
    src then MapObservationFastTrackDateAssayHerstellerEGFREXO1921(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Ergebnis
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1950'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', value);
        };
        //Change DNA -> dna-chg component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1951'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48004-6');
                value -> component.valueString = value;
            };
        };
        //Change Protein -> amino-acid-chg component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1952'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48005-3');
                value -> component.valueString = value;
            };
        };
    };

}
/* ------------ Observation BRAF Exon 20 Fast Track -------------------- */
group CreateTransformObservationBRAFExon20Vorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 23 and groupindex = 0 and itemid = 'id_1954'
                                    or blockindex = 23 and groupindex = 0 and itemid = 'id_1955'
                                    or blockindex = 23 and groupindex = 0 and itemid = 'id_1956'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationBRAFExon20Vorbefund(src, observation);
        };          
    }; 
}
/* ------------ Observation BRAF Exon 20 Fast Track -------------------- */
group TransformObservationBRAFExon20Vorbefund(source src: CTS_Transport, target tgt: Observation)
{ 
    src -> tgt.id = uuid();
    
    src then MapFastTrackStatusCategoryMethod(src, tgt);

    //Code: Item required on Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-obs-codes', 'C128663','EGFR Exon 20 Mutation');

    //Date of Assessment  -> 23, 0, ft_grp_egfr_19-21
    // Assay -> assay component -> 23, 0, id_2608
    // Hersteller -> hersteller -> 23, 0, id_2609
    //these three items shown before were mapped in the following group
    src then MapObservationFastTrackDateAssayHerstellerEGFREXO1921(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Ergebnis
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1954'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', value);
        };
        //Change DNA -> dna-chg component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1955'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48004-6');
                value -> component.valueString = value;
            };
        };
        //Change Protein -> amino-acid-chg component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1956'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48005-3');
                value -> component.valueString = value;
            };
        };
    };

}
/* ------------ Observation BRAF Exon 21 Fast Track -------------------- */
group CreateTransformObservationBRAFExon21Vorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 23 and groupindex = 0 and itemid = 'id_1958'
                                    or blockindex = 23 and groupindex = 0 and itemid = 'id_1959'
                                    or blockindex = 23 and groupindex = 0 and itemid = 'id_1960'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationBRAFExon21Vorbefund(src, observation);
        };          
    }; 
}
/* ------------ Observation BRAF Exon 21 Fast Track -------------------- */
group TransformObservationBRAFExon21Vorbefund(source src: CTS_Transport, target tgt: Observation)
{ 
    src -> tgt.id = uuid();
    
    src then MapFastTrackStatusCategoryMethod(src, tgt);

    //Code: Item required on Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-obs-codes', 'C128666','EGFR Exon 21 Mutation');

    //Date of Assessment  -> 23, 0, ft_grp_egfr_19-21
    // Assay -> assay component -> 23, 0, id_2608
    // Hersteller -> hersteller -> 23, 0, id_2609
    //these three items shown before were mapped in the following group
    src then MapObservationFastTrackDateAssayHerstellerEGFREXO1921(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Ergebnis
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1958'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', value);
        };
        //Change DNA -> dna-chg component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1959'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48004-6');
                value -> component.valueString = value;
            };
        };
        //Change Protein -> amino-acid-chg component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_1960'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48005-3');
                value -> component.valueString = value;
            };
        };
    };

}
/* -------------- Observation KRAS Exon Fast Track --------------------- */
group CreateTransformObservationKRASExon2Vorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 24 and groupindex = 0 and itemid = 'id_1961'
                                    or blockindex = 24 and groupindex = 0 and itemid = 'id_1962'
                                    or blockindex = 24 and groupindex = 0 and itemid = 'id_1963'
                                    or blockindex = 24 and groupindex = 0 and itemid = 'id_1964'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationKRASExon2Vorbefund(src, observation);
        };          
    }; 
}
/* -------------- Observation KRAS Exon Fast Track --------------------- */
group TransformObservationKRASExon2Vorbefund(source src: CTS_Transport, target tgt: Observation)
{ 
    src -> tgt.id = uuid();
    
    src then MapFastTrackStatusCategoryMethod(src, tgt);

    //Code: Item required on Simplifier
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-obs-codes', 'C135715','KRAS Exon 2 Mutation');

    src.operations as operations, operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 24 and groupindex = 0 and itemid = 'id_1961'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        // Ergebnis
        data.values as values where "blockindex = 24 and groupindex = 0 and itemid = 'id_1962'" then
        {
            values.value as value -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', value);
        };
        //Change DNA -> dna-chg component
        data.values as values where "blockindex = 24 and groupindex = 0 and itemid = 'id_1963'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48004-6');
                value -> component.valueString = value;
            };
        };
        //Change Protein -> amino-acid-chg component
        data.values as values where "blockindex = 24 and groupindex = 0 and itemid = 'id_1964'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code        = cc('http://loinc.org', '48005-3');
                value -> component.valueString = value;
            };
        };
    };

}
/*------------------------------------------------------------------------------
                                    Fusion NGS                                  
------------------------------------------------------------------------------*/
/* --------------------- Device NGSPanel Fusion NGS -------------------- */
group CreateTransformDeviceNGSPanelVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 25 and groupindex = 0 and itemid = 'id_1260'" then
        {
            src -> tgt.resource = create('Device') as device then TransformDeviceNGSPanelVorbefund(src, device);
        };          
    }; 
}
/* --------------------- Device NGSPanel Fusion NGS -------------------- */
group TransformDeviceNGSPanelVorbefund(source src: CTS_Transport, target tgt: Device)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Device';
    
    src.operations as operations, operations.data as data then
    {
        //NGS Lung Panel Version
        data.values as values where "blockindex = 25 and groupindex = 0 and itemid = 'id_1260'" then
        {
            values.value as value -> tgt.version = create('BackboneElement') as version then 
            {
                value -> version.value = value;
            };
        };
    };
}
/* ----------------- Observation NGSPanel Fusion NGS ------------------- */
group CreateTransformObservationNGSPanelVorbefund(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where   "blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_1160'
                                    or blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_1159'
                                    or blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_35'
                                    or blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_36'
                                    or blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_37'
                                    or blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_38'
                                    or blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'ngs_panel_reftranscript'
                                    or blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'ngs_panel_coverage'
                                    or blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_47'
                                    or blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_48'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationNGSPanelVorbefund(src, observation);
        };          
    }; 
}
/* ----------------- Observation NGSPanel Fusion NGS ------------------- */
group TransformObservationNGSPanelVorbefund(source src: CTS_Transport, target tgt: Observation)
{ 
    src -> tgt.id = uuid();

    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-panel';

    // Status : Item required on simplifier
    src ->  tgt.status as status, 
            status.extension as dataAbsentReason, 
            dataAbsentReason.url       = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    // code : Item required on simplifier : there is not code for NGS Lung Panel
    src -> tgt.code as code, 
            code.coding as coding, 
            coding.system as system, 
            system.extension as dataAbsentReason, 
            dataAbsentReason.url       = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    //Category
    src -> tgt.category as category then
    {
        src -> category.coding = create ('Coding') as coding, coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
                                                                coding.code = 'laboratory';                                                    
    };

    // Method : Item required on simplifier
    src -> tgt.method = cc('http://ncit.nci.nih.gov','C101293');

    src.operations as operations, operations.data as data then
    {
        /* ------------------- Panel-Gen -------------------- */
        //Date of Assessment
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_1160'" then
        {
            values.value as value -> tgt.effectiveDateTime = dateOp(value, 'date');
        };
        //Gen -> gene-studied
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_1159'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueCodeableConcept = cc('http://hl7.org/fhir/uv/genomics-reporting/ValueSet/hgnc',value);
                value -> component.code                 = cc('http://ncit.nci.nih.gov', '48018-6');
            };
        };
        //Exon -> exon
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_35'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://ncit.nci.nih.gov', 'C13231');
            };
        };
        //HGVS c. (Mutation cDNA) -> dna-chg
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_36'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://loinc.org', '48004-6');
            };
        };
        //HGVS p. (Mutation Protein) -> amino-acid-chg
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_37'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://loinc.org', '48005-3');
            };
        };
        //Allelic fraction -> allelicfraction
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_38'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code = cc('http://ncit.nci.nih.gov', 'C154665');
                value -> component.valueQuantity = create('Quantity') as quantity,
                                                   quantity.value  = value,
                                                   quantity.unit   ='%',
                                                   quantity.system = 'http://unitsofmeasure.org',
                                                   quantity.code   = '%';
            };
        };
        //Referenztranskript -> referenztranskript
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'ngs_panel_reftranscript'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://loinc.org', '51958-7');
            };
        };
        //Coverage -> coverage
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'ngs_panel_coverage'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.valueString = value;
                value -> component.code        = cc('http://loinc.org', '82121-5');
            };
        };
        //Biologische/molekulare Bewertung
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_47'" then
        {
            values.value as value -> tgt.interpretation = cc('http://hl7.org/fhir/ValueSet/observation-interpretation',value);
        };
        //Kommentar
        data.values as values where "blockindex = 26 and groupindex = 0 and repeatindex = 0 and itemid = 'id_48'" then
        {
            values.value as value -> tgt.note = create('Annotation') as annotation, annotation.text = value;
        };
    };

}
/*------------------------------------------------------------------------------
                             HELPERS                                   
------------------------------------------------------------------------------*/
group MapPercentageValue(source src: string, target tgt: Quantity)
{
    src -> tgt.value   = src,
            tgt.system = 'http://unitsofmeasure.org',
            tgt.unit   = 'percentage',
            tgt.code   = '%';
}
group MapStatusCategory(source src: CTS_Transport, target tgt: Observation)
{
    // Status: Item required in Simplifier
    src -> tgt.status = cast('final', 'FHIR.code');

    //category: Item required in Simplifier
    src -> tgt.category as category then
    {
        src -> category.coding = create ('Coding') as coding, coding.system = 'http://hl7.org/fhir/ValueSet/observation-category',
                                                                coding.code = 'laboratory';                                                    
    };
}
group MapIHCStatusCategoryMethod(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    src then MapStatusCategory(src, tgt);

    //Methode IHC
    src -> tgt.method = cc('http://ncit.nci.nih.gov', 'C23020');
}
group MapObservationALKDatePhaenotyp(source src: CTS_Transport, target tgt: Observation)
{
    src.operations as operations, operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2098'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2099'" then
        {
            values.value as value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as value ->tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueString = value;
                    value -> component.code        = cc('http://ncit.nci.nih.gov', 'C16977');
                };
            };
        };
    };
}
group MapObservationMETDatePhaenotyp(source src: CTS_Transport, target tgt: Observation)
{
    src.operations as operations, operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2132'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2133'" then
        {
            values.value as value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as value ->tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueString = value;
                    value -> component.code        = cc('http://ncit.nci.nih.gov', 'C16977');
                };
            };
        };
    };
}
group MapObservationRETDatePhaenotyp(source src: CTS_Transport, target tgt: Observation)
{
    src.operations as operations, operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2183'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 20 and groupindex = 0 and itemid = 'id_2184'" then
        {
            values.value as value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as value ->tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueString = value;
                    value -> component.code        = cc('http://ncit.nci.nih.gov', 'C16977');
                };
            };
        };
    };
}
group MapObservationROS1DatePhaenotyp(source src: CTS_Transport, target tgt: Observation)
{
    src.operations as operations, operations.data as data then
    {
        //Date of Assessment
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2211'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        //Phänotyp -> phaenotyp component
        data.values as values where "blockindex = 17 and groupindex = 0 and itemid = 'id_2212'" then
        {
            values.value as value where "%tgt.component.code.where(coding.code = 'C16977').exists().not()" then
            {
                values.value as value -> tgt.component = create('BackboneElement') as component then
                {
                    value -> component.valueString = value;
                    value -> component.code        = cc('http://ncit.nci.nih.gov', 'C16977');
                };
            };
        };
    };
}
group MapCISHStatusCategoryMethod(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ish';
    
    src then MapStatusCategory(src, tgt);

    //Methode CISH
    src -> tgt.method = cc('http://ncit.nci.nih.gov', 'C23022');
}
group MapFISHStatusCategoryMethod(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fish';

    //status: Item required on simplifier
    src ->  tgt.status as status, 
            status.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');
    
    //category: Item required in Simplifier
    src -> tgt.category as category then
    {
        src -> category.coding = create ('Coding') as coding, coding.system = 'http://hl7.org/fhir/ValueSet/observation-category',
                                                                coding.code = 'laboratory';                                                    
    };

    //Methode FISH
    src -> tgt.method = cc('http://ncit.nci.nih.gov', 'C17563');
}
group MapFusionNGSStatusCategoryMethod(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ngs-fusion-expression';
    
    //status: Item required on simplifier
    src ->  tgt.status as status, 
            status.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');
    
    //category: Item required in Simplifier
    src -> tgt.category as category then
    {
        src -> category.coding = create ('Coding') as coding, coding.system = 'http://hl7.org/fhir/ValueSet/observation-category',
                                                                coding.code = 'laboratory';                                                    
    };

    //Methode FusionNGS
    src -> tgt.method = cc('http://ncit.nci.nih.gov', 'C101293');
}
group MapFastTrackStatusCategoryMethod(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fasttrack';
    
    //status: Item required on simplifier
    src ->  tgt.status as status, 
            status.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    //category: Item required in Simplifier
    src -> tgt.category as category then
    {
        src -> category.coding = create ('Coding') as coding, coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
                                                                coding.code = 'laboratory';                                                    
    };

    //Methode Fast Track
    src -> tgt.method = cc('http://ncit.nci.nih.gov','C101293');
}
group MapObservationFastTrackDateAssayHerstellerEGFREXO1921(source src: CTS_Transport, target tgt: Observation)
{
    src.operations as operations, operations.data as data then
    {
        //Date of Assessment 
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'ft_grp_egfr_19-21'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        // Assay -> assay component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_2608'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code                 = cc('http://ncit.nci.nih.gov', 'C60819');
                value -> component.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/fasttrack-assays',value) ;
            };
        };

        // Hersteller -> hersteller component
        data.values as values where "blockindex = 23 and groupindex = 0 and itemid = 'id_2609'" then
        {
            values.value as value -> tgt.component = create('BackboneElement') as component then
            {
                value -> component.code                 = cc('http://ncit.nci.nih.gov', 'C25392');
                value -> component.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hersteller-molpatho', value);
            };
        };
    };
}