/// version = 0.1
/// title = "nNGM_Mapping_FastTrack"

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_FastTrackFHIR" = nNGM_Mapping_FastTrackFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/EpisodeOfCare" as target
uses "http://hl7.org/fhir/StructureDefinition/Organization" as target
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" as target
uses "http://hl7.org/fhir/StructureDefinition/Specimen" as target
uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" as target

/* ------------------------------ Bundle ---------------------------- */
group TransformBundleFastTrack(source src: CTS_Transport, target bundle: Bundle)
{
    src -> bundle.entry as entry then CreateTransformSpecimen(src, entry);
    src -> bundle.entry as entry then CreateTransformDiagnosticReport(src, entry);
    src -> bundle.entry as entry then CreateTransformOrganization(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationBRAFExon15(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationBRAFExon19(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationBRAFExon20(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationBRAFExon21(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationKRASExon2(src, entry);
    src -> bundle.entry as entry then CreateTransformServiceRequest(src, entry);
}

/* ------------------------------ Check if Specimen needs to be created ---------------------------- */
group CreateTransformSpecimen(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1601'" then
        {
            src -> tgt.resource = create('Specimen') as specimen then TransformSpecimen(src, specimen);
        };
    };
}

/* ------------------------------ Specimen ---------------------------- */
group TransformSpecimen(source src: CTS_Transport, target tgt: Specimen)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Specimen/nNGM';

    // Type
    src -> tgt.type as type, type.coding as snomedGlobalPatientSet, snomedGlobalPatientSet.system = 'http://snomed.info/sct',
                                                                    snomedGlobalPatientSet.version = 'http://snomed.info/sct/900000000000207008',
                                                                    snomedGlobalPatientSet.code = 'UNKNOWN';

    // Patient reference 
    src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    src.operations as operations, operations.data as data then
    {
        // Biopsy-ID
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1601'" then
        {
            values.value as bid -> tgt.identifier = create('identifier') as biopsieID,
                                                            biopsieID.system= 'http://uk-koeln.de/NamingSystem/nNGM/biopsienummer',
                                                            biopsieID.value = bid;
        };

    };
}

/* ------------------------------ Check if DiagnosticReport needs to be created ---------------------------- */
group CreateTransformDiagnosticReport(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            src -> tgt.resource = create('DiagnosticReport') as diagnosticReport then TransformDiagnosticReport(src, diagnosticReport);
        };
    };
}

/* ------------------------------ DiagnosticReport ---------------------------- */
group TransformDiagnosticReport(source src: CTS_Transport, target tgt: DiagnosticReport)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/DiagnosticReport/nNGM/befund';
    
    src ->  tgt.status as status, 
            status.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    src ->  tgt.code as code, 
            code.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');
            
    src.operations as operations, operations.data as data then
    {
        // Untersuchungs ID
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            values.value as id -> tgt.identifier = create('identifier') as befundNummer,
                                                            befundNummer.system= 'http://uk-koeln.de/NamingSystem/nNGM/befundnummer',
                                                            befundNummer.value = id;
        };
    };
}

/* ------------------------------ Check if Organization needs to be created ---------------------------- */
group CreateTransformOrganization(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            src -> tgt.resource = create('Organization') as organization then TransformOrganization(src, organization);
        };
    };
}

/* ------------------------------ Organization ---------------------------- */
group TransformOrganization(source src: CTS_Transport, target tgt: Organization)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://clinicalsite.org/fhir/StructureDefinition/organizationalunit';

    src.operations as operations, operations.data as data then
    {
        // Standort
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as name -> tgt.name = name;
        };
    };
}
        
/* ------------------------------ Check if Observation BRAF Exon 15 needs to be created---------------------------- */
group CreateTransformObservationBRAFExon15(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1945'
        or blockindex = 4 and groupindex = 0 and itemid = 'id_1912'
        or blockindex = 4 and groupindex = 0 and itemid = 'id_1913'
        or blockindex = 4 and groupindex = 0 and itemid = 'id_1946'
        or blockindex = 4 and groupindex = 0 and itemid = 'id_1947'
        or blockindex = 4 and groupindex = 0 and itemid = 'id_1948'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationBRAFExon15(src, observation);
        };
    };
}

/* ------------------------------ Observation BRAF Exon 15 ---------------------------- */
group TransformObservationBRAFExon15(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fasttrack';
    
    //Fast Track code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-obs-codes', 'C158854', 'BRAF Exon 15 Mutation');

    //Fast track category
    src then MapSopNumberCategoryMethodStatus(src, tgt);

    src.operations as operations, operations.data as data then
    {

        // Date of Assessment
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1945'" then
        {
            values.value as effectiveDT -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };
        
        // Assay
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1912'" then
        {
            values.value as assay -> tgt.component = create('BackboneElement') as componentAssay then
            {
                assay -> componentAssay.code = cc('http://ncit.nci.nih.gov', 'C60819');
                assay -> componentAssay.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-assays', assay) ;
            };
        };

        // Hersteller
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1913'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hersteller-molpatho', hersteller);
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1946'" then
        {
            values.value as ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', ergebnis);
        };
        
        //Change DNA
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1947'" then
        {
            values.value as DNAchg -> tgt.component = create('BackboneElement') as componentDNAchg then
            {
                DNAchg -> componentDNAchg.code = cc('http://loinc.org', '48004-6');
                DNAchg -> componentDNAchg.valueString = DNAchg;
            };
        };

        //Change Protein
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_1948'" then
        {
            values.value as AminoAcidChg -> tgt.component = create('BackboneElement') as componentAminoAcidChg then
            {
                AminoAcidChg -> componentAminoAcidChg.code = cc('http://loinc.org', '48005-3');
                AminoAcidChg -> componentAminoAcidChg.valueString = AminoAcidChg;
            };
        };

    };
}

/* ------------------------------ Check if Observation EGFR Exon 19 needs to be created---------------------------- */
group CreateTransformObservationBRAFExon19(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1950'
        or blockindex = 5 and groupindex = 0 and itemid = 'id_1951'
        or blockindex = 5 and groupindex = 0 and itemid = 'id_1952'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationBRAFExon19(src, observation);
        };
    };
}

/* ------------------------------ Observation EGFR Exon 19 ---------------------------- */
group TransformObservationBRAFExon19(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fasttrack';

    //Fast Track code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-obs-codes', 'C128662','EGFR Exon 19 Mutation');

    //Fast track category
    src then MapSopNumberCategoryMethodStatus(src, tgt);

    src then MapEGFREXO1921(src, tgt);
    
    src.operations as operations, operations.data as data then
    {
        // Ergebnis
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1950'" then
        {
            values.value as ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', ergebnis, ergebnis);
        };

        //Change DNA
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1951'" then
        {
            values.value as DNAchg -> tgt.component = create('BackboneElement') as componentDNAchg then
            {
                DNAchg -> componentDNAchg.code = cc('http://loinc.org', '48004-6');
                DNAchg -> componentDNAchg.valueString = DNAchg;
            };
        };

        //Change Protein
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1952'" then
        {
            values.value as AminoAcidChg -> tgt.component = create('BackboneElement') as componentAminoAcidChg then
            {
                AminoAcidChg -> componentAminoAcidChg.code = cc('http://loinc.org', '48005-3');
                AminoAcidChg -> componentAminoAcidChg.valueString = AminoAcidChg;
            };
        };
    };
}

/* ------------------------------ Check if Observation EGFR Exon 20 needs to be created ---------------------------- */
group CreateTransformObservationBRAFExon20(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1954'
        or blockindex = 5 and groupindex = 0 and itemid = 'id_1955'
        or blockindex = 5 and groupindex = 0 and itemid = 'id_1956'
        " then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationBRAFExon20(src, observation);
        };
    };
}

/* ------------------------------ Observation EGFR Exon 20 ---------------------------- */
group TransformObservationBRAFExon20(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fasttrack';

    //Fast Track code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-obs-codes', 'C128663','EGFR Exon 20 Mutation');

    //Fast track category
    src then MapSopNumberCategoryMethodStatus(src, tgt);

    src then MapEGFREXO1921(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Ergebnis
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1954'" then
        {
            values.value as ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', ergebnis, ergebnis);
        };

        //Change DNA
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1955'" then
        {
            values.value as DNAchg -> tgt.component = create('BackboneElement') as componentDNAchg then
            {
                DNAchg -> componentDNAchg.code = cc('http://loinc.org', '48004-6');
                DNAchg -> componentDNAchg.valueString = DNAchg;
            };
        };

        //Change Protein
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1956'" then
        {
            values.value as AminoAcidChg -> tgt.component = create('BackboneElement') as componentAminoAcidChg then
            {
                AminoAcidChg -> componentAminoAcidChg.code = cc('http://loinc.org', '48005-3');
                AminoAcidChg -> componentAminoAcidChg.valueString = AminoAcidChg;
            };
        };
    };
}

/* ------------------------------ Check if Observation EGFR Exon 21 needs to be created ---------------------------- */
group CreateTransformObservationBRAFExon21(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1958'
        or blockindex = 5 and groupindex = 0 and itemid = 'id_1959'
        or blockindex = 5 and groupindex = 0 and itemid = 'id_1960'
        " then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationBRAFExon21(src, observation);
        };
    };
}

/* ------------------------------ Observation EGFR Exon 21 ---------------------------- */
group TransformObservationBRAFExon21(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fasttrack';

    //Fast Track code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-obs-codes', 'C128666','EGFR Exon 21 Mutation');

    //Fast track category
    src then MapSopNumberCategoryMethodStatus(src, tgt);

    src then MapEGFREXO1921(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Ergebnis
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1958'" then
        {
            values.value as ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', ergebnis, ergebnis);
        };

        //Change DNA
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1959'" then
        {
            values.value as DNAchg -> tgt.component = create('BackboneElement') as componentDNAchg then
            {
                DNAchg -> componentDNAchg.code = cc('http://loinc.org', '48004-6');
                DNAchg -> componentDNAchg.valueString = DNAchg;
            };
        };

        //Change Protein
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_1960'" then
        {
            values.value as AminoAcidChg -> tgt.component = create('BackboneElement') as componentAminoAcidChg then
            {
                AminoAcidChg -> componentAminoAcidChg.code = cc('http://loinc.org', '48005-3');
                AminoAcidChg -> componentAminoAcidChg.valueString = AminoAcidChg;
            };
        };
    };
}

/* ------------------------------ Check if Observation KRAS Exon 2 needs to be created ---------------------------- */
group CreateTransformObservationKRASExon2(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1961'
        or blockindex = 6 and groupindex = 0 and itemid = 'id_2610'
        or blockindex = 6 and groupindex = 0 and itemid = 'id_2611'
        or blockindex = 6 and groupindex = 0 and itemid = 'id_1962'
        or blockindex = 6 and groupindex = 0 and itemid = 'id_1963'
        or blockindex = 6 and groupindex = 0 and itemid = 'id_1964'
        " then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationKRASExon2(src, observation);
        };
    };
}

/* ------------------------------ Observation KRAS Exon 2 ---------------------------- */
group TransformObservationKRASExon2(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fasttrack';

    //Fast Track code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/fasttrack-obs-codes', 'C135715','KRAS Exon 2 Mutation');

    //Fast track category
    src then MapSopNumberCategoryMethodStatus(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Date of Assessment
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1961'" then
        {
            values.value as effectiveDT  -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        // Assay
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2610'" then
        {
            values.value as assay -> tgt.component = create('BackboneElement') as componentAssay then
            {
                assay -> componentAssay.code = cc('http://ncit.nci.nih.gov', 'C60819');
                assay -> componentAssay.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/fasttrack-assays',assay) ;
            };
        };

        // Hersteller
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2611'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hersteller-molpatho', hersteller);
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1962'" then
        {
            values.value as ergebnis -> tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/act_non_act_na-value-codes', ergebnis, ergebnis);
        };
        //Change DNA
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1963'" then
        {
            values.value as DNAchg -> tgt.component = create('BackboneElement') as componentDNAchg then
            {
                DNAchg -> componentDNAchg.code = cc('http://loinc.org', '48004-6');
                DNAchg -> componentDNAchg.valueString = DNAchg;
            };
        };
        //Change Protein
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1964'" then
        {
            values.value as AminoAcidChg -> tgt.component = create('BackboneElement') as componentAminoAcidChg then
            {
                AminoAcidChg -> componentAminoAcidChg.code = cc('http://loinc.org', '48005-3');
                AminoAcidChg -> componentAminoAcidChg.valueString = AminoAcidChg;
            };
        };
    };
}


group MapSopNumberCategoryMethodStatus(source src: CTS_Transport, target tgt: Observation)
{
    // Method
    src -> tgt.method = cc('http://ncit.nci.nih.gov','C101293');

    // Status
    src ->  tgt.status as status, 
            status.extension as dataAbsentReason, 
            dataAbsentReason.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason', 
            dataAbsentReason.valueCode = cast('not-asked', 'FHIR.code');

    // SOP-Versionsnummer des Standorts
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2486'" then
        {
            values.value as sop -> tgt.component = create('BackboneElement') as componentSop then
            {
                sop -> componentSop.valueString = sop;
                sop -> componentSop.code = cc('http://ncit.nci.nih.gov', 'C48443');
            };
        };
    };
    
    //FISH category
    src -> tgt.category as category then
    {
        src -> category.coding = create ('Coding') as coding, coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
                                                                coding.code = 'laboratory';                                                    
    };
}


group MapEGFREXO1921(source src: CTS_Transport, target tgt: Observation)
{
    // ------------------------------ EGFR Exon 19-21 ---------------------------- 
    src.operations as operations, operations.data as data then
    {
        // Date of Assessment
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'ft_grp_egfr_19-21'" then
        {
            values.value as effectiveDT  -> tgt.effectiveDateTime = dateOp(effectiveDT, 'date');
        };

        // Assay
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2608'" then
        {
            values.value as assay -> tgt.component = create('BackboneElement') as componentAssay then
            {
                assay -> componentAssay.code = cc('http://ncit.nci.nih.gov', 'C60819');
                assay -> componentAssay.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/fasttrack-assays',assay) ;
            };
        };

        // Hersteller
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2609'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/hersteller-molpatho', hersteller);
            };
        };
    };
}

/* -------------------------------------- Check if Service Request is required -------------------------------------------- */
group CreateTransformServiceRequest(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2520'
        or blockindex = 7 and groupindex = 0 and itemid = 'id_2462'
        or blockindex = 7 and groupindex = 0 and itemid = 'id_2521'" then
        {
            src -> tgt.resource = create('ServiceRequest') as serviceRequest then TransformServiceRequest(src, serviceRequest);
        };
    };
}

/* -------------------------------------- Service Request -------------------------------------------- */
group TransformServiceRequest(source src: CTS_Transport, target tgt: ServiceRequest)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/ServiceRequest/nNGM/testung';

    src.operations as operations, operations.data as data then
    {
        //Status der Untersuchungen
        //Durchfuehrung
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2520'" then
        {
            values.value as value where "$this.value = 'in Bearbeitung'" then 
            {
                value -> tgt.status = 'active' collate;
            };
            values.value as value where "$this.value = 'abgeschlossen'" then 
            {
                value -> tgt.status = 'completed' collate;
            };
        };
    };

    // Extensions
    src then TransformFastTrackStatusExtension(src, tgt);
}

/* -------------------------------------- Create double extensions for Fast Track -------------------------------------------- */
group TransformFastTrackStatusExtension(source src: CTS_Transport, target tgt: ServiceRequest)
{
    src.operations as operations, operations.data as data then
    {
        // Status des Abschlusses
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2462'" then
        {
            values.value as value where "%tgt.status.extension.extension.where(url = 'status').exists().not()" then
            {
                value -> tgt.status as status collate, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as statusExtension then
                {
                    value -> statusExtension.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/NNGM/statusAbschluss',value, value);
                    value -> statusExtension.url = 'status';
                };
            };
        };

        //Datum des Abschlusses
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as value where "%tgt.status.extension.extension.where(url = 'datum').exists().not()" then
            {
                value -> tgt.status as status collate, status.extension as statusAbschluss collate, statusAbschluss.url = 'http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/statusAbschluss', statusAbschluss.extension as datumExtension then
                {
                    value -> datumExtension.valueDate = dateOp(value, 'date');
                    value -> datumExtension.url = 'datum';
                };
            };
        };
    };
}